<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetty.Codecs.Http2</name>
    </assembly>
    <members>
        <member name="T:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2">
             <summary>
             Abstract base class which defines commonly used features required to build <see cref="T:DotNetty.Codecs.Http2.Http2ConnectionHandler"/> instances.
            
             <h3>Three ways to build a <see cref="T:DotNetty.Codecs.Http2.Http2ConnectionHandler"/></h3>
             <h4>Let the builder create a <see cref="T:DotNetty.Codecs.Http2.Http2ConnectionHandler"/></h4>
             Simply call all the necessary setter methods, and then use <see cref="M:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Build"/> to build a new
             <see cref="T:DotNetty.Codecs.Http2.Http2ConnectionHandler"/>. Setting the following properties are prohibited because they are used for
             other ways of building a <see cref="T:DotNetty.Codecs.Http2.Http2ConnectionHandler"/>.
             conflicts with this option:
             <ul>
               <li><see cref="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Connection"/></li>
               <li><see cref="M:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Codec(DotNetty.Codecs.Http2.IHttp2ConnectionDecoder,DotNetty.Codecs.Http2.IHttp2ConnectionEncoder)"/></li>
             </ul>
            
            
             <h4>Let the builder use the <see cref="T:DotNetty.Codecs.Http2.Http2ConnectionHandler"/> you specified</h4>
             Call <see cref="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Connection"/> to tell the builder that you want to build the handler from the
             <see cref="T:DotNetty.Codecs.Http2.IHttp2Connection"/> you specified. Setting the following properties are prohibited and thus will trigger
             an <see cref="T:System.InvalidOperationException"/> because they conflict with this option.
             <ul>
               <li><see cref="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.IsServer"/></li>
               <li><see cref="M:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Codec(DotNetty.Codecs.Http2.IHttp2ConnectionDecoder,DotNetty.Codecs.Http2.IHttp2ConnectionEncoder)"/></li>
             </ul>
            
             <h4>Let the builder use the <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionDecoder"/> and <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder"/> you specified</h4>
             Call <see cref="M:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Codec(DotNetty.Codecs.Http2.IHttp2ConnectionDecoder,DotNetty.Codecs.Http2.IHttp2ConnectionEncoder)"/> to tell the builder that you want to built the
             handler from the <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionDecoder"/> and <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder"/> you specified. Setting the
             following properties are prohibited and thus will trigger an <see cref="T:System.InvalidOperationException"/> because they conflict
             with this option:
             <ul>
               <li><see cref="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.IsServer"/></li>
               <li><see cref="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Connection"/></li>
               <li><see cref="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.FrameLogger"/></li>
               <li><see cref="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.HeaderSensitivityDetector"/></li>
               <li><see cref="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.EncoderEnforceMaxConcurrentStreams"/></li>
               <li><see cref="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.EncoderIgnoreMaxHeaderListSize"/></li>
               <li><see cref="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.InitialHuffmanDecodeCapacity"/></li>
             </ul>
            
             <h3>Exposing necessary methods in a subclass</h3>
             <see cref="M:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Build"/> method and all property access methods are <c>protected</c>. Choose the methods to expose to the
             users of your builder implementation and make them <c>public</c>.
             </summary>
             <typeparam name="THandler">The type of handler created by this builder.</typeparam>
             <typeparam name="TBuilder">The concrete type of this builder.</typeparam>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.InitialSettings">
            <summary>
            Gets or sets the <see cref="T:DotNetty.Codecs.Http2.Http2Settings"/> to use for the initial connection settings exchange.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.FrameListener">
            <summary>
            Gets or sets the listener of inbound frames.
            </summary>
            <remarks>This listener will only be set if the decoder's listener is <c>null</c>.</remarks>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.GracefulShutdownTimeout">
            <summary>
            Gets or sets the graceful shutdown timeout of the <see cref="T:DotNetty.Codecs.Http2.IHttp2Connection"/> in milliseconds. Returns -1 if the
            timeout is indefinite.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.IsServer">
            <summary>
            Gets or sets if <see cref="M:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Build"/> will to create a <see cref="T:DotNetty.Codecs.Http2.IHttp2Connection"/> in server mode (<c>true</c>)
            or client mode (<c>false</c>).
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.MaxReservedStreams">
            <summary>
            Gets or sets the maximum number of streams which can be in the reserved state at any given time.
            
            <para>By default this value will be ignored on the server for local endpoint. This is because the RFC provides
            no way to explicitly communicate a limit to how many states can be in the reserved state, and instead relies
            on the peer to send RST_STREAM frames when they will be rejected.</para>
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Connection">
            <summary>
            Gets or sets the <see cref="T:DotNetty.Codecs.Http2.IHttp2Connection"/> to use.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Decoder">
            <summary>
            Gets the <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionDecoder"/> to use.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Encoder">
            <summary>
            Gets the <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder"/> to use.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Codec(DotNetty.Codecs.Http2.IHttp2ConnectionDecoder,DotNetty.Codecs.Http2.IHttp2ConnectionEncoder)">
            <summary>
            Sets the <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionDecoder"/> and <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder"/> to use.
            </summary>
            <param name="decoder"></param>
            <param name="encoder"></param>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.IsValidateHeaders">
            <summary>
            Gets or sets if HTTP headers should be validated according to
            <a href="https://tools.ietf.org/html/rfc7540#section-8.1.2.6">RFC 7540, 8.1.2.6</a>.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.FrameLogger">
            <summary>
            Gets or sets the logger that is used for the encoder and decoder.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.EncoderEnforceMaxConcurrentStreams">
            <summary>
            Gets or sets if the encoder should queue frames if the maximum number of concurrent streams
            would otherwise be exceeded.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.EncoderEnforceMaxQueuedControlFrames">
            <summary>
             Gets or sets the maximum number of queued control frames that are allowed before the connection is closed.
             This allows to protected against various attacks that can lead to high CPU / memory usage if the remote-peer
             floods us with frames that would have us produce control frames, but stops to read from the underlying socket.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.HeaderSensitivityDetector">
            <summary>
            Gets or sets the <see cref="T:DotNetty.Codecs.Http2.ISensitivityDetector"/> to use.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.EncoderIgnoreMaxHeaderListSize">
            <summary>
            Gets or sets if the <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>
            should be ignored when encoding headers.
            <para><c>true</c> to ignore
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>.</para>
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.InitialHuffmanDecodeCapacity">
            <summary>
            Does nothing, do not call.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.PromisedRequestVerifier">
            <summary>
            Gets or sets <see cref="T:DotNetty.Codecs.Http2.IHttp2PromisedRequestVerifier"/> to use.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.DecoderEnforceMaxConsecutiveEmptyDataFrames">
            <summary>
            Gets or sets the maximum number of consecutive empty DATA frames (without end_of_stream flag) that are allowed before
            the connection is closed. This allows to protected against the remote peer flooding us with such frames and
            so use up a lot of CPU. There is no valid use-case for empty DATA frames without end_of_stream flag.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.AutoAckSettingsFrame">
            <summary>
            Determine if settings frame should automatically be acknowledged and applied.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.AutoAckPingFrame">
            <summary>
            Determine if PING frame should automatically be acknowledged or not.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.DecoupleCloseAndGoAway">
            <summary>
            Determine if the <see cref="M:DotNetty.Transport.Channels.IChannel.CloseAsync"/> should be coupled with goaway and graceful close.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Build">
            <summary>
            Create a new <see cref="T:DotNetty.Codecs.Http2.Http2ConnectionHandler"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.Build(DotNetty.Codecs.Http2.IHttp2ConnectionDecoder,DotNetty.Codecs.Http2.IHttp2ConnectionEncoder,DotNetty.Codecs.Http2.Http2Settings)">
            <summary>
            Implement this method to create a new <see cref="T:DotNetty.Codecs.Http2.Http2ConnectionHandler"/> or its subtype instance.
            </summary>
            <param name="decoder"></param>
            <param name="encoder"></param>
            <param name="initialSettings"></param>
            <returns>The return of this method will be subject to the following:
            <para><see cref="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.FrameListener"/> will be set if not already set in the decoder</para>
            <see cref="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.GracefulShutdownTimeout"/> will always be set
            </returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.AbstractHttp2StreamChannel.Http2StreamChannelConfiguration">
            <summary>
            <see cref="T:DotNetty.Transport.Channels.IChannelConfiguration"/> so that the high and low writebuffer watermarks can reflect the outbound flow control
            window, without having to create a new <c>WriteBufferWaterMark</c> object whenever the flow control window
            changes.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.AbstractHttp2StreamChannel._readStatus">
            <summary>
            This variable represents if a read is in progress for the current channel or was requested.
            Note that depending upon the <see cref="T:DotNetty.Transport.Channels.IRecvByteBufAllocator"/> behavior a read may extend beyond the
            <see cref="M:DotNetty.Codecs.Http2.AbstractHttp2StreamChannel.Http2ChannelUnsafe.BeginRead"/> method scope. The <see cref="M:DotNetty.Codecs.Http2.AbstractHttp2StreamChannel.Http2ChannelUnsafe.BeginRead"/> loop may
            drain all pending data, and then if the parent channel is reading this channel may still accept frames.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.AbstractHttp2StreamChannel._firstFrameWritten">
            <summary>
            <c>true</c> after the first HEADERS frame has been written
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.AbstractHttp2StreamChannel.FireChildRead(DotNetty.Codecs.Http2.IHttp2Frame)">
            <summary>
            Receive a read message. This does not notify handlers unless a read is in progress on the channel.
            </summary>
            <param name="frame"></param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.AbstractHttp2StreamChannel.ReadStatus">
            <summary>
            The current status of the read-processing for a <see cref="T:DotNetty.Codecs.Http2.AbstractHttp2StreamChannel"/>.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.AbstractHttp2StreamChannel.ReadStatus.Idle">
            <summary>
            No read in progress and no read was requested (yet)
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.AbstractHttp2StreamChannel.ReadStatus.InProgress">
            <summary>
            Reading in progress
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.AbstractHttp2StreamChannel.ReadStatus.Requested">
            <summary>
            A read operation was requested.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.AbstractHttp2StreamChannel.MinHttp2FrameSize">
            <summary>
            Number of bytes to consider non-payload messages. 9 is arbitrary, but also the minimum size of an HTTP/2 frame.
            Primarily is non-zero.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.AbstractHttp2StreamChannel.FlowControlledFrameSizeEstimator">
            <summary>
            Returns the flow-control size for DATA frames, and <see cref="F:DotNetty.Codecs.Http2.AbstractHttp2StreamChannel.MinHttp2FrameSize"/> for all other frames.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.AbstractInboundHttp2ToHttpAdapterBuilder`2">
            <summary>
            A skeletal builder implementation of <see cref="T:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter"/> and its subtypes.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.AbstractInboundHttp2ToHttpAdapterBuilder`2.#ctor(DotNetty.Codecs.Http2.IHttp2Connection)">
            <summary>
            Creates a new <see cref="T:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter"/> builder for the specified <see cref="T:DotNetty.Codecs.Http2.IHttp2Connection"/>.
            </summary>
            <param name="connection">the object which will provide connection notification events
            for the current connection.</param>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractInboundHttp2ToHttpAdapterBuilder`2.Connection">
            <summary>
            Gets the <see cref="T:DotNetty.Codecs.Http2.IHttp2Connection"/>.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractInboundHttp2ToHttpAdapterBuilder`2.MaxContentLength">
            <summary>
            Gets or sets the maximum length of the message content.
            <para>
            If the length of the message content, exceeds this value, a <see cref="T:DotNetty.Codecs.TooLongFrameException"/> will be raised
            </para>
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractInboundHttp2ToHttpAdapterBuilder`2.IsValidateHttpHeaders">
            <summary>
            Specifies whether validation of HTTP headers should be performed.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.AbstractInboundHttp2ToHttpAdapterBuilder`2.IsPropagateSettings">
            <summary>
            Specifies whether a read settings frame should be propagated along the channel pipeline.
            </summary>
            <remarks>if <c>true</c> read settings will be passed along the pipeline. This can be useful
            to clients that need hold off sending data until they have received the settings.</remarks>
        </member>
        <member name="M:DotNetty.Codecs.Http2.AbstractInboundHttp2ToHttpAdapterBuilder`2.Build">
            <summary>
            Builds/creates a new <see cref="T:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter"/> instance using this builder's current settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.AbstractInboundHttp2ToHttpAdapterBuilder`2.Build(DotNetty.Codecs.Http2.IHttp2Connection,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter"/> with the specified properties.
            </summary>
            <param name="connection"></param>
            <param name="maxContentLength"></param>
            <param name="validateHttpHeaders"></param>
            <param name="propagateSettings"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.AlwaysSensitiveDetector">
            <summary>
            Always return <c>true</c> for <see cref="M:DotNetty.Codecs.Http2.ISensitivityDetector.IsSensitive(DotNetty.Common.Utilities.ICharSequence,DotNetty.Common.Utilities.ICharSequence)"/>.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.AlwaysVerifyPromisedRequestVerifier">
            <summary>
            A default implementation of <see cref="T:DotNetty.Codecs.Http2.IHttp2PromisedRequestVerifier"/> which always returns positive responses for
            all verification challenges.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.AlwaysVerifyPromisedRequestVerifier.IsAuthoritative(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.IHttp2Headers)">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.AlwaysVerifyPromisedRequestVerifier.IsCacheable(DotNetty.Codecs.Http2.IHttp2Headers)">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.AlwaysVerifyPromisedRequestVerifier.IsSafe(DotNetty.Codecs.Http2.IHttp2Headers)">
            <inheritdoc />
        </member>
        <member name="T:DotNetty.Codecs.Http2.CleartextHttp2ServerUpgradeHandler">
            <summary>
            Performing cleartext upgrade, by h2c HTTP upgrade or Prior Knowledge.
            This handler config pipeline for h2c upgrade when handler added.
            And will update pipeline once it detect the connection is starting HTTP/2 by
            prior knowledge or not.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.CleartextHttp2ServerUpgradeHandler.#ctor(DotNetty.Codecs.Http.HttpServerCodec,DotNetty.Codecs.Http.HttpServerUpgradeHandler,DotNetty.Transport.Channels.IChannelHandler)">
            <summary>
            Creates the channel handler provide cleartext HTTP/2 upgrade from HTTP
            upgrade or prior knowledge.
            </summary>
            <param name="httpServerCodec">the http server codec</param>
            <param name="httpServerUpgradeHandler">the http server upgrade handler for HTTP/2</param>
            <param name="http2ServerHandler">the http2 server handler, will be added into pipeline
            when starting HTTP/2 by prior knowledge</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.CompressorHttp2ConnectionEncoder.NewContentCompressor(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Returns a new <see cref="T:DotNetty.Transport.Channels.Embedded.EmbeddedChannel"/> that encodes the HTTP2 message content encoded in the specified
            <paramref name="contentEncoding"/>.
            </summary>
            <param name="ctx">the context.</param>
            <param name="contentEncoding">the value of the <c>content-encoding</c> header</param>
            <returns>a new <see cref="T:DotNetty.Codecs.ByteToMessageDecoder"/> if the specified encoding is supported. <c>null</c> otherwise
            (alternatively, you can throw a <see cref="T:DotNetty.Codecs.Http2.Http2Exception"/> to block unknown encoding).</returns>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">If the specified encoding is not not supported and warrants an exception.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.CompressorHttp2ConnectionEncoder.GetTargetContentEncoding(DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Returns the expected content encoding of the decoded content. Returning <paramref name="contentEncoding"/> is the default
            behavior, which is the case for most compressors.
            </summary>
            <param name="contentEncoding">the value of the <c>content-encoding</c> header</param>
            <returns>the expected content encoding of the new content.</returns>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">if the <paramref name="contentEncoding"/> is not supported and warrants an exception</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.CompressorHttp2ConnectionEncoder.NewCompressionChannel(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Compression.ZlibWrapper)">
            <summary>
            Generate a new instance of an <see cref="T:DotNetty.Transport.Channels.Embedded.EmbeddedChannel"/> capable of compressing data
            </summary>
            <param name="ctx">the context.</param>
            <param name="wrapper">Defines what type of encoder should be used</param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.CompressorHttp2ConnectionEncoder.NewCompressor(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.IHttp2Headers,System.Boolean)">
            <summary>
            Checks if a new compressor object is needed for the stream identified by <c>streamId</c>. This method will
            modify the <c>content-encoding</c> header contained in <paramref name="headers"/>.
            </summary>
            <param name="ctx">the context.</param>
            <param name="headers">Object representing headers which are to be written</param>
            <param name="endOfStream">Indicates if the stream has ended</param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">if any problems occur during initialization.</exception>
            <returns>The channel used to compress data.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.CompressorHttp2ConnectionEncoder.BindCompressorToStream(DotNetty.Transport.Channels.Embedded.EmbeddedChannel,System.Int32)">
            <summary>
            Called after the super class has written the headers and created any associated stream objects.
            </summary>
            <param name="compressor">The compressor associated with the stream identified by <paramref name="streamId"/>.</param>
            <param name="streamId">The stream id for which the headers were written.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.CompressorHttp2ConnectionEncoder.Cleanup(DotNetty.Codecs.Http2.IHttp2Stream,DotNetty.Transport.Channels.Embedded.EmbeddedChannel)">
            <summary>
            Release remaining content from <see cref="T:DotNetty.Transport.Channels.Embedded.EmbeddedChannel"/> and remove the compressor from the <see cref="T:DotNetty.Codecs.Http2.IHttp2Stream"/>.
            </summary>
            <param name="stream">The stream for which <paramref name="compressor"/> is the compressor for</param>
            <param name="compressor">The compressor for <paramref name="stream"/></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.CompressorHttp2ConnectionEncoder.NextReadableBuf(DotNetty.Transport.Channels.Embedded.EmbeddedChannel)">
            <summary>
            Read the next compressed <see cref="T:DotNetty.Buffers.IByteBuffer"/> from the <see cref="T:DotNetty.Transport.Channels.Embedded.EmbeddedChannel"/> or <c>null</c> if one does not exist.
            </summary>
            <param name="compressor">The channel to read from</param>
            <returns>The next decoded <see cref="T:DotNetty.Buffers.IByteBuffer"/> from the <see cref="T:DotNetty.Transport.Channels.Embedded.EmbeddedChannel"/> or <c>null</c> if one does not exist</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DecoratingHttp2ConnectionDecoder">
            <summary>
            Decorator around another <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionDecoder"/> instance.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DecoratingHttp2ConnectionEncoder">
            <summary>
            A decorator around another <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder"/> instance.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DecoratingHttp2FrameWriter">
            <summary>
            Decorator around another <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameWriter"/> instance.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2Connection">
            <summary>
            Simple implementation of <see cref="T:DotNetty.Codecs.Http2.IHttp2Connection"/>.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2Connection._listeners">
            <summary>
            We chose a <see cref="T:System.Collections.Generic.List`1"/> over a <see cref="T:System.Collections.Generic.ISet`1"/> to avoid allocating an <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            objects when iterating over the listeners.
            <para>Initial size of 4 because the default configuration currently has 3 listeners
            (local/remote flow controller and <see cref="T:DotNetty.Codecs.Http2.IStreamByteDistributor"/> and we leave room for 1 extra.
            We could be more aggressive but the ArrayList resize will double the size if we are too small.</para>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2Connection.#ctor(System.Boolean)">
            <summary>
            Creates a new connection with the given settings.
            </summary>
            <param name="server">whether or not this end-point is the server-side of the HTTP/2 connection.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2Connection.#ctor(System.Boolean,System.Int32)">
            <summary>
            Creates a new connection with the given settings.
            </summary>
            <param name="server">whether or not this end-point is the server-side of the HTTP/2 connection.</param>
            <param name="maxReservedStreams">The maximum amount of streams which can exist in the reserved state for each endpoint.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2Connection.IsClosed">
            <summary>
            Determine if <see cref="M:DotNetty.Codecs.Http2.DefaultHttp2Connection.CloseAsync(DotNetty.Common.Concurrency.IPromise)"/> has been called and no more streams are allowed to be created.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2Connection.IsStreamMapEmpty">
            <summary>
            Determine if <see cref="F:DotNetty.Codecs.Http2.DefaultHttp2Connection._streamMap"/> only contains the connection stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2Connection.RemoveStream(DotNetty.Codecs.Http2.DefaultHttp2Connection.DefaultHttp2Stream)">
            <summary>
            Remove a stream from the <see cref="F:DotNetty.Codecs.Http2.DefaultHttp2Connection._streamMap"/>.
            </summary>
            <param name="stream">the stream to remove.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2Connection.VerifyKey(DotNetty.Codecs.Http2.IHttp2ConnectionPropertyKey)">
            <summary>
            Verifies that the key is valid and returns it as the internal <see cref="T:DotNetty.Codecs.Http2.DefaultHttp2Connection.DefaultPropertyKey"/> type.
            </summary>
            <param name="key"></param>
            <exception cref="T:System.ArgumentNullException">if the key is <c>null</c> or not of type <see cref="T:DotNetty.Codecs.Http2.DefaultHttp2Connection.DefaultPropertyKey"/>.</exception>
            <exception cref="T:System.ArgumentException">if the key was not created by this connection.</exception>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2Connection.DefaultHttp2Stream">
            <summary>
            Simple stream implementation. Streams can be compared to each other by priority.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2Connection.DefaultHttp2Stream.PropertyMap">
            <summary>
            Provides the lazy initialization for the <see cref="T:DotNetty.Codecs.Http2.DefaultHttp2Connection.DefaultHttp2Stream"/> data map.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2Connection.Http2ConnectionStream">
            <summary>
            Stream class representing the connection, itself.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2Connection.DefaultEndpoint">
            <summary>
            Simple endpoint implementation.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2Connection.DefaultEndpoint._nextStreamIdToCreate">
            <summary>
            The minimum stream ID allowed when creating the next stream. This only applies at the time the stream is
            created. If the ID of the stream being created is less than this value, stream creation will fail. Upon
            successful creation of a stream, this value is incremented to the next valid stream ID.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2Connection.DefaultEndpoint._nextReservationStreamId">
            <summary>
            Used for reservation of stream IDs. Stream IDs can be reserved in advance by applications before the streams
            are actually created.  For example, applications may choose to buffer stream creation attempts as a way of
            working around <c>SETTINGS_MAX_CONCURRENT_STREAMS</c>, in which case they will reserve stream IDs for each
            buffered stream.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2Connection.ActiveStreams">
            <summary>
            Manages the list of currently active streams.  Queues any <see cref="T:System.Action"/>s that would modify the list of
            active streams in order to prevent modification while iterating.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2Connection.DefaultPropertyKey">
            <summary>
            Implementation of <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionPropertyKey"/> that specifies the index position of the property.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2Connection.PropertyKeyRegistry">
            <summary>
            A registry of all stream property keys known by this connection.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2Connection.PropertyKeyRegistry._keys">
            <summary>
            Initial size of 4 because the default configuration currently has 3 listeners
            (local/remote flow controller and <see cref="T:DotNetty.Codecs.Http2.IStreamByteDistributor"/>) and we leave room for 1 extra.
            We could be more aggressive but the ArrayList resize will double the size if we are too small.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2Connection.PropertyKeyRegistry.NewKey(DotNetty.Codecs.Http2.DefaultHttp2Connection)">
            <summary>
            Registers a new property key.
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2ConnectionDecoder">
            <summary>
            Provides the default implementation for processing inbound frame events and delegates to a
            <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameListener"/>
            <para>
            This class will read HTTP/2 frames and delegate the events to a <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameListener"/>
            </para>
            This interface enforces inbound flow control functionality through
            <see cref="T:DotNetty.Codecs.Http2.IHttp2LocalFlowController"/>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2ConnectionDecoder.#ctor(DotNetty.Codecs.Http2.IHttp2Connection,DotNetty.Codecs.Http2.IHttp2ConnectionEncoder,DotNetty.Codecs.Http2.IHttp2FrameReader)">
            <summary>Create a new instance.</summary>
            <param name="connection">The <see cref="T:DotNetty.Codecs.Http2.IHttp2Connection"/> associated with this decoder.</param>
            <param name="encoder">The <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder"/> associated with this decoder.</param>
            <param name="frameReader">Responsible for reading/parsing the raw frames. As opposed to this object which applies
            h2 semantics on top of the frames.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2ConnectionDecoder.#ctor(DotNetty.Codecs.Http2.IHttp2Connection,DotNetty.Codecs.Http2.IHttp2ConnectionEncoder,DotNetty.Codecs.Http2.IHttp2FrameReader,DotNetty.Codecs.Http2.IHttp2PromisedRequestVerifier)">
            <summary>Create a new instance.</summary>
            <param name="connection">The <see cref="T:DotNetty.Codecs.Http2.IHttp2Connection"/> associated with this decoder.</param>
            <param name="encoder">The <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder"/> associated with this decoder.</param>
            <param name="frameReader">Responsible for reading/parsing the raw frames. As opposed to this object which applies
            h2 semantics on top of the frames.</param>
            <param name="requestVerifier">Determines if push promised streams are valid.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2ConnectionDecoder.#ctor(DotNetty.Codecs.Http2.IHttp2Connection,DotNetty.Codecs.Http2.IHttp2ConnectionEncoder,DotNetty.Codecs.Http2.IHttp2FrameReader,DotNetty.Codecs.Http2.IHttp2PromisedRequestVerifier,System.Boolean)">
            <summary>Create a new instance.</summary>
            <param name="connection">The <see cref="T:DotNetty.Codecs.Http2.IHttp2Connection"/> associated with this decoder.</param>
            <param name="encoder">The <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder"/> associated with this decoder.</param>
            <param name="frameReader">Responsible for reading/parsing the raw frames. As opposed to this object which applies
            h2 semantics on top of the frames.</param>
            <param name="requestVerifier">Determines if push promised streams are valid.</param>
            <param name="autoAckSettings"><c>false</c> to disable automatically applying and sending settings acknowledge frame.
            The <paramref name="encoder"/> is expected to be an instance of
            <see cref="T:DotNetty.Codecs.Http2.IHttp2SettingsReceivedConsumer"/> and will apply the earliest received but not yet
            ACKed SETTINGS when writing the SETTINGS ACKs. <c>true</c> to enable automatically
            applying and sending settings acknowledge frame.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2ConnectionDecoder.#ctor(DotNetty.Codecs.Http2.IHttp2Connection,DotNetty.Codecs.Http2.IHttp2ConnectionEncoder,DotNetty.Codecs.Http2.IHttp2FrameReader,DotNetty.Codecs.Http2.IHttp2PromisedRequestVerifier,System.Boolean,System.Boolean)">
            <summary>Create a new instance.</summary>
            <param name="connection">The <see cref="T:DotNetty.Codecs.Http2.IHttp2Connection"/> associated with this decoder.</param>
            <param name="encoder">The <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder"/> associated with this decoder.</param>
            <param name="frameReader">Responsible for reading/parsing the raw frames. As opposed to this object which applies
            h2 semantics on top of the frames.</param>
            <param name="requestVerifier">Determines if push promised streams are valid.</param>
            <param name="autoAckSettings"><c>false</c> to disable automatically applying and sending settings acknowledge frame.
            The <paramref name="encoder"/> is expected to be an instance of
            <see cref="T:DotNetty.Codecs.Http2.IHttp2SettingsReceivedConsumer"/> and will apply the earliest received but not yet
            ACKed SETTINGS when writing the SETTINGS ACKs. <c>true</c> to enable automatically
            applying and sending settings acknowledge frame.</param>
            <param name="autoAckPing"><c>false</c> to disable automatically sending ping acknowledge frame. <c>true</c> to enable
            automatically sending ping ack frame.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2ConnectionDecoder.CalculateMaxHeaderListSizeGoAway(System.Int64)">
            <summary>
            Calculate the threshold in bytes which should trigger a <c>GO_AWAY</c> if a set of headers exceeds this amount.
            </summary>
            <param name="maxHeaderListSize">
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a> for the local endpoint.</param>
            <returns>the threshold in bytes which should trigger a <c>GO_AWAY</c> if a set of headers exceeds this amount.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2ConnectionDecoder.FrameReadListener">
            <summary>
            Handles all inbound frames from the network.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2ConnectionDecoder.FrameReadListener.ApplyLocalSettings(DotNetty.Codecs.Http2.Http2Settings)">
            <summary>
            Applies settings sent from the local endpoint.
            <para>This method is only called after the local settings have been acknowledged from the remote endpoint.</para>
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2ConnectionDecoder.FrameReadListener.ShouldIgnoreHeadersOrDataFrame(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.IHttp2Stream,DotNetty.Codecs.Http2.Http2FrameTypes)">
            <summary>
            Helper method to determine if a frame that has the semantics of headers or data should be ignored for the
            <paramref name="stream"/> (which may be <c>null</c>) associated with <paramref name="streamId"/>.
            </summary>
            <param name="ctx"></param>
            <param name="streamId"></param>
            <param name="stream"></param>
            <param name="frameName"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2ConnectionDecoder.FrameReadListener.StreamCreatedAfterGoAwaySent(System.Int32)">
            <summary>
            Helper method for determining whether or not to ignore inbound frames. A stream is considered to be created
            after a <c>GOAWAY</c> is sent if the following conditions hold:
            <para>
            <ul>
                <li>A <c>GOAWAY</c> must have been sent by the local endpoint</li>
                <li>The <paramref name="streamId"/> must identify a legitimate stream id for the remote endpoint to be creating</li>
                <li><paramref name="streamId"/> is greater than the Last Known Stream ID which was sent by the local endpoint
                in the last <c>GOAWAY</c> frame</li>
            </ul>
            </para>
            </summary>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2ConnectionEncoder">
            <summary>
            Default implementation of <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder"/>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2ConnectionEncoder.SendHeadersAsync(DotNetty.Codecs.Http2.IHttp2FrameWriter,DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Boolean,System.Int32,System.Int16,System.Boolean,System.Int32,System.Boolean,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Write headers via <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameWriter"/>. If <paramref name="hasPriority"/> is <c>false</c> it will ignore the
            <paramref name="streamDependency"/>, <paramref name="weight"/> and <paramref name="exclusive"/> parameters.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2ConnectionEncoder.FlowControlledData">
            <summary>
            Wrap a DATA frame so it can be written subject to flow-control. Note that this implementation assumes it
            only writes padding once for the entire payload as opposed to writing it once per-frame. This makes the
            <see cref="P:DotNetty.Codecs.Http2.DefaultHttp2ConnectionEncoder.FlowControlledData.Size"/> calculation deterministic thereby greatly simplifying the implementation.
            <para>
            If frame-splitting is required to fit within max-frame-size and flow-control constraints we ensure that
            the passed promise is not completed until last frame write.
            </para>
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2ConnectionEncoder.FlowControlledHeaders">
            <summary>
            Wrap headers so they can be written subject to flow-control. While headers do not have cost against the
            flow-control window their order with respect to other frames must be maintained, hence if a DATA frame is
            blocked on flow-control a HEADER frame must wait until this frame has been written.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2ConnectionEncoder.FlowControlledBase">
            <summary>
            Common base type for payloads to deliver via flow-control.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2DataFrame">
            <summary>
            The default <see cref="T:DotNetty.Codecs.Http2.IHttp2DataFrame"/> implementation.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2DataFrame.#ctor(DotNetty.Buffers.IByteBuffer)">
            <summary>
            Equivalent to <see cref="M:DotNetty.Codecs.Http2.DefaultHttp2DataFrame.#ctor(DotNetty.Buffers.IByteBuffer,System.Boolean)"/>.
            </summary>
            <param name="content">non-<c>null</c> payload</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2DataFrame.#ctor(System.Boolean)">
            <summary>
            Equivalent to {@code new DefaultHttp2DataFrame(Unpooled.EMPTY_BUFFER, endStream)}.
            </summary>
            <param name="endStream">whether this data should terminate the stream</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2DataFrame.#ctor(DotNetty.Buffers.IByteBuffer,System.Boolean)">
            <summary>
            Equivalent to {@code new DefaultHttp2DataFrame(content, endStream, 0)}.
            </summary>
            <param name="content">non-<c>null</c> payload</param>
            <param name="endStream">whether this data should terminate the stream</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2DataFrame.#ctor(DotNetty.Buffers.IByteBuffer,System.Boolean,System.Int32)">
            <summary>
            Construct a new data message.
            </summary>
            <param name="content">non-<c>null</c> payload</param>
            <param name="endStream">whether this data should terminate the stream</param>
            <param name="padding">additional bytes that should be added to obscure the true content size. Must be between 0 and
            256 (inclusive).</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2DataFrame.ToString">
            <inheritdoc />
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2FrameReader">
            <summary>
            A <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameReader"/> that supports all frame types defined by the HTTP/2 specification.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2FrameReader._readingHeaders">
            <summary>
            <c>true</c> = reading headers, <c>false</c> = reading payload.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2FrameReader._readError">
            <summary>
            Once set to <c>true</c> the value will never change. This is set to <c>true</c> if an unrecoverable error which
            renders the connection unusable.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2FrameReader.#ctor">
            <summary>
            Create a new instance. Header names will be validated.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2FrameReader.#ctor(System.Boolean)">
            <summary>
            Create a new instance.
            </summary>
            <param name="validateHeaders"><c>true</c> to validate headers. <c>false</c> to not validate headers.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2FrameReader.ReadPadding(DotNetty.Buffers.IByteBuffer)">
            <summary>
            If padding is present in the payload, reads the next byte as padding. The padding also includes the one byte
            width of the pad length field. Otherwise, returns zero.
            </summary>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2FrameReader.LengthWithoutTrailingPadding(System.Int32,System.Int32)">
            <summary>
            The padding parameter consists of the 1 byte pad length field and the trailing padding bytes.
            </summary>
            <param name="readableBytes"></param>
            <param name="padding"></param>
            <returns>the number of readable bytes without the trailing padding.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2FrameReader.HeadersContinuation">
            <summary>
            Base class for processing of HEADERS and PUSH_PROMISE header blocks that potentially span
            multiple frames. The implementation of this interface will perform the final callback to the
            <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameListener"/> once the end of headers is reached.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2FrameReader.HeadersContinuation.GetStreamId">
            <summary>
            Returns the stream for which headers are currently being processed.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2FrameReader.HeadersContinuation.ProcessFragment(System.Boolean,DotNetty.Buffers.IByteBuffer,System.Int32,DotNetty.Codecs.Http2.IHttp2FrameListener)">
            <summary>
            Processes the next fragment for the current header block.
            </summary>
            <param name="endOfHeaders">whether the fragment is the last in the header block.</param>
            <param name="fragment">the fragment of the header block to be added.</param>
            <param name="len"></param>
            <param name="listener">the listener to be notified if the header block is completed.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2FrameReader.HeadersContinuation.Close">
            <summary>
            Free any allocated resources.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2FrameReader.HeadersBlockBuilder">
            <summary>
            Utility class to help with construction of the headers block that may potentially span
            multiple frames.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2FrameReader.HeadersBlockBuilder.HeaderSizeExceeded">
            <summary>
            The local header size maximum has been exceeded while accumulating bytes.
            </summary>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">A connection error indicating too much data has been received.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2FrameReader.HeadersBlockBuilder.AddFragment(DotNetty.Buffers.IByteBuffer,System.Int32,DotNetty.Buffers.IByteBufferAllocator,System.Boolean)">
            <summary>
            Adds a fragment to the block.
            </summary>
            <param name="fragment">the fragment of the headers block to be added.</param>
            <param name="len"></param>
            <param name="alloc">allocator for new blocks if needed.</param>
            <param name="endOfHeaders">flag indicating whether the current frame is the end of the headers.
            This is used for an optimization for when the first fragment is the full
            block. In that case, the buffer is used directly without copying.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2FrameReader.HeadersBlockBuilder.Headers">
            <summary>
            Builds the headers from the completed headers block. After this is called, this builder
            should not be called again.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2FrameReader.HeadersBlockBuilder.Close">
            <summary>
            Closes this builder and frees any resources.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2FrameReader.VerifyNotProcessingHeaders">
            <summary>
            Verify that current state is not processing on header block
            </summary>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">if <see cref="F:DotNetty.Codecs.Http2.DefaultHttp2FrameReader._headersContinuation"/> is not null</exception>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2FrameStream">
            <summary>
            <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameStream"/> implementation.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2FrameWriter">
            <summary>
            A <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameWriter"/> that supports all frame types defined by the HTTP/2 specification.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2FrameWriter.ZeroBuffer">
            <summary>
            This buffer is allocated to the maximum size of the padding field, and filled with zeros.
            When padding is needed it can be taken as a slice of this buffer. Users should call <see cref="M:DotNetty.Common.IReferenceCounted.Retain"/>
            before using their slice.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2FrameWriter.WriteContinuationFramesAsync(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Buffers.IByteBuffer,DotNetty.Common.Concurrency.SimplePromiseAggregator)">
            <summary>
            Writes as many continuation frames as needed until <paramref name="headerBlock"/> are consumed.
            </summary>
            <param name="ctx"></param>
            <param name="streamId"></param>
            <param name="headerBlock"></param>
            <param name="promiseAggregator"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2FrameWriter.PaddingBytes(System.Int32)">
            <summary>
            Returns the number of padding bytes that should be appended to the end of a frame.
            </summary>
            <param name="padding"></param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2GoAwayFrame">
            <summary>
            The default <see cref="T:DotNetty.Codecs.Http2.IHttp2GoAwayFrame"/> implementation.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2GoAwayFrame.#ctor(DotNetty.Codecs.Http2.Http2Error)">
            <summary>
            Equivalent to {@code new DefaultHttp2GoAwayFrame(error.code())}.
            </summary>
            <param name="error">non-<c>null</c> reason for the go away</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2GoAwayFrame.#ctor(DotNetty.Codecs.Http2.Http2Error,DotNetty.Buffers.IByteBuffer)">
            <summary>
            Construct a new GOAWAY message.
            </summary>
            <param name="error">non-<c>null</c> reason for the go away</param>
            <param name="content">non-<c>null</c> debug data</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2GoAwayFrame.#ctor(System.Int32,DotNetty.Codecs.Http2.Http2Error,DotNetty.Buffers.IByteBuffer)">
            <summary>
            Construct a new GOAWAY message.
            <para>This constructor is for internal use only. A user should not have to specify a specific last stream identifier,
            but use <see cref="P:DotNetty.Codecs.Http2.DefaultHttp2GoAwayFrame.ExtraStreamIds"/> instead.</para>
            </summary>
            <param name="lastStreamId"></param>
            <param name="errorCode"></param>
            <param name="content"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2Headers.#ctor">
            <summary>
            Create a new instance.
            Header names will be validated according to <a href="https://tools.ietf.org/html/rfc7540">rfc7540</a>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2Headers.#ctor(System.Boolean)">
            <summary>
            Create a new instance.
            </summary>
            <param name="validate"><c>true</c> to validate header names according to
            <a href="https://tools.ietf.org/html/rfc7540">rfc7540</a>. <c>false</c> to not validate header names.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2Headers.#ctor(System.Boolean,System.Int32)">
            <summary>
            Create a new instance.
            </summary>
            <param name="validate"></param>
            <param name="arraySizeHint"></param>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2HeadersDecoder._headerArraySizeAccumulator">
            <summary>
            Used to calculate an exponential moving average of header sizes to get an estimate of how large the data
            structure for storing headers should be.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2HeadersDecoder.#ctor(System.Boolean,System.Int64)">
            <summary>
            Create a new instance.
            </summary>
            <param name="validateHeaders"><c>true</c> to validate headers are valid according to the RFC.</param>
            <param name="maxHeaderListSize">This is the only setting that can be configured before notifying the peer.
            This is because <a href="https://tools.ietf.org/html/rfc7540#section-6.5.1">SETTINGS_MAX_HEADER_LIST_SIZE</a>
            allows a lower than advertised limit from being enforced, and the default limit is unlimited
            (which is dangerous).</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2HeadersDecoder.#ctor(System.Boolean,System.Int64,System.Int32)">
            <summary>
            Create a new instance.
            </summary>
            <param name="validateHeaders"><c>true</c> to validate headers are valid according to the RFC.</param>
            <param name="maxHeaderListSize">This is the only setting that can be configured before notifying the peer.
            This is because <a href="https://tools.ietf.org/html/rfc7540#section-6.5.1">SETTINGS_MAX_HEADER_LIST_SIZE</a>
            allows a lower than advertised limit from being enforced, and the default limit is unlimited
            (which is dangerous).</param>
            <param name="initialHuffmanDecodeCapacity">Does nothing, do not use.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2HeadersDecoder.#ctor(System.Boolean,DotNetty.Codecs.Http2.HpackDecoder)">
            <summary>
            Exposed Used for testing only! Default values used in the initial settings frame are overridden intentionally
            for testing but violate the RFC if used outside the scope of testing.
            </summary>
            <param name="validateHeaders"></param>
            <param name="hpackDecoder"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2HeadersDecoder.NumberOfHeadersGuess">
            <summary>
            A weighted moving average estimating how many headers are expected during the decode process.
            </summary>
            <returns>an estimate of how many headers are expected during the decode process.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2HeadersDecoder.ValidateHeaders">
            <summary>
            Determines if the headers should be validated as a result of the decode operation.
            </summary>
            <returns><c>true</c> if the headers should be validated as a result of the decode operation.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2HeadersDecoder.NewHeaders">
            <summary>
            Create a new <see cref="T:DotNetty.Codecs.Http2.IHttp2Headers"/> object which will store the results of the decode operation.
            </summary>
            <returns>a new <see cref="T:DotNetty.Codecs.Http2.IHttp2Headers"/> object which will store the results of the decode operation.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2HeadersEncoder.#ctor(DotNetty.Codecs.Http2.ISensitivityDetector,DotNetty.Codecs.Http2.HpackEncoder)">
            <summary>
            Exposed Used for testing only! Default values used in the initial settings frame are overridden intentionally
            for testing but violate the RFC if used outside the scope of testing.
            </summary>
            <param name="sensitivityDetector"></param>
            <param name="hpackEncoder"></param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2HeadersFrame">
            <summary>
            The default <see cref="T:DotNetty.Codecs.Http2.IHttp2HeadersFrame"/> implementation.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2HeadersFrame.#ctor(DotNetty.Codecs.Http2.IHttp2Headers,System.Boolean)">
            <summary>
            Equivalent to {@code new DefaultHttp2HeadersFrame(headers, endStream, 0)}.
            </summary>
            <param name="headers">the non-<c>null</c> headers to send</param>
            <param name="endStream"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2HeadersFrame.#ctor(DotNetty.Codecs.Http2.IHttp2Headers,System.Boolean,System.Int32)">
            <summary>
            Construct a new headers message.
            </summary>
            <param name="headers">the non-<c>null</c> headers to send</param>
            <param name="endStream">whether these headers should terminate the stream</param>
            <param name="padding">additional bytes that should be added to obscure the true content size. Must be between 0 and
            256 (inclusive).</param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController">
            <summary>
            Basic implementation of <see cref="T:DotNetty.Codecs.Http2.IHttp2LocalFlowController"/>.
            <para>This class is <c>NOT</c> thread safe. The assumption is all methods must be invoked from a single thread.
            Typically this thread is the event loop thread for the <see cref="T:DotNetty.Transport.Channels.IChannelHandlerContext"/> managed by this class.</para>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.DefaultWindowUpdateRatio">
            <summary>
            The default ratio of window size to initial window size below which a <c>WINDOW_UPDATE</c>
            is sent to expand the window.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.#ctor(DotNetty.Codecs.Http2.IHttp2Connection,System.Single,System.Boolean)">
            <summary>
            Constructs a controller with the given settings.
            </summary>
            <param name="connection">the connection state.</param>
            <param name="windowUpdateRatio">the window percentage below which to send a <c>WINDOW_UPDATE</c>.</param>
            <param name="autoRefillConnectionWindow">if <c>true</c>, effectively disables the connection window
            in the flow control algorithm as they will always refill automatically without requiring the
            application to consume the bytes. When enabled, the maximum bytes you must be prepared to
            queue is proportional to <c>maximum number of concurrent streams * the initial window
            size per stream</c>
            (<a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_CONCURRENT_STREAMS</a>
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_INITIAL_WINDOW_SIZE</a>).
            </param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.WindowUpdateRatio(System.Single)">
            <summary>
            The window update ratio is used to determine when a window update must be sent. If the ratio
            of bytes processed since the last update has meet or exceeded this ratio then a window update will
            be sent. This is the global window update ratio that will be used for new streams.
            </summary>
            <param name="ratio">the ratio to use when checking if a <c>WINDOW_UPDATE</c> is determined necessary for new streams.</param>
            <exception cref="T:System.ArgumentException">If the ratio is out of bounds (0, 1).</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.WindowUpdateRatio">
            <summary>
            The window update ratio is used to determine when a window update must be sent. If the ratio
            of bytes processed since the last update has meet or exceeded this ratio then a window update will
            be sent. This is the global window update ratio that will be used for new streams.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.WindowUpdateRatio(DotNetty.Codecs.Http2.IHttp2Stream,System.Single)">
            <summary>
            The window update ratio is used to determine when a window update must be sent. If the ratio
            of bytes processed since the last update has meet or exceeded this ratio then a window update will
            be sent. This window update ratio will only be applied to <c>streamId</c>.
            <para>Note it is the responsibly of the caller to ensure that the
            initial <c>SETTINGS</c> frame is sent before this is called. It would
            be considered a <see cref="F:DotNetty.Codecs.Http2.Http2Error.ProtocolError"/> if a <c>WINDOW_UPDATE</c>
            was generated by this method before the initial <c>SETTINGS</c> frame is sent.</para>
            </summary>
            <param name="stream">the stream for which <paramref name="ratio"/> applies to.</param>
            <param name="ratio">the ratio to use when checking if a <c>WINDOW_UPDATE</c> is determined necessary.</param>
            <remarks>If a protocol-error occurs while generating <c>WINDOW_UPDATE</c> frames</remarks>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.WindowUpdateRatio(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            The window update ratio is used to determine when a window update must be sent. If the ratio
            of bytes processed since the last update has meet or exceeded this ratio then a window update will
            be sent. This window update ratio will only be applied to <c>streamId</c>.
            </summary>
            <remarks>If no stream corresponding to <paramref name="stream"/> could be found.</remarks>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.AutoRefillState">
            <summary>
            Flow control state that does autorefill of the flow control window when the data is received.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.DefaultState">
            <summary>
            Flow control window state for an individual stream.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.DefaultState._window">
            <summary>
            The actual flow control window that is decremented as soon as <c>DATA</c> arrives.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.DefaultState._processedWindow">
            <summary>
            A view of <see cref="F:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.DefaultState._window"/> that is used to determine when to send <c>WINDOW_UPDATE</c>
            frames. Decrementing this window for received <c>DATA</c> frames is delayed until the
            application has indicated that the data has been fully processed. This prevents sending
            a <c>WINDOW_UPDATE</c> until the number of processed bytes drops below the threshold.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.DefaultState._initialStreamWindowSize">
            <summary>
            This is what is used to determine how many bytes need to be returned relative to <see cref="F:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.DefaultState._processedWindow"/>.
            Each stream has their own initial window size.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.DefaultState._streamWindowUpdateRatio">
            <summary>
            This is used to determine when <see cref="F:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.DefaultState._processedWindow"/> is sufficiently far away from
            <see cref="F:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.DefaultState._initialStreamWindowSize"/> such that a <c>WINDOW_UPDATE</c> should be sent.
            Each stream has their own window update ratio.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.DefaultState.WriteWindowUpdate">
            <summary>
            Called to perform a window update for this stream (or connection). Updates the window size back
            to the size of the initial window and sends a window update frame to the remote endpoint.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.REDUCED_FLOW_STATE">
            <summary>
            The local flow control state for a single stream that is not in a state where flow controlled frames cannot
            be exchanged.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.IFlowState">
            <summary>
            An abstraction which provides specific extensions used by local flow control.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.IFlowState.IncrementInitialStreamWindow(System.Int32)">
            <summary>
            Increment the initial window size for this stream.
            </summary>
            <param name="delta">The amount to increase the initial window size by.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.IFlowState.WriteWindowUpdateIfNeeded">
            <summary>
            Updates the flow control window for this stream if it is appropriate.
            </summary>
            <returns><c>true</c> if <c>WINDOW_UPDATE</c> was written, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.IFlowState.ConsumeBytes(System.Int32)">
            <summary>
            Indicates that the application has consumed <paramref name="numBytes"/> from the connection or stream and is
            ready to receive more data.
            </summary>
            <param name="numBytes">the number of bytes to be returned to the flow control window.</param>
            <returns><c>true</c> if <c>WINDOW_UPDATE</c> was written, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.IFlowState.ReceiveFlowControlledFrame(System.Int32)">
            <summary>
            A flow control event has occurred and we should decrement the amount of available bytes for this stream.
            </summary>
            <param name="dataLength">The amount of data to for which this stream is no longer eligible to use for flow control.</param>
            <remarks>If too much data is used relative to how much is available.</remarks>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.IFlowState.IncrementFlowControlWindows(System.Int32)">
            <summary>
            Increment the windows which are used to determine many bytes have been processed.
            </summary>
            <param name="delta">The amount to increment the window by.</param>
            <remarks>if integer overflow occurs on the window.</remarks>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2LocalFlowController.WindowUpdateVisitor">
            <summary>
            Provides a means to iterate over all active streams and increment the flow control windows.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2PingFrame">
            <summary>
            The default <see cref="T:DotNetty.Codecs.Http2.IHttp2PingFrame"/> implementation.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController">
            <summary>
            Basic implementation of <see cref="T:DotNetty.Codecs.Http2.IHttp2RemoteFlowController"/>.
            <para>This class is <c>NOT</c> thread safe. The assumption is all methods must be invoked from a single thread.
            Typically this thread is the event loop thread for the <see cref="T:DotNetty.Transport.Channels.IChannelHandlerContext"/> managed by this class.</para>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.SetChannelHandlerContext(DotNetty.Transport.Channels.IChannelHandlerContext)">
            <inheritdoc />
            <remarks>Any queued <see cref="T:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled"/> objects will be sent.</remarks>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.ConnectionWindowSize">
            <summary>
            Returns the flow control window for the entire connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.WritableBytes">
            <summary>
            The amount of bytes that can be supported by underlying <see cref="T:DotNetty.Transport.Channels.IChannel"/> without
            queuing "too-much".
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState">
            <summary>
            The remote flow control state for a single stream.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState._writing">
            <summary>
            Set to true while a frame is being written, false otherwise.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState._cancelled">
            <summary>
            Set to true if cancel() was called.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.IsWritable">
            <summary>
            Determine if the stream associated with this object is writable.
            </summary>
            <returns><c>true</c> if the stream associated with this object is writable.</returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.Stream">
            <summary>
            The stream this state is associated with.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.MarkedWritability">
            <summary>
            Returns the parameter from the last call to <see cref="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.MarkedWritability(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.MarkedWritability(System.Boolean)">
            <summary>
            Save the state of writability.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.SetWindowSize(System.Int32)">
            <summary>
            Reset the window size for this stream.
            </summary>
            <param name="initialWindowSize"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.WriteAllocatedBytes(System.Int32)">
            <summary>
            Write the allocated bytes for this stream.
            </summary>
            <param name="allocated"></param>
            <returns>the number of bytes written for a stream or <c>-1</c> if no write occurred.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.IncrementStreamWindow(System.Int32)">
            <summary>
            Increments the flow control window for this stream by the given delta and returns the new value.
            </summary>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.WritableWindow">
            <summary>
            Returns the maximum writable window (minimum of the stream and connection windows).
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.EnqueueFrame(DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled)">
            <summary>
            Adds the <paramref name="frame"/> to the pending queue and increments the pending byte count.
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.Peek">
            <summary>
            Returns the head of the pending queue, or <c>null</c> if empty.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.Cancel(DotNetty.Codecs.Http2.Http2Error,System.Exception)">
            <summary>
            Clears the pending queue and writes errors for each remaining frame.
            </summary>
            <param name="error">the <see cref="T:DotNetty.Codecs.Http2.Http2Error"/> to use.</param>
            <param name="cause">the <see cref="T:System.Exception"/> that caused this method to be invoked.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.IncrementPendingBytes(System.Int32,System.Boolean)">
            <summary>
            Increments the number of pending bytes for this node and optionally updates the <see cref="T:DotNetty.Codecs.Http2.IStreamByteDistributor"/>
            </summary>
            <param name="numBytes"></param>
            <param name="updateStreamableBytes"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.DecrementPendingBytes(System.Int32,System.Boolean)">
            <summary>
            If this frame is in the pending queue, decrements the number of pending bytes for the stream.
            </summary>
            <param name="bytes"></param>
            <param name="updateStreamableBytes"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.DecrementFlowControlWindow(System.Int32)">
            <summary>
            Decrement the per stream and connection flow control window by <paramref name="bytes"/>.
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.WriteError(DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled,DotNetty.Codecs.Http2.Http2Exception)">
            <summary>
            Discards this <see cref="T:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled"/>, writing an error. If this frame is in the pending queue,
            the unwritten bytes are removed from this branch of the priority tree.
            </summary>
            <param name="frame"></param>
            <param name="cause"></param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.WritabilityMonitor">
            <summary>
            Abstract class which provides common functionality for writability monitor implementations.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.WritabilityMonitor.ChannelWritabilityChange">
            <summary>
            Called when the writability of the underlying channel changes.
            If a write occurs and an exception happens in the write operation.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.WritabilityMonitor.StateCancelled(DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState)">
            <summary>
            Called when the state is cancelled.
            </summary>
            <param name="state">the state that was cancelled.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.WritabilityMonitor.WindowSize(DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState,System.Int32)">
            <summary>
            Set the initial window size for <paramref name="state"/>.
            </summary>
            <param name="state">the state to change the initial window size for.</param>
            <param name="initialWindowSize">the size of the window in bytes.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.WritabilityMonitor.IncrementWindowSize(DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState,System.Int32)">
            <summary>
            Increment the window size for a particular stream.
            </summary>
            <param name="state">the state associated with the stream whose window is being incremented.</param>
            <param name="delta">The amount to increment by.</param>
            <remarks>If this operation overflows the window for <paramref name="state"/>.</remarks>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.WritabilityMonitor.EnqueueFrame(DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState,DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled)">
            <summary>
            Add a frame to be sent via flow control.
            </summary>
            <param name="state">The state associated with the stream which the <paramref name="frame"/> is associated with.</param>
            <param name="frame">the frame to enqueue.</param>
            <remarks>If a writability error occurs.</remarks>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.WritabilityMonitor.IncrementPendingBytes(System.Int32)">
            <summary>
            Increment the total amount of pending bytes for all streams. When any stream's pending bytes changes
            method should be called.
            </summary>
            <param name="delta">The amount to increment by.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.WritabilityMonitor.IsWritable(DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState)">
            <summary>
            Determine if the stream associated with <paramref name="state"/> is writable.
            </summary>
            <param name="state">The state which is associated with the stream to test writability for.</param>
            <returns><c>true</c> if <see cref="P:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.FlowState.Stream"/> is writable. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2RemoteFlowController.ListenerWritabilityMonitor">
            <summary>
            Writability of a <c>stream</c> is calculated using the following:
            <![CDATA[
            Connection Window - Total Queued Bytes > 0 &&
            Stream Window - Bytes Queued for Stream > 0 &&
            isChannelWritable()
            ]]>
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2ResetFrame">
            <summary>
            The default <see cref="T:DotNetty.Codecs.Http2.IHttp2ResetFrame"/> implementation.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DefaultHttp2ResetFrame.#ctor(DotNetty.Codecs.Http2.Http2Error)">
            <summary>
            Construct a reset message.
            </summary>
            <param name="error">the reason for reset</param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2SettingsAckFrame">
            <summary>
            The default <see cref="T:DotNetty.Codecs.Http2.IHttp2SettingsAckFrame"/> implementation.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2SettingsFrame">
            <summary>
            The default <see cref="T:DotNetty.Codecs.Http2.IHttp2SettingsFrame"/> implementation.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DefaultHttp2WindowUpdateFrame">
            <summary>
            The default <see cref="T:DotNetty.Codecs.Http2.IHttp2WindowUpdateFrame"/> implementation.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener">
            <summary>
            An HTTP2 frame listener that will decompress data frames according to the <c>content-encoding</c> header for each
            stream. The decompression provided by this class will be applied to the data for the entire stream.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.NewContentDecompressor(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Returns a new <see cref="T:DotNetty.Transport.Channels.Embedded.EmbeddedChannel"/> that decodes the HTTP2 message content encoded in the specified
            <paramref name="contentEncoding"/>.
            </summary>
            <param name="ctx">The context</param>
            <param name="contentEncoding">the value of the <c>content-encoding</c> header</param>
            <returns>a new <see cref="T:DotNetty.Codecs.ByteToMessageDecoder"/> if the specified encoding is supported. <c>null</c> otherwise
            (alternatively, you can throw a <see cref="T:DotNetty.Codecs.Http2.Http2Exception"/> to block unknown encoding).</returns>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">If the specified encoding is not not supported and warrants an exception.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.GetTargetContentEncoding(DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Returns the expected content encoding of the decoded content. This getMethod returns <c>"identity"</c> by
            default, which is the case for most decompressors.
            </summary>
            <param name="contentEncoding">the value of the <c>content-encoding</c> header</param>
            <returns>the expected content encoding of the new content.</returns>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">if the <paramref name="contentEncoding"/> is not supported and warrants an exception</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.InitDecompressor(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Boolean)">
            <summary>
            Checks if a new decompressor object is needed for the stream identified by <paramref name="streamId"/>.
            This method will modify the <c>content-encoding</c> header contained in <paramref name="headers"/>.
            </summary>
            <param name="ctx">The context</param>
            <param name="streamId">The identifier for the headers inside <paramref name="headers"/></param>
            <param name="headers">Object representing headers which have been read</param>
            <param name="endOfStream">Indicates if the stream has ended</param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">If the <c>content-encoding</c> is not supported</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.Cleanup(DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.Http2Decompressor)">
            <summary>
            Release remaining content from the <see cref="T:DotNetty.Transport.Channels.Embedded.EmbeddedChannel"/>.
            </summary>
            <param name="decompressor">The decompressor for <c>stream</c></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.NextReadableBuf(DotNetty.Transport.Channels.Embedded.EmbeddedChannel)">
            <summary>
            Read the next decompressed <see cref="T:DotNetty.Buffers.IByteBuffer"/> from the <see cref="T:DotNetty.Transport.Channels.Embedded.EmbeddedChannel"/>
            or <c>null</c> if one does not exist.
            </summary>
            <param name="decompressor">The channel to read from</param>
            <returns>The next decoded <see cref="T:DotNetty.Buffers.IByteBuffer"/> from the <see cref="T:DotNetty.Transport.Channels.Embedded.EmbeddedChannel"/> or <c>null</c> if one does not exist</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.ConsumedBytesConverter">
            <summary>
            A decorator around the local flow controller that converts consumed bytes from uncompressed to compressed.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.Http2Decompressor">
            <summary>
            Provides the state for stream <c>DATA</c> frame decompression.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.Http2Decompressor.Decompressor">
            <summary>
            Responsible for taking compressed bytes in and producing decompressed bytes.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.Http2Decompressor.IncrementCompressedBytes(System.Int32)">
            <summary>
            Increment the number of bytes received prior to doing any decompression.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.Http2Decompressor.IncrementDecompressedBytes(System.Int32)">
            <summary>
            Increment the number of bytes after the decompression process.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.Http2Decompressor.ConsumeBytes(System.Int32,System.Int32)">
            <summary>
            Determines the ratio between {@code numBytes} and <see cref="F:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.Http2Decompressor._decompressed"/>.
            This ratio is used to decrement <see cref="F:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.Http2Decompressor._decompressed"/> and
            <see cref="F:DotNetty.Codecs.Http2.DelegatingDecompressorFrameListener.Http2Decompressor._compressed"/>.
            </summary>
            <param name="streamId">the stream ID</param>
            <param name="decompressedBytes">The number of post-decompressed bytes to return to flow control</param>
            <returns>The number of pre-decompressed bytes that have been consumed.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDecoder.#ctor(System.Int64)">
            <summary>
            Create a new instance.
            </summary>
            <param name="maxHeaderListSize">maxHeaderListSize This is the only setting that can be configured before notifying the peer.
            This is because <a href="https://tools.ietf.org/html/rfc7540#section-6.5.1">SETTINGS_Http2CodecUtil.MAX_HEADER_LIST_SIZE</a>
            allows a lower than advertised limit from being enforced, and the default limit is unlimited
            (which is dangerous).</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDecoder.#ctor(System.Int64,System.Int32)">
            <summary>
            Exposed Used for testing only! Default values used in the initial settings frame are overridden intentionally
            for testing but violate the RFC if used outside the scope of testing.
            </summary>
            <param name="maxHeaderListSize"></param>
            <param name="maxHeaderTableSize"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDecoder.Decode(System.Int32,DotNetty.Buffers.IByteBuffer,DotNetty.Codecs.Http2.IHttp2Headers,System.Boolean)">
            <summary>
            Decode the header block into header fields.
            <para>This method assumes the entire header block is contained in <paramref name="input"/>.</para>
            </summary>
            <param name="streamId"></param>
            <param name="input"></param>
            <param name="headers"></param>
            <param name="validateHeaders"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDecoder.SetMaxHeaderTableSize(System.Int64)">
            <summary>
            Set the maximum table size. If this is below the maximum size of the dynamic table used by
            the encoder, the beginning of the next header block MUST signal this change.
            </summary>
            <param name="maxHeaderTableSize"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDecoder.GetMaxHeaderTableSize">
            <summary>
            Return the maximum table size. This is the maximum size allowed by both the encoder and the
            decoder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDecoder.Length">
            <summary>
            Return the number of header fields input the dynamic table. Exposed for testing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDecoder.Size">
            <summary>
            Return the size of the dynamic table. Exposed for testing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDecoder.GetHeaderField(System.Int32)">
            <summary>
            Return the header field at the given index. Exposed for testing.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDecoder.DecodeULE128(DotNetty.Buffers.IByteBuffer,System.Int32)">
            <summary>
            Unsigned Little Endian Base 128 Variable-Length Integer Encoding
            <para>Visible for testing only!</para>
            </summary>
            <param name="input"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDecoder.DecodeULE128(DotNetty.Buffers.IByteBuffer,System.Int64)">
            <summary>
            Unsigned Little Endian Base 128 Variable-Length Integer Encoding
            <para>Visible for testing only!</para>
            </summary>
            <param name="input"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.HeaderType">
            <summary>
            HTTP/2 header types.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDynamicTable.#ctor(System.Int64)">
            <summary>
            Creates a new dynamic table with the specified initial capacity.
            </summary>
            <param name="initialCapacity"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDynamicTable.Length">
            <summary>
            Return the number of header fields in the dynamic table.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDynamicTable.Size">
            <summary>
            Return the current size of the dynamic table. This is the sum of the size of the entries.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDynamicTable.Capacity">
            <summary>
            Return the maximum allowable size of the dynamic table.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDynamicTable.GetEntry(System.Int32)">
            <summary>
            Return the header field at the given index. The first and newest entry is always at index 1,
            and the oldest entry is at the index length().
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDynamicTable.Add(DotNetty.Codecs.Http2.HpackHeaderField)">
            <summary>
            Add the header field to the dynamic table. Entries are evicted from the dynamic table until
            the size of the table and the new header field is less than or equal to the table's capacity.
            If the size of the new entry is larger than the table's capacity, the dynamic table will be
            cleared.
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDynamicTable.Remove">
            <summary>
            Remove and return the oldest header field from the dynamic table.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDynamicTable.Clear">
            <summary>
            Remove all entries from the dynamic table.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackDynamicTable.SetCapacity(System.Int64)">
            <summary>
            Set the maximum size of the dynamic table. Entries are evicted from the dynamic table until
            the size of the table is less than or equal to the maximum size.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.HpackEncoder">
            <summary>
            An HPACK encoder.
            
            <para>Implementation note:  This class is security sensitive, and depends on users correctly identifying their headers
            as security sensitive or not.  If a header is considered not sensitive, methods names "insensitive" are used which
            are fast, but don't provide any security guarantees.</para>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.#ctor">
            <summary>
            Creates a new encoder.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.#ctor(System.Boolean)">
            <summary>
            Creates a new encoder.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new encoder.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.EncodeHeaders(System.Int32,DotNetty.Buffers.IByteBuffer,DotNetty.Codecs.Http2.IHttp2Headers,DotNetty.Codecs.Http2.ISensitivityDetector)">
            <summary>
            Encode the header field into the header block.
            The given <see cref="T:DotNetty.Common.Utilities.ICharSequence"/>s must be immutable!
            </summary>
            <param name="streamId"></param>
            <param name="output"></param>
            <param name="headers"></param>
            <param name="sensitivityDetector"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.EncodeHeader(DotNetty.Buffers.IByteBuffer,DotNetty.Common.Utilities.ICharSequence,DotNetty.Common.Utilities.ICharSequence,System.Boolean,System.Int64)">
            <summary>
            Encode the header field into the header block.
            The given <see cref="T:DotNetty.Common.Utilities.ICharSequence"/>s must be immutable!
            </summary>
            <param name="output"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="sensitive"></param>
            <param name="headerSize"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.SetMaxHeaderTableSize(DotNetty.Buffers.IByteBuffer,System.Int64)">
            <summary>
            Set the maximum table size.
            </summary>
            <param name="output"></param>
            <param name="maxHeaderTableSize"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.GetMaxHeaderTableSize">
            <summary>
            Return the maximum table size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.EncodeInteger(DotNetty.Buffers.IByteBuffer,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encode integer according to <a href="https://tools.ietf.org/html/rfc7541#section-5.1">Section 5.1</a>.
            </summary>
            <param name="output"></param>
            <param name="mask"></param>
            <param name="n"></param>
            <param name="idx"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.EncodeInteger(DotNetty.Buffers.IByteBuffer,System.Int32,System.Int32,System.Int64)">
            <summary>
            Encode integer according to <a href="https://tools.ietf.org/html/rfc7541#section-5.1">Section 5.1</a>.
            </summary>
            <param name="output"></param>
            <param name="mask"></param>
            <param name="n"></param>
            <param name="idx"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.EncodeStringLiteral(DotNetty.Buffers.IByteBuffer,DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Encode string literal according to Section 5.2.
            </summary>
            <param name="output"></param>
            <param name="str"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.EncodeLiteral(DotNetty.Buffers.IByteBuffer,DotNetty.Common.Utilities.ICharSequence,DotNetty.Common.Utilities.ICharSequence,DotNetty.Codecs.Http2.HpackUtil.IndexType,System.Int32)">
            <summary>
            Encode literal header field according to Section 6.2.
            </summary>
            <param name="output"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="indexType"></param>
            <param name="nameIndex"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.EnsureCapacity(System.Int64)">
            <summary>
            Ensure that the dynamic table has enough room to hold 'headerSize' more bytes. Removes the
            oldest entry from the dynamic table until sufficient space is available.
            </summary>
            <param name="headerSize"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.Length">
            <summary>
            Return the number of header fields in the dynamic table. Exposed for testing.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.Size">
            <summary>
            Return the size of the dynamic table. Exposed for testing.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.GetHeaderField(System.Int32)">
            <summary>
            Return the header field at the given index. Exposed for testing.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.GetEntryInsensitive(DotNetty.Common.Utilities.ICharSequence,DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Returns the header entry with the lowest index value for the header field. Returns null if
            header field is not in the dynamic table.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.GetIndex(DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Returns the lowest index value for the header field name in the dynamic table. Returns -1 if
            the header field name is not in the dynamic table.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.GetIndex(System.Int32)">
            <summary>
            Compute the index into the dynamic table given the index in the header entry.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.Add(DotNetty.Common.Utilities.ICharSequence,DotNetty.Common.Utilities.ICharSequence,System.Int64)">
            <summary>
            Add the header field to the dynamic table. Entries are evicted from the dynamic table until
            the size of the table and the new header field is less than the table's maxHeaderTableSize. If the size
            of the new entry is larger than the table's maxHeaderTableSize, the dynamic table will be cleared.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="headerSize"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.Remove">
            <summary>
            Remove and return the oldest header field from the dynamic table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.Clear">
            <summary>
            Remove all entries from the dynamic table.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.Index(System.Int32)">
            <summary>
            Returns the index into the hash table for the hash code h.
            </summary>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.HpackEncoder.HeaderEntry">
            <summary>
            A linked hash map HpackHeaderField entry.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.HeaderEntry.#ctor(System.Int32,DotNetty.Common.Utilities.ICharSequence,DotNetty.Common.Utilities.ICharSequence,System.Int32,DotNetty.Codecs.Http2.HpackEncoder.HeaderEntry)">
            <summary>
            Creates new entry.
            </summary>
            <param name="hash"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="next"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.HeaderEntry.Remove">
            <summary>
            Removes this entry from the linked list.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackEncoder.HeaderEntry.AddBefore(DotNetty.Codecs.Http2.HpackEncoder.HeaderEntry)">
            <summary>
            Inserts this entry before the specified existing entry in the list.
            </summary>
            <param name="existingEntry"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackHeaderField.#ctor(DotNetty.Common.Utilities.ICharSequence,DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            This constructor can only be used if name and value are ISO-8859-1 encoded.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackHuffmanDecoder.Decode(DotNetty.Buffers.IByteBuffer,System.Int32)">
            <summary>
            Decompresses the given Huffman coded string literal.
            </summary>
            <param name="buf">the string literal to be decoded</param>
            <param name="length"></param>
            <returns>the output stream for the compressed data</returns>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">EOS Decoded</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackHuffmanDecoder.Process(System.Byte)">
            <summary>
            This should never be called from anything but this class itself!
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackHuffmanEncoder.#ctor(System.Int32[],System.Byte[])">
            <summary>
            Creates a new Huffman encoder with the specified Huffman coding.
            </summary>
            <param name="codes">the Huffman codes indexed by symbol</param>
            <param name="lengths">the length of each Huffman code</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackHuffmanEncoder.Encode(DotNetty.Buffers.IByteBuffer,DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Compresses the input string literal using the Huffman coding.
            </summary>
            <param name="ouput">the output stream for the compressed data</param>
            <param name="data">the string literal to be Huffman encoded</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackHuffmanEncoder.GetEncodedLength(DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Returns the number of bytes required to Huffman encode the input string literal.
            </summary>
            <param name="data">the string literal to be Huffman encoded</param>
            <returns>the number of bytes required to Huffman encode <paramref name="data"/>.</returns>
        </member>
        <member name="F:DotNetty.Codecs.Http2.HpackStaticTable.Length">
            <summary>
            The number of header fields in the static table.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackStaticTable.GetEntry(System.Int32)">
            <summary>
            Return the header field at the given index value.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackStaticTable.GetIndex(DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Returns the lowest index value for the given header field name in the static table. Returns
            -1 if the header field name is not in the static table.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackStaticTable.GetIndexInsensitive(DotNetty.Common.Utilities.ICharSequence,DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Returns the index value for the given header field in the static table. Returns -1 if the
            header field is not in the static table.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackStaticTable.CreateMap">
            <summary>
            create a map CharSequenceMap header name to index value to allow quick lookup
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackUtil.EqualsConstantTime(DotNetty.Common.Utilities.ICharSequence,DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Compare two <see cref="T:DotNetty.Common.Utilities.ICharSequence"/> objects without leaking timing information.
            <para>The <see cref="T:System.Int32"/> return type is intentional and is designed to allow cascading of constant time operations:</para>
            <code>
                String s1 = "foo";
                String s2 = "foo";
                String s3 = "foo";
                String s4 = "goo";
                boolean equals = (EqualsConstantTime(s1, s2) &amp; EqualsConstantTime(s3, s4)) != 0;
            </code>
            </summary>
            <param name="s1">the first value.</param>
            <param name="s2">the second value.</param>
            <returns><c>0</c> if not equal. <c>1</c> if equal.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HpackUtil.EqualsVariableTime(DotNetty.Common.Utilities.ICharSequence,DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Compare two <see cref="T:DotNetty.Common.Utilities.ICharSequence"/>s.
            </summary>
            <param name="s1">the first value.</param>
            <param name="s2">the second value.</param>
            <returns><c>false</c> if not equal. <c>true</c> if equal.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2ChannelClosedException">
            <summary>
            Thrown if buffered streams are terminated due to this encoder being closed.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2ChannelDuplexHandler">
            <summary>
            A <see cref="T:DotNetty.Transport.Channels.ChannelDuplexHandler"/> providing additional functionality for HTTP/2. Specifically it allows to:
            
            <para>Create new outbound streams using <see cref="M:DotNetty.Codecs.Http2.Http2ChannelDuplexHandler.NewStream"/>.</para>
            <para>Iterate over all active streams using <see cref="M:DotNetty.Codecs.Http2.Http2ChannelDuplexHandler.ForEachActiveStream(DotNetty.Codecs.Http2.IHttp2FrameStreamVisitor)"/>.</para>
            
            <para>The <see cref="T:DotNetty.Codecs.Http2.Http2FrameCodec"/> is required to be part of the <see cref="T:DotNetty.Transport.Channels.IChannelPipeline"/> before this handler is added,
            or else an <see cref="T:System.InvalidOperationException"/> will be thrown.</para>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ChannelDuplexHandler.NewStream">
            <summary>
            Creates a new <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameStream"/> object.
            <para>This method is <c>thread-safe</c>.</para>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ChannelDuplexHandler.ForEachActiveStream(DotNetty.Codecs.Http2.IHttp2FrameStreamVisitor)">
            <summary>
            Allows to iterate over all currently active streams.
            <para>This method may only be called from the eventloop thread.</para>
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2ClientUpgradeCodec">
            <summary>
            Client-side cleartext upgrade codec from HTTP to HTTP/2.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ClientUpgradeCodec.#ctor(DotNetty.Codecs.Http2.Http2ConnectionHandler)">
            <summary>
            Creates the codec using a default name for the connection handler when adding to the pipeline.
            </summary>
            <param name="connectionHandler">the HTTP/2 connection handler</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ClientUpgradeCodec.#ctor(System.String,DotNetty.Codecs.Http2.Http2ConnectionHandler)">
            <summary>
            Creates the codec providing an upgrade to the given handler for HTTP/2.
            </summary>
            <param name="handlerName">the name of the HTTP/2 connection handler to be used in the pipeline,
            or <c>null</c> to auto-generate the name</param>
            <param name="connectionHandler">the HTTP/2 connection handler</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ClientUpgradeCodec.#ctor(System.String,DotNetty.Codecs.Http2.Http2ConnectionHandler,DotNetty.Codecs.Http2.Http2MultiplexHandler)">
            <summary>
            Creates the codec providing an upgrade to the given handler for HTTP/2.
            </summary>
            <param name="handlerName">the name of the HTTP/2 connection handler to be used in the pipeline,
            or <c>null</c> to auto-generate the name</param>
            <param name="connectionHandler">the HTTP/2 connection handler</param>
            <param name="http2MultiplexHandler"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ClientUpgradeCodec.GetSettingsHeaderValue(DotNetty.Transport.Channels.IChannelHandlerContext)">
            <summary>
            Converts the current settings for the handler to the Base64-encoded representation used in
            the HTTP2-Settings upgrade header.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2CodecUtil">
            <summary>
            Constants and utility method used for encoding/decoding HTTP2 frames.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.Http2CodecUtil.MaxPadding">
            <summary>
            The maximum number of padding bytes. That is the 255 padding bytes appended to the end of a frame and the 1 byte
            pad length field.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.Http2CodecUtil.DefaultHeaderListSize">
            <summary>
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">The initial value of this setting is unlimited</a>.
            However in practice we don't want to allow our peers to use unlimited memory by default. So we take advantage
            of the <c>For any given request, a lower limit than what is advertised MAY be enforced.</c> loophole.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.Http2CodecUtil.SmallestMaxConcurrentStreams">
            <summary>
            The assumed minimum value for {@code SETTINGS_MAX_CONCURRENT_STREAMS} as
            recommended by the <a herf="https://tools.ietf.org/html/rfc7540#section-6.5.2">HTTP/2 spec</a>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2CodecUtil.CalculateMaxHeaderListSizeGoAway(System.Int64)">
            <summary>
            Calculate the threshold in bytes which should trigger a <c>GO_AWAY</c> if a set of headers exceeds this amount.
            </summary>
            <param name="maxHeaderListSize"><a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>
            for the local endpoint.</param>
            <returns>the threshold in bytes which should trigger a <c>GO_AWAY</c> if a set of headers exceeds this amount.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2CodecUtil.IsOutboundStream(System.Boolean,System.Int32)">
            <summary>
            Returns <c>true</c> if the stream is an outbound stream.
            </summary>
            <param name="server"><c>true</c> if the endpoint is a server, <c>false</c> otherwise.</param>
            <param name="streamId">the stream identifier</param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2CodecUtil.IsStreamIdValid(System.Int32)">
            <summary>
            Returns true if the <paramref name="streamId"/> is a valid HTTP/2 stream identifier.
            </summary>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2CodecUtil.IsMaxFrameSizeValid(System.Int64)">
            <summary>
            Indicates whether or not the given value for max frame size falls within the valid range.
            </summary>
            <param name="maxFrameSize"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2CodecUtil.ConnectionPrefaceBuf">
            <summary>
            Returns a buffer containing the <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.ConnectionPreface"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2CodecUtil.GetEmbeddedHttp2Exception(System.Exception)">
            <summary>
            Iteratively looks through the causality chain for the given exception and returns the first
            <see cref="T:DotNetty.Codecs.Http2.Http2Exception"/> or <c>null</c> if none.
            </summary>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2CodecUtil.ToByteBuf(DotNetty.Transport.Channels.IChannelHandlerContext,System.Exception)">
            <summary>
            Creates a buffer containing the error message from the given exception. If the cause is
            <c>null</c> returns an empty buffer.
            </summary>
            <param name="ctx"></param>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2CodecUtil.ReadUnsignedInt(DotNetty.Buffers.IByteBuffer)">
            <summary>
            Reads a big-endian (31-bit) integer from the buffer.
            </summary>
            <param name="buf"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2CodecUtil.WriteFrameHeader(DotNetty.Buffers.IByteBuffer,System.Int32,DotNetty.Codecs.Http2.Http2FrameTypes,DotNetty.Codecs.Http2.Http2Flags,System.Int32)">
            <summary>
            Writes an HTTP/2 frame header to the output buffer.
            </summary>
            <param name="output"></param>
            <param name="payloadLength"></param>
            <param name="type"></param>
            <param name="flags"></param>
            <param name="streamId"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2CodecUtil.StreamableBytes(DotNetty.Codecs.Http2.IStreamByteDistributorStreamState)">
            <summary>
            Calculate the amount of bytes that can be sent by <paramref name="state"/>. The lower bound is <c>0</c>.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2CodecUtil.UnreleasableBuffer(DotNetty.Buffers.IByteBuffer)">
            <summary>
            Return a unreleasable view on the given <see cref="T:DotNetty.Buffers.IByteBuffer"/> which will just ignore release and retain calls.
            </summary>
            <param name="buf"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2CodecUtil.DirectBuffer(System.Int32)">
            <summary>
            Creates a new big-endian direct buffer with the specified <see cref="P:DotNetty.Buffers.IByteBuffer.Capacity"/>, which
            expands its capacity boundlessly on demand. The new buffer's <see cref="P:DotNetty.Buffers.IByteBuffer.ReaderIndex"/> and
            <see cref="P:DotNetty.Buffers.IByteBuffer.WriterIndex"/> are <c>0</c>.
            </summary>
            <param name="initialCapacity"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2CodecUtil.HeaderListSizeExceeded(System.Int32,System.Int64,System.Boolean)">
            <summary>
            Results in a RST_STREAM being sent for <paramref name="streamId"/> due to violating
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>.
            </summary>
            <param name="streamId">The stream ID that was being processed when the exceptional condition occurred.</param>
            <param name="maxHeaderListSize">The max allowed size for a list of headers in bytes which was exceeded.</param>
            <param name="onDecode"><c>true</c> if the exception was encountered during decoder. <c>false</c> for encode.</param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">a stream error.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2CodecUtil.HeaderListSizeExceeded(System.Int64)">
            <summary>
            Results in a GO_AWAY being sent due to violating
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a> in an unrecoverable
            manner.
            </summary>
            <param name="maxHeaderListSize">The max allowed size for a list of headers in bytes which was exceeded.</param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">a connection error.</exception>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2ConnectionAdapter">
            <summary>
            Provides empty implementations of all <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionListener"/> methods.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2ConnectionHandler">
            <summary>
            Provides the default implementation for processing inbound frame events and delegates to a
            <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameListener"/>
            <para>
            This class will read HTTP/2 frames and delegate the events to a <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameListener"/>
            </para>
            This interface enforces inbound flow control functionality through
            <see cref="T:DotNetty.Codecs.Http2.IHttp2LocalFlowController"/>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.OnHttpClientUpgrade">
            <summary>
            Handles the client-side (cleartext) upgrade from HTTP to HTTP/2.
            Reserves local stream 1 for the HTTP/2 response.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.OnHttpServerUpgrade(DotNetty.Codecs.Http2.Http2Settings)">
            <summary>
            Handles the server-side (cleartext) upgrade from HTTP to HTTP/2.
            </summary>
            <param name="settings">the settings for the remote endpoint.</param>
        </member>
        <member name="P:DotNetty.Codecs.Http2.Http2ConnectionHandler.BaseDecoder.PrefaceSent">
            <summary>
            Determine if the HTTP/2 connection preface been sent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.PrefaceDecoder.Cleanup">
            <summary>
            Releases the <see cref="F:DotNetty.Codecs.Http2.Http2ConnectionHandler.PrefaceDecoder._clientPrefaceString"/>. Any active streams will be left in the open.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.PrefaceDecoder.ReadClientPrefaceString(DotNetty.Buffers.IByteBuffer)">
            <summary>
            Decodes the client connection preface string from the input buffer.
            </summary>
            <param name="input"></param>
            <returns><c>true</c> if processing of the client preface string is complete. Since client preface strings can
            only be received by servers, returns true immediately for client endpoints.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.PrefaceDecoder.VerifyFirstFrameIsSettings(DotNetty.Buffers.IByteBuffer)">
            <summary>
            Peeks at that the next frame in the buffer and verifies that it is a non-ack <c>SETTINGS</c> frame.
            </summary>
            <param name="input">the inbound buffer.</param>
            <returns><c>true</c> if the next frame is a non-ack <c>SETTINGS</c> frame, <c>false</c> if more
            data is required before we can determine the next frame type.</returns>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">thrown if the next frame is NOT a non-ack <c>SETTINGS</c> frame.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.PrefaceDecoder.SendPreface(DotNetty.Transport.Channels.IChannelHandlerContext)">
            <summary>
            Sends the HTTP/2 connection preface upon establishment of the connection, if not already sent.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.ExceptionCaught(DotNetty.Transport.Channels.IChannelHandlerContext,System.Exception)">
            <summary>
            Handles <see cref="T:DotNetty.Codecs.Http2.Http2Exception"/> objects that were thrown from other handlers. Ignores all other exceptions.
            </summary>
            <param name="ctx"></param>
            <param name="cause"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.CloseStreamLocal(DotNetty.Codecs.Http2.IHttp2Stream,System.Threading.Tasks.Task)">
            <summary>
            Closes the local side of the given stream. If this causes the stream to be closed, adds a
            hook to close the channel after the given future completes.
            </summary>
            <param name="stream">the stream to be half closed.</param>
            <param name="future">If closing, the future after which to close the channel.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.OnError(DotNetty.Transport.Channels.IChannelHandlerContext,System.Boolean,System.Exception)">
            <summary>
            Central handler for all exceptions caught during HTTP/2 processing.
            </summary>
            <param name="ctx"></param>
            <param name="outbound"></param>
            <param name="cause"></param>
        </member>
        <member name="P:DotNetty.Codecs.Http2.Http2ConnectionHandler.IsGracefulShutdownComplete">
            <summary>
            Called by the graceful shutdown logic to determine when it is safe to close the connection. Returns <c>true</c>
            if the graceful shutdown has completed and the connection can be safely closed. This implementation just
            guarantees that there are no active streams. Subclasses may override to provide additional checks.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.OnConnectionError(DotNetty.Transport.Channels.IChannelHandlerContext,System.Boolean,System.Exception,DotNetty.Codecs.Http2.Http2Exception)">
            <summary>
            Handler for a connection error. Sends a <c>GO_AWAY</c> frame to the remote endpoint. Once all
            streams are closed, the connection is shut down.
            </summary>
            <param name="ctx">the channel context</param>
            <param name="outbound"><c>true</c> if the error was caused by an outbound operation.</param>
            <param name="cause">the exception that was caught</param>
            <param name="http2Ex">the <see cref="T:DotNetty.Codecs.Http2.Http2Exception"/> that is embedded in the causality chain. This may
            be <c>null</c> if it's an unknown exception.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.OnStreamError(DotNetty.Transport.Channels.IChannelHandlerContext,System.Boolean,System.Exception,DotNetty.Codecs.Http2.StreamException)">
            <summary>
            Handler for a stream error. Sends a <c>RST_STREAM</c> frame to the remote endpoint and closes the stream.
            </summary>
            <param name="ctx">the channel context</param>
            <param name="outbound"><c>true</c> if the error was caused by an outbound operation.</param>
            <param name="cause">the exception that was caught</param>
            <param name="http2Ex">the <see cref="T:DotNetty.Codecs.Http2.StreamException"/> that is embedded in the causality chain.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.HandleServerHeaderDecodeSizeError(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Notifies client that this server has received headers that are larger than what it is
            willing to accept. Override to change behavior.
            </summary>
            <param name="ctx">the channel context</param>
            <param name="stream">the Http2Stream on which the header was received</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.ResetUnknownStreamAsync(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.Http2Error,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Sends a <c>RST_STREAM</c> frame even if we don't know about the stream. This error condition is most likely
            triggered by the first frame of a stream being invalid. That is, there was an error reading the frame before
            we could create a new stream.
            </summary>
            <param name="ctx"></param>
            <param name="streamId"></param>
            <param name="errorCode"></param>
            <param name="promise"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.CheckCloseConnection(System.Threading.Tasks.Task)">
            <summary>
            Closes the connection if the graceful shutdown process has completed.
            </summary>
            <param name="future">Represents the status that will be passed to the <see cref="T:DotNetty.Codecs.Http2.Http2ConnectionHandler.ClosingChannelFutureListener"/>.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ConnectionHandler.ClientPrefaceString(DotNetty.Codecs.Http2.IHttp2Connection)">
            <summary>
            Returns the client preface string if this is a client connection, otherwise returns <c>null</c>.
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2ConnectionHandlerBuilder">
            <summary>
            Builder which builds <see cref="T:DotNetty.Codecs.Http2.Http2ConnectionHandler"/> objects.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2ConnectionPrefaceAndSettingsFrameWrittenEvent">
            <summary>
            Signifies that the <a href="https://tools.ietf.org/html/rfc7540#section-3.5">connection preface</a> and
            the initial SETTINGS frame have been sent. The client sends the preface, and the server receives the preface.
            The client shouldn't write any data until this event has been processed.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2ControlFrameLimitEncoder">
            <summary>
            <see cref="T:DotNetty.Codecs.Http2.DecoratingHttp2ConnectionEncoder"/> which guards against a remote peer that will trigger a massive amount
            of control frames but will not consume our responses to these.
            This encoder will tear-down the connection once we reached the configured limit to reduce the risk of DDOS.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2EmptyDataFrameConnectionDecoder">
            <summary>
            Enforce a limit on the maximum number of consecutive empty DATA frames (without end_of_stream flag) that are allowed
            before the connection will be closed.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2EmptyDataFrameListener">
            <summary>
            Enforce a limit on the maximum number of consecutive empty DATA frames (without end_of_stream flag) that are allowed
            before the connection will be closed.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2Error">
            <summary>
            All error codes identified by the HTTP/2 spec.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2EventAdapter">
            <summary>
            This class brings <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionListener"/> and <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameListener"/> together to provide
            NOOP implementation so inheriting classes can selectively choose which methods to override.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2Exception">
            <summary>
            Exception thrown when an HTTP/2 error was encountered.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Exception.ConnectionError(DotNetty.Codecs.Http2.Http2Error,System.String,System.Object[])">
            <summary>
            Use if an error has occurred which can not be isolated to a single stream, but instead applies
            to the entire connection.
            </summary>
            <param name="error">The type of error as defined by the HTTP/2 specification.</param>
            <param name="fmt">string with the content and format for the additional debug data.</param>
            <param name="args">Objects which fit into the format defined by <paramref name="fmt"/>.</param>
            <returns>An exception which can be translated into an HTTP/2 error.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Exception.ConnectionError(DotNetty.Codecs.Http2.Http2Error,System.Exception,System.String,System.Object[])">
            <summary>
            Use if an error has occurred which can not be isolated to a single stream, but instead applies
            to the entire connection.
            </summary>
            <param name="error">The type of error as defined by the HTTP/2 specification.</param>
            <param name="cause">The object which caused the error.</param>
            <param name="fmt">string with the content and format for the additional debug data.</param>
            <param name="args">Objects which fit into the format defined by <paramref name="fmt"/>.</param>
            <returns>An exception which can be translated into an HTTP/2 error.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Exception.ClosedStreamError(DotNetty.Codecs.Http2.Http2Error,System.String,System.Object[])">
            <summary>
            Use if an error has occurred which can not be isolated to a single stream, but instead applies
            to the entire connection.
            </summary>
            <param name="error">The type of error as defined by the HTTP/2 specification.</param>
            <param name="fmt">string with the content and format for the additional debug data.</param>
            <param name="args">Objects which fit into the format defined by <paramref name="fmt"/>.</param>
            <returns>An exception which can be translated into an HTTP/2 error.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Exception.StreamError(System.Int32,DotNetty.Codecs.Http2.Http2Error,System.String,System.Object[])">
            <summary>
            Use if an error which can be isolated to a single stream has occurred. If the <paramref name="id"/> is not
            <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.ConnectionStreamId"/> then a <see cref="T:DotNetty.Codecs.Http2.StreamException"/> will be returned.
            Otherwise the error is considered a connection error and a <see cref="T:DotNetty.Codecs.Http2.Http2Exception"/> is returned.
            </summary>
            <param name="id">The stream id for which the error is isolated to.</param>
            <param name="error">The type of error as defined by the HTTP/2 specification.</param>
            <param name="fmt">string with the content and format for the additional debug data.</param>
            <param name="args">Objects which fit into the format defined by <paramref name="fmt"/>.</param>
            <returns>If the <paramref name="id"/> is not
            <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.ConnectionStreamId"/> then a <see cref="T:DotNetty.Codecs.Http2.StreamException"/> will be returned.
            Otherwise the error is considered a connection error and a <see cref="T:DotNetty.Codecs.Http2.Http2Exception"/> is returned.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Exception.StreamError(System.Int32,DotNetty.Codecs.Http2.Http2Error,System.Exception,System.String,System.Object[])">
            <summary>
            Use if an error which can be isolated to a single stream has occurred.  If the <paramref name="id"/> is not
            <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.ConnectionStreamId"/> then a <see cref="T:DotNetty.Codecs.Http2.StreamException"/> will be returned.
            Otherwise the error is considered a connection error and a <see cref="T:DotNetty.Codecs.Http2.Http2Exception"/> is returned.
            </summary>
            <param name="id">The stream id for which the error is isolated to.</param>
            <param name="error">The type of error as defined by the HTTP/2 specification.</param>
            <param name="cause">The object which caused the error.</param>
            <param name="fmt">string with the content and format for the additional debug data.</param>
            <param name="args">Objects which fit into the format defined by <paramref name="fmt"/>.</param>
            <returns>If the <paramref name="id"/> is not
            <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.ConnectionStreamId"/> then a <see cref="T:DotNetty.Codecs.Http2.StreamException"/> will be returned.
            Otherwise the error is considered a connection error and a <see cref="T:DotNetty.Codecs.Http2.Http2Exception"/> is returned.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Exception.HeaderListSizeError(System.Int32,DotNetty.Codecs.Http2.Http2Error,System.Boolean,System.String,System.Object[])">
            <summary>
            A specific stream error resulting from failing to decode headers that exceeds the max header size list.
            If the <paramref name="id"/> is not <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.ConnectionStreamId"/> then a
            <see cref="T:DotNetty.Codecs.Http2.StreamException"/> will be returned. Otherwise the error is considered a
            connection error and a <see cref="T:DotNetty.Codecs.Http2.Http2Exception"/> is returned.
            </summary>
            <param name="id">The stream id for which the error is isolated to.</param>
            <param name="error">The type of error as defined by the HTTP/2 specification.</param>
            <param name="onDecode">Whether this error was caught while decoding headers</param>
            <param name="fmt">string with the content and format for the additional debug data.</param>
            <param name="args">Objects which fit into the format defined by <paramref name="fmt"/>.</param>
            <returns>If the <paramref name="id"/> is not
            <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.ConnectionStreamId"/> then a <see cref="T:DotNetty.Codecs.Http2.HeaderListSizeException"/>
            will be returned. Otherwise the error is considered a connection error and a <see cref="T:DotNetty.Codecs.Http2.Http2Exception"/> is
            returned.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Exception.IsStreamError(DotNetty.Codecs.Http2.Http2Exception)">
            <summary>
            Check if an exception is isolated to a single stream or the entire connection.
            </summary>
            <param name="e">The exception to check.</param>
            <returns><c>true</c> if <paramref name="e"/> is an instance of <see cref="T:DotNetty.Codecs.Http2.StreamException"/>.
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Exception.GetStreamId(DotNetty.Codecs.Http2.Http2Exception)">
            <summary>
            Get the stream id associated with an exception.
            </summary>
            <param name="e">The exception to get the stream id for.</param>
            <returns><see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.ConnectionStreamId"/> if <paramref name="e"/> is a connection error.
            Otherwise the stream id associated with the stream error.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.ClosedStreamCreationException">
            <summary>
            Used when a stream creation attempt fails but may be because the stream was previously closed.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.StreamException">
            <summary>
            Represents an exception that can be isolated to a single stream (as opposed to the entire connection).
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.CompositeStreamException">
            <summary>
            Provides the ability to handle multiple stream exceptions with one throw statement.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2Flags">
            <summary>
            Provides utility methods for accessing specific flags as defined by the HTTP/2 spec.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.Http2Flags.Value">
            <summary>
            Gets the underlying flags value.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Flags.EndOfStream">
            <summary>
            Determines whether the <see cref="F:DotNetty.Codecs.Http2.Http2Flags.EndStream"/> flag is set. Only applies to DATA and HEADERS
            frames.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Flags.EndOfHeaders">
            <summary>
            Determines whether the <see cref="F:DotNetty.Codecs.Http2.Http2Flags.EndHeaders"/> flag is set. Only applies for HEADERS,
            PUSH_PROMISE, and CONTINUATION frames.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Flags.PriorityPresent">
            <summary>
            Determines whether the flag is set indicating the presence of the exclusive, stream
            dependency, and weight fields in a HEADERS frame.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Flags.Ack">
            <summary>
            Determines whether the flag is set indicating that this frame is an ACK. Only applies for
            SETTINGS and PING frames.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Flags.PaddingPresent">
            <summary>
            For frames that include padding, indicates if the <see cref="F:DotNetty.Codecs.Http2.Http2Flags.Padded"/> field is present. Only
            applies to DATA, HEADERS, PUSH_PROMISE and CONTINUATION frames.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Flags.GetNumPriorityBytes">
            <summary>
            Gets the number of bytes expected for the priority fields of the payload. This is determined
            by the <see cref="M:DotNetty.Codecs.Http2.Http2Flags.PriorityPresent"/> flag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Flags.GetPaddingPresenceFieldLength">
            <summary>
            Gets the length in bytes of the padding presence field expected in the payload. This is
            determined by the <see cref="M:DotNetty.Codecs.Http2.Http2Flags.PaddingPresent"/> flag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Flags.EndOfStream(System.Boolean)">
            <summary>
            Sets the <see cref="F:DotNetty.Codecs.Http2.Http2Flags.EndStream"/> flag.
            </summary>
            <param name="endOfStream"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Flags.EndOfHeaders(System.Boolean)">
            <summary>
            Sets the <see cref="F:DotNetty.Codecs.Http2.Http2Flags.EndHeaders"/> flag.
            </summary>
            <param name="endOfHeaders"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Flags.PriorityPresent(System.Boolean)">
            <summary>
            Sets the <see cref="F:DotNetty.Codecs.Http2.Http2Flags.Priority"/> flag.
            </summary>
            <param name="priorityPresent"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Flags.PaddingPresent(System.Boolean)">
            <summary>
            Sets the <see cref="F:DotNetty.Codecs.Http2.Http2Flags.Padded"/> flag.
            </summary>
            <param name="paddingPresent"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Flags.Ack(System.Boolean)">
            <summary>
            Sets the <see cref="F:DotNetty.Codecs.Http2.Http2Flags.ACK"/> flag.
            </summary>
            <param name="ack"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Flags.SetFlag(System.Boolean,System.Int32)">
            <summary>
            Generic method to set any flag.
            </summary>
            <param name="on">if the flag should be enabled or disabled.</param>
            <param name="mask">the mask that identifies the bit for the flag.</param>
            <returns>this instance.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Flags.IsFlagSet(System.Int32)">
            <summary>
            Indicates whether or not a particular flag is set.
            </summary>
            <param name="mask">the mask identifying the bit for the particular flag being tested</param>
            <returns><c>true</c> if the flag is set</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2FrameAdapter">
            <summary>
            Convenience class that provides no-op implementations for all methods of <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameListener"/>.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2FrameCodec">
             <summary>
             <c>This API is very immature.</c> The Http2Connection-based API is currently preferred over this API.
             This API is targeted to eventually replace or reduce the need for the <see cref="T:DotNetty.Codecs.Http2.Http2ConnectionHandler"/> API.
            
             <para>An HTTP/2 handler that maps HTTP/2 frames to <see cref="T:DotNetty.Codecs.Http2.IHttp2Frame"/> objects and vice versa. For every incoming HTTP/2
             frame, an <see cref="T:DotNetty.Codecs.Http2.IHttp2Frame"/> object is created and propagated via <see cref="M:DotNetty.Transport.Channels.IChannelHandler.ChannelRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Object)"/>. Outbound <see cref="T:DotNetty.Codecs.Http2.IHttp2Frame"/>
             objects received via <see cref="M:DotNetty.Codecs.Http2.Http2FrameCodec.Write(DotNetty.Transport.Channels.IChannelHandlerContext,System.Object,DotNetty.Common.Concurrency.IPromise)"/> are converted to the HTTP/2 wire format. HTTP/2 frames specific to a stream
             implement the <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamFrame"/> interface. The <see cref="T:DotNetty.Codecs.Http2.Http2FrameCodec"/> is instantiated using the
             <see cref="T:DotNetty.Codecs.Http2.Http2FrameCodecBuilder"/>. It's recommended for channel handlers to inherit from the
             <see cref="T:DotNetty.Codecs.Http2.Http2ChannelDuplexHandler"/>, as it provides additional functionality like iterating over all active streams or
             creating outbound streams.</para>
            
             <para><c>Stream Lifecycle</c></para>
            
             The frame codec delivers and writes frames for active streams. An active stream is closed when either side sends a
             <c>RST_STREAM</c> frame or both sides send a frame with the <c>END_STREAM</c> flag set. Each
             <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamFrame"/> has a <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameStream"/> object attached that uniquely identifies a particular stream.
            
             <para><see cref="T:DotNetty.Codecs.Http2.IHttp2StreamFrame"/>s read from the channel always a <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameStream"/> object set, while when writing a
             <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamFrame"/> the application code needs to set a <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameStream"/> object using
             <see cref="P:DotNetty.Codecs.Http2.IHttp2StreamFrame.Stream"/>.</para>
            
             <para><c>Flow control</c></para>
            
             The frame codec automatically increments stream and connection flow control windows.
            
             <para>Incoming flow controlled frames need to be consumed by writing a <see cref="T:DotNetty.Codecs.Http2.IHttp2WindowUpdateFrame"/> with the consumed
             number of bytes and the corresponding stream identifier set to the frame codec.</para>
            
             <para>The local stream-level flow control window can be changed by writing a <see cref="T:DotNetty.Codecs.Http2.IHttp2SettingsFrame"/> with the
             <see cref="M:DotNetty.Codecs.Http2.Http2Settings.InitialWindowSize"/> set to the targeted value.</para>
            
             <para>The connection-level flow control window can be changed by writing a <see cref="T:DotNetty.Codecs.Http2.IHttp2WindowUpdateFrame"/> with the
             desired window size <c>increment</c> in bytes and the stream identifier set to <c>0</c>. By default the initial
             connection-level flow control window is the same as initial stream-level flow control window.</para>
            
             <para><c>New inbound Streams</c></para>
            
             The first frame of an HTTP/2 stream must be a <see cref="T:DotNetty.Codecs.Http2.IHttp2HeadersFrame"/>, which will have a <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameStream"/>
             object attached.
            
             <para><c>New outbound Streams</c></para>
            
             A outbound HTTP/2 stream can be created by first instantiating a new <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameStream"/> object via
             <see cref="M:DotNetty.Codecs.Http2.Http2ChannelDuplexHandler.NewStream"/>, and then writing a <see cref="T:DotNetty.Codecs.Http2.IHttp2HeadersFrame"/> object with the stream
             attached.
            
             <code>
                 final Http2Stream2 stream = handler.newStream();
                 ctx.write(headersFrame.stream(stream)).addListener(new ChannelFutureListener() {
            
                     @Override
                     public void operationComplete(ChannelFuture f) {
                         if (f.isSuccess()) {
                             // Stream is active and stream.id() returns a valid stream identifier.
                             System.out.println("New stream with id " + stream.id() + " created.");
                         } else {
                             // Stream failed to become active. Handle error.
                             if (f.cause() instanceof Http2NoMoreStreamIdsException) {
            
                             } else if (f.cause() instanceof Http2GoAwayException) {
            
                             } else {
            
                             }
                         }
                     }
                 }
             </code>
            
             <para>If a new stream cannot be created due to stream id exhaustion of the endpoint, the <see cref="T:DotNetty.Common.Concurrency.IPromise"/> of the
             HEADERS frame will fail with a <see cref="T:DotNetty.Codecs.Http2.Http2NoMoreStreamIdsException"/>.</para>
            
             <para>The HTTP/2 standard allows for an endpoint to limit the maximum number of concurrently active streams via the
             <c>SETTINGS_MAX_CONCURRENT_STREAMS</c> setting. When this limit is reached, no new streams can be created. However,
             the <see cref="T:DotNetty.Codecs.Http2.Http2FrameCodec"/> can be build with
             <see cref="P:DotNetty.Codecs.Http2.AbstractHttp2ConnectionHandlerBuilder`2.EncoderEnforceMaxConcurrentStreams"/> enabled, in which case a new stream and
             its associated frames will be buffered until either the limit is increased or an active stream is closed. It's,
             however, possible that a buffered stream will never become active. That is, the channel might
             get closed or a GO_AWAY frame might be received. In the first case, all writes of buffered streams will fail with a
             <see cref="T:DotNetty.Codecs.Http2.Http2ChannelClosedException"/>. In the second case, all writes of buffered streams with an identifier less than
             the last stream identifier of the GO_AWAY frame will fail with a <see cref="T:DotNetty.Codecs.Http2.Http2GoAwayException"/>.</para>
            
             <para><c>Error Handling</c></para>
            
             Exceptions and errors are propagated via <see cref="M:DotNetty.Transport.Channels.IChannelHandler.ExceptionCaught(DotNetty.Transport.Channels.IChannelHandlerContext,System.Exception)"/>. Exceptions that apply to
             a specific HTTP/2 stream are wrapped in a <see cref="T:DotNetty.Codecs.Http2.Http2FrameStreamException"/> and have the corresponding
             <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameStream"/> object attached.
            
             <para><c>Reference Counting</c></para>
            
             Some <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamFrame"/>s implement the <see cref="T:DotNetty.Common.IReferenceCounted"/> interface, as they carry
             reference counted objects (e.g. <see cref="T:DotNetty.Buffers.IByteBuffer"/>s). The frame codec will call <see cref="M:DotNetty.Common.IReferenceCounted.Retain"/> before
             propagating a reference counted object through the pipeline, and thus an application handler needs to release such
             an object after having consumed it. For more information on reference counting take a look at
             http://netty.io/wiki/reference-counted-objects.html
            
             <para><c>HTTP Upgrade</c></para>
            
             Server-side HTTP to HTTP/2 upgrade is supported in conjunction with <see cref="T:DotNetty.Codecs.Http2.Http2ServerUpgradeCodec"/>; the necessary
             HTTP-to-HTTP/2 conversion is performed automatically.
             </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.Http2FrameCodec.v_numBufferedStreams">
            <summary>
            Number of buffered streams if the <see cref="T:DotNetty.Codecs.Http2.StreamBufferingEncoder"/> is used.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2FrameCodec.NewStream">
            <summary>
            Creates a new outbound/local stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2FrameCodec.ForEachActiveStream(DotNetty.Codecs.Http2.IHttp2FrameStreamVisitor)">
            <summary>
            Iterates over all active HTTP/2 streams.
            <para>This method must not be called outside of the event loop.</para>
            </summary>
            <param name="streamVisitor"></param>
        </member>
        <member name="P:DotNetty.Codecs.Http2.Http2FrameCodec.NumInitializingStreams">
            <summary>
            Retrieve the number of streams currently in the process of being initialized.
            </summary>
            <remarks>This is package-private for testing only.</remarks>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2FrameCodec.UserEventTriggered(DotNetty.Transport.Channels.IChannelHandlerContext,System.Object)">
            <summary>
            Handles the cleartext HTTP upgrade event. If an upgrade occurred, sends a simple response via
            HTTP/2 on stream 1 (the stream specifically reserved for cleartext HTTP upgrade).
            </summary>
            <param name="ctx"></param>
            <param name="evt"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2FrameCodec.Write(DotNetty.Transport.Channels.IChannelHandlerContext,System.Object,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Processes all <see cref="T:DotNetty.Codecs.Http2.IHttp2Frame"/>s. <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamFrame"/>s may only originate in child streams.
            </summary>
            <param name="ctx"></param>
            <param name="msg"></param>
            <param name="promise"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2FrameCodec.OnStreamError(DotNetty.Transport.Channels.IChannelHandlerContext,System.Boolean,System.Exception,DotNetty.Codecs.Http2.StreamException)">
            <summary>
            Exceptions for unknown streams, that is streams that have no <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameStream"/> object attached
            are simply logged and replied to by sending a RST_STREAM frame.
            </summary>
            <param name="ctx"></param>
            <param name="outbound"></param>
            <param name="cause"></param>
            <param name="streamException"></param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2FrameCodecBuilder">
            <summary>
            Builder for the <see cref="T:DotNetty.Codecs.Http2.Http2FrameCodec"/>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2FrameCodecBuilder.ForClient">
            <summary>
            Creates a builder for an HTTP/2 client.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2FrameCodecBuilder.ForServer">
            <summary>
            Creates a builder for an HTTP/2 server.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2FrameCodecBuilder.Build">
            <summary>
            Build a <see cref="T:DotNetty.Codecs.Http2.Http2FrameCodec"/> object.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2FrameListenerDecorator">
            <summary>
            Provides a decorator around a <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameListener"/> and delegates all method calls
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2FrameLogger">
            <summary>
            Logs HTTP2 frames for debugging purposes.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2FrameMsLogger">
            <summary>
            Logs HTTP2 frames for debugging purposes.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2FrameStreamException">
            <summary>
            An HTTP/2 exception for a specific <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameStream"/>.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2FrameTypes">
            <summary>
            Registry of all standard frame types defined by the HTTP/2 specification.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2GoAwayException">
            <summary>
            Thrown by <see cref="T:DotNetty.Codecs.Http2.StreamBufferingEncoder"/> if buffered streams are terminated due to
            receipt of a <c>GOAWAY</c>.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2InboundFrameLogger">
            <summary>
            Decorator around a <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameReader"/> that logs all inbound frames before calling back the listener.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2MultiplexCodec">
             <summary>
             An HTTP/2 handler that creates child channels for each stream.
            
             <para>When a new stream is created, a new <see cref="T:DotNetty.Transport.Channels.IChannel"/> is created for it. Applications send and
             receive <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamFrame"/>s on the created channel. <see cref="T:DotNetty.Buffers.IByteBuffer"/>s cannot be processed by the channel;
             all writes that reach the head of the pipeline must be an instance of <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamFrame"/>. Writes that reach
             the head of the pipeline are processed directly by this handler and cannot be intercepted.</para>
            
             <para>The child channel will be notified of user events that impact the stream, such as <see
             cref="T:DotNetty.Codecs.Http2.IHttp2GoAwayFrame"/> and <see cref="T:DotNetty.Codecs.Http2.IHttp2ResetFrame"/>, as soon as they occur. Although <see
             cref="T:DotNetty.Codecs.Http2.IHttp2GoAwayFrame"/> and <see cref="T:DotNetty.Codecs.Http2.IHttp2ResetFrame"/> signify that the remote is ignoring further
             communication, closing of the channel is delayed until any inbound queue is drained with <see
             cref="M:DotNetty.Transport.Channels.IChannel.Read"/>, which follows the default behavior of channels in Netty. Applications are
             free to close the channel in response to such events if they don't have use for any queued
             messages. Any connection level events like <see cref="T:DotNetty.Codecs.Http2.IHttp2SettingsFrame"/> and <see cref="T:DotNetty.Codecs.Http2.IHttp2GoAwayFrame"/>
             will be processed internally and also propagated down the pipeline for other handlers to act on.</para>
            
             <para>Outbound streams are supported via the <see cref="T:DotNetty.Codecs.Http2.Http2StreamChannelBootstrap"/>.</para>
            
             <para><see cref="P:DotNetty.Transport.Channels.IChannelConfiguration.MaxMessagesPerRead"/> and <see cref="P:DotNetty.Transport.Channels.IChannelConfiguration.AutoRead"/> are supported.</para>
            
             <h3>Reference Counting</h3>
            
             <para>Some <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamFrame"/>s implement the <see cref="T:DotNetty.Common.IReferenceCounted"/> interface, as they carry
             reference counted objects (e.g. <see cref="T:DotNetty.Buffers.IByteBuffer"/>s). The multiplex codec will call <see cref="M:DotNetty.Common.IReferenceCounted.Retain"/>
             before propagating a reference counted object through the pipeline, and thus an application handler needs to release
             such an object after having consumed it. For more information on reference counting take a look at
             https://netty.io/wiki/reference-counted-objects.html </para>
            
             <h3>Channel Events</h3>
            
             <para>A child channel becomes active as soon as it is registered to an <see cref="T:DotNetty.Transport.Channels.IEventLoop"/>. Therefore, an active channel
             does not map to an active HTTP/2 stream immediately. Only once a <see cref="T:DotNetty.Codecs.Http2.IHttp2HeadersFrame"/> has been successfully sent
             or received, does the channel map to an active HTTP/2 stream. In case it is not possible to open a new HTTP/2 stream
             (i.e. due to the maximum number of active streams being exceeded), the child channel receives an exception
             indicating the cause and is closed immediately thereafter.</para>
            
             <h3>Writability and Flow Control</h3>
            
             <para>A child channel observes outbound/remote flow control via the channel's writability. A channel only becomes writable
             when it maps to an active HTTP/2 stream and the stream's flow control window is greater than zero. A child channel
             does not know about the connection-level flow control window. <see cref="T:DotNetty.Transport.Channels.IChannelHandler"/>s are free to ignore the
             channel's writability, in which case the excessive writes will be buffered by the parent channel. It's important to
             note that only <see cref="T:DotNetty.Codecs.Http2.IHttp2DataFrame"/>s are subject to HTTP/2 flow control.</para>
            
             @deprecated use <see cref="T:DotNetty.Codecs.Http2.Http2FrameCodecBuilder"/> together with <see cref="T:DotNetty.Codecs.Http2.Http2MultiplexHandler"/>.
             </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexCodec.OnHttpClientUpgrade">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexCodec.HandlerAdded0(DotNetty.Transport.Channels.IChannelHandlerContext)">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexCodec.HandlerRemovedInternal(DotNetty.Transport.Channels.IChannelHandlerContext)">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexCodec.OnHttp2Frame(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.IHttp2Frame)">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexCodec.OnHttp2StreamStateChanged(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.DefaultHttp2FrameStream)">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexCodec.OnHttp2FrameStreamException(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.Http2FrameStreamException)">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexCodec.ChannelReadComplete(DotNetty.Transport.Channels.IChannelHandlerContext)">
            <summary>
            Notifies any child streams of the read completion.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexCodec.ChannelRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexCodec.ChannelWritabilityChanged(DotNetty.Transport.Channels.IChannelHandlerContext)">
            <inheritdoc />
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2MultiplexCodecBuilder">
            <summary>
            A builder for <see cref="T:DotNetty.Codecs.Http2.Http2MultiplexCodec"/>.
            
            <para>Deprecated use <see cref="T:DotNetty.Codecs.Http2.Http2FrameCodecBuilder"/> together with <see cref="T:DotNetty.Codecs.Http2.Http2MultiplexHandler"/>.</para>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexCodecBuilder.ForClient(DotNetty.Transport.Channels.IChannelHandler)">
            <summary>
            Creates a builder for an HTTP/2 client.
            </summary>
            <param name="childHandler">the handler added to channels for remotely-created streams. It must be
            {@link ChannelHandler.Sharable}</param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexCodecBuilder.ForServer(DotNetty.Transport.Channels.IChannelHandler)">
            <summary>
            Creates a builder for an HTTP/2 server.
            </summary>
            <param name="childHandler">the handler added to channels for remotely-created streams. It must be
            {@link ChannelHandler.Sharable}.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexCodecBuilder.Build">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexCodecBuilder.Build(DotNetty.Codecs.Http2.IHttp2ConnectionDecoder,DotNetty.Codecs.Http2.IHttp2ConnectionEncoder,DotNetty.Codecs.Http2.Http2Settings)">
            <inheritdoc />
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2MultiplexHandler">
             <summary>
             An HTTP/2 handler that creates child channels for each stream. This handler must be used in combination
             with <see cref="T:DotNetty.Codecs.Http2.Http2FrameCodec"/>.
            
             <para>When a new stream is created, a new <see cref="T:DotNetty.Transport.Channels.IChannel"/> is created for it. Applications send and
             receive <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamFrame"/>s on the created channel. <see cref="T:DotNetty.Buffers.IByteBuffer"/>s cannot be processed by the channel;
             all writes that reach the head of the pipeline must be an instance of <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamFrame"/>. Writes that reach
             the head of the pipeline are processed directly by this handler and cannot be intercepted.</para>
            
             <para>The child channel will be notified of user events that impact the stream, such as <see
             cref="T:DotNetty.Codecs.Http2.IHttp2GoAwayFrame"/> and <see cref="T:DotNetty.Codecs.Http2.IHttp2ResetFrame"/>, as soon as they occur. Although <see
             cref="T:DotNetty.Codecs.Http2.IHttp2GoAwayFrame"/> and <see cref="T:DotNetty.Codecs.Http2.IHttp2ResetFrame"/> signify that the remote is ignoring further
             communication, closing of the channel is delayed until any inbound queue is drained with <see
             cref="M:DotNetty.Transport.Channels.IChannel.Read"/>, which follows the default behavior of channels in Netty. Applications are
             free to close the channel in response to such events if they don't have use for any queued
             messages. Any connection level events like <see cref="T:DotNetty.Codecs.Http2.IHttp2SettingsFrame"/> and <see cref="T:DotNetty.Codecs.Http2.IHttp2GoAwayFrame"/>
             will be processed internally and also propagated down the pipeline for other handlers to act on.</para>
            
             <para>Outbound streams are supported via the <see cref="T:DotNetty.Codecs.Http2.Http2StreamChannelBootstrap"/>.</para>
            
             <para><see cref="P:DotNetty.Transport.Channels.IChannelConfiguration.MaxMessagesPerRead"/> and <see cref="P:DotNetty.Transport.Channels.IChannelConfiguration.AutoRead"/> are supported.</para>
            
             <h3>Reference Counting</h3>
            
             <para>Some <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamFrame"/>s implement the <see cref="T:DotNetty.Common.IReferenceCounted"/> interface, as they carry
             reference counted objects (e.g. <see cref="T:DotNetty.Buffers.IByteBuffer"/>s). The multiplex codec will call <see cref="M:DotNetty.Common.IReferenceCounted.Retain"/>
             before propagating a reference counted object through the pipeline, and thus an application handler needs to release
             such an object after having consumed it. For more information on reference counting take a look at
             https://netty.io/wiki/reference-counted-objects.html </para>
            
             <h3>Channel Events</h3>
            
             <para>A child channel becomes active as soon as it is registered to an <see cref="T:DotNetty.Transport.Channels.IEventLoop"/>. Therefore, an active channel
             does not map to an active HTTP/2 stream immediately. Only once a <see cref="T:DotNetty.Codecs.Http2.IHttp2HeadersFrame"/> has been successfully sent
             or received, does the channel map to an active HTTP/2 stream. In case it is not possible to open a new HTTP/2 stream
             (i.e. due to the maximum number of active streams being exceeded), the child channel receives an exception
             indicating the cause and is closed immediately thereafter.</para>
            
             <h3>Writability and Flow Control</h3>
            
             <para>A child channel observes outbound/remote flow control via the channel's writability. A channel only becomes writable
             when it maps to an active HTTP/2 stream . A child channel does not know about the connection-level flow control
             window. <see cref="T:DotNetty.Transport.Channels.IChannelHandler"/>s are free to ignore the channel's writability, in which case the excessive writes will
             be buffered by the parent channel. It's important to note that only <see cref="T:DotNetty.Codecs.Http2.IHttp2DataFrame"/>s are subject to
             HTTP/2 flow control.</para>
             </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexHandler.#ctor(DotNetty.Transport.Channels.IChannelHandler)">
            <summary>Creates a new instance</summary>
            <param name="inboundStreamHandler">the <see cref="T:DotNetty.Transport.Channels.IChannelHandler"/> that will be added to the <see cref="T:DotNetty.Transport.Channels.IChannelPipeline"/> of
            the <see cref="T:DotNetty.Transport.Channels.IChannel"/>s created for new inbound streams.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexHandler.#ctor(DotNetty.Transport.Channels.IChannelHandler,DotNetty.Transport.Channels.IChannelHandler)">
            <summary>Creates a new instance</summary>
            <param name="inboundStreamHandler">the <see cref="T:DotNetty.Transport.Channels.IChannelHandler"/> that will be added to the <see cref="T:DotNetty.Transport.Channels.IChannelPipeline"/> of
            the <see cref="T:DotNetty.Transport.Channels.IChannel"/>s created for new inbound streams.</param>
            <param name="upgradeStreamHandler">the <see cref="T:DotNetty.Transport.Channels.IChannelHandler"/> that will be added to the <see cref="T:DotNetty.Transport.Channels.IChannelPipeline"/> of the
            upgraded <see cref="T:DotNetty.Transport.Channels.IChannel"/>.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexHandler.HandlerAdded0(DotNetty.Transport.Channels.IChannelHandlerContext)">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexHandler.HandlerRemoved0(DotNetty.Transport.Channels.IChannelHandlerContext)">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexHandler.ChannelRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexHandler.ChannelWritabilityChanged(DotNetty.Transport.Channels.IChannelHandlerContext)">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexHandler.UserEventTriggered(DotNetty.Transport.Channels.IChannelHandlerContext,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexHandler.ExceptionCaught(DotNetty.Transport.Channels.IChannelHandlerContext,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2MultiplexHandler.ChannelReadComplete(DotNetty.Transport.Channels.IChannelHandlerContext)">
            <summary>
            Notifies any child streams of the read completion.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2NoMoreStreamIdsException">
            <summary>
            This exception is thrown when there are no more stream IDs available for the current connection
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2OutboundFrameLogger">
            <summary>
            Decorator around a <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameWriter"/> that logs all outbound frames before calling the writer.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2SecurityUtil">
            <summary>
            Provides utilities related to security requirements specific to HTTP/2.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.Http2SecurityUtil.Ciphers">
             <summary>
             The following list is derived from <a
             href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html">SunJSSE Supported
             Ciphers</a> and <a
             href="https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility">Mozilla Modern Cipher
             Suites</a> in accordance with the <a
             href="https://tools.ietf.org/html/rfc7540#section-9.2.2">HTTP/2 Specification</a>.
            
             According to the <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html">
             JSSE documentation</a> "the names mentioned in the TLS RFCs prefixed with TLS_ are functionally equivalent
             to the JSSE cipher suites prefixed with SSL_".
             Both variants are used to support JVMs supporting the one or the other.
             </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2ServerUpgradeCodec">
            <summary>
            Server-side codec for performing a cleartext upgrade from HTTP/1.x to HTTP/2.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ServerUpgradeCodec.#ctor(DotNetty.Codecs.Http2.Http2ConnectionHandler)">
            <summary>
            Creates the codec using a default name for the connection handler when adding to the pipeline.
            </summary>
            <param name="connectionHandler">the HTTP/2 connection handler</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ServerUpgradeCodec.#ctor(DotNetty.Codecs.Http2.Http2MultiplexCodec)">
            <summary>
            Creates the codec using a default name for the connection handler when adding to the pipeline.
            </summary>
            <param name="http2Codec">the HTTP/2 multiplexing handler.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ServerUpgradeCodec.#ctor(System.String,DotNetty.Codecs.Http2.Http2ConnectionHandler)">
            <summary>
            Creates the codec providing an upgrade to the given handler for HTTP/2.
            </summary>
            <param name="handlerName">the name of the HTTP/2 connection handler to be used in the pipeline,
            or <c>null</c> to auto-generate the name.</param>
            <param name="connectionHandler">the HTTP/2 connection handler</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ServerUpgradeCodec.#ctor(System.String,DotNetty.Codecs.Http2.Http2MultiplexCodec)">
            <summary>
            Creates the codec providing an upgrade to the given handler for HTTP/2.
            </summary>
            <param name="handlerName">the name of the HTTP/2 connection handler to be used in the pipeline.</param>
            <param name="http2Codec">the HTTP/2 multiplexing handler.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ServerUpgradeCodec.#ctor(DotNetty.Codecs.Http2.Http2FrameCodec,DotNetty.Transport.Channels.IChannelHandler[])">
            <summary>
            Creates the codec using a default name for the connection handler when adding to the pipeline.
            </summary>
            <param name="http2Codec">the HTTP/2 frame handler.</param>
            <param name="handlers">the handlers that will handle the <see cref="T:DotNetty.Codecs.Http2.IHttp2Frame"/>s.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ServerUpgradeCodec.DecodeSettingsHeader(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Decodes the settings header and returns a <see cref="T:DotNetty.Codecs.Http2.Http2Settings"/> object.
            </summary>
            <param name="ctx"></param>
            <param name="settingsHeader"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ServerUpgradeCodec.DecodeSettings(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Buffers.IByteBuffer)">
            <summary>
            Decodes the settings frame and returns the settings.
            </summary>
            <param name="ctx"></param>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2ServerUpgradeCodec.CreateSettingsFrame(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Buffers.IByteBuffer)">
            <summary>
            Creates an HTTP2-Settings header with the given payload. The payload buffer is released.
            </summary>
            <param name="ctx"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2Settings">
            <summary>
            Settings for one endpoint in an HTTP/2 connection. Each of the values are optional as defined in
            the spec for the SETTINGS frame. Permits storage of arbitrary key/value pairs but provides helper
            methods for standard settings.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.Http2Settings.FALSE">
            <summary>
            Default capacity based on the number of standard settings from the HTTP/2 spec, adjusted so that adding all of
            the standard settings will not cause the map capacity to change.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.Put(System.Char,System.Int64)">
            <summary>
            Adds the given setting key/value pair. For standard settings defined by the HTTP/2 spec, performs
            validation on the values.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">if verification for a standard HTTP/2 setting fails.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.HeaderTableSize">
            <summary>
            Gets the <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.SettingsHeaderTableSize"/> value. If unavailable, returns <c>null</c>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.HeaderTableSize(System.Int64)">
            <summary>
            Sets the <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.SettingsHeaderTableSize"/> value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">if verification of the setting fails.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.PushEnabled">
            <summary>
            Gets the <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.SettingsEnablePush"/> value. If unavailable, returns <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.PushEnabled(System.Boolean)">
            <summary>
            Sets the <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.SettingsEnablePush"/> value.
            </summary>
            <param name="enabled"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.MaxConcurrentStreams">
            <summary>
            Gets the <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.SettingsMaxConcurrentStreams"/> value. If unavailable, returns <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.MaxConcurrentStreams(System.Int64)">
            <summary>
            Sets the <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.SettingsMaxConcurrentStreams"/> value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">if verification of the setting fails.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.InitialWindowSize">
            <summary>
            Gets the <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.SettingsInitialWindowSize"/> value. If unavailable, returns <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.InitialWindowSize(System.Int32)">
            <summary>
            Sets the <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.SettingsInitialWindowSize"/> value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">if verification of the setting fails.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.MaxFrameSize">
            <summary>
            Gets the <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.SettingsMaxFrameSize"/> value. If unavailable, returns <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.MaxFrameSize(System.Int32)">
            <summary>
            Sets the <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.SettingsMaxFrameSize"/> value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">if verification of the setting fails.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.MaxHeaderListSize">
            <summary>
            Gets the <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.SettingsMaxHeaderListSize"/> value. If unavailable, returns <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.MaxHeaderListSize(System.Int64)">
            <summary>
            Sets the <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.SettingsMaxHeaderListSize"/>  value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">if verification of the setting fails.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.CopyFrom(DotNetty.Codecs.Http2.Http2Settings)">
            <summary>
            Clears and then copies the given settings into this object.
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2Settings.GetIntValue(System.Char)">
            <summary>
            A helper method that returns <see cref="T:System.Int32"/> on the return of {@link #get(char)}, if present. Note that
            if the range of the value exceeds <see cref="F:System.Int32.MaxValue"/>, the {@link #get(char)} method should
            be used instead to avoid truncation of the value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2StreamChannelBootstrap.Option``1(DotNetty.Transport.Channels.ChannelOption{``0},``0)">
            <summary>
            Allow to specify a <see cref="T:DotNetty.Transport.Channels.ChannelOption"/> which is used for the <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamChannel"/> instances once they got
            created. Use a value of <c>null</c> to remove a previous set <see cref="T:DotNetty.Transport.Channels.ChannelOption"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="option"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2StreamChannelBootstrap.Attr``1(DotNetty.Common.Utilities.AttributeKey{``0},``0)">
            <summary>
            Allow to specify an initial attribute of the newly created <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamChannel"/>.  If the <paramref name="value"/>is
            <c>null</c>, the attribute of the specified <paramref name="key"/> is removed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2StreamChannelBootstrap.Handler(DotNetty.Transport.Channels.IChannelHandler)">
            <summary>
            The <see cref="T:DotNetty.Transport.Channels.IChannelHandler"/> to use for serving the requests.
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2StreamChannelBootstrap.OpenAsync">
            <summary>
            Open a new <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamChannel"/> to use.
            </summary>
            <returns>the <see cref="T:System.Threading.Tasks.Task`1"/> that will be notified once the channel was opened successfully or it failed.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2StreamChannelBootstrap.OpenAsync(System.Threading.Tasks.TaskCompletionSource{DotNetty.Codecs.Http2.IHttp2StreamChannel})">
            <summary>
            Open a new <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamChannel"/> to use and notifies the given <paramref name="promise"/>.
            </summary>
            <param name="promise"></param>
            <returns>the <see cref="T:System.Threading.Tasks.Task`1"/> that will be notified once the channel was opened successfully or it failed.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2StreamFrameToHttpObjectCodec">
             <summary>
             This handler converts from <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamFrame"/> to <see cref="T:DotNetty.Codecs.Http.IHttpObject"/>,
             and back. It can be used as an adapter in conjunction with <see cref="T:DotNetty.Codecs.Http2.Http2MultiplexCodec"/>
             to make http/2 connections backward-compatible with
             <see cref="T:DotNetty.Transport.Channels.IChannelHandler"/>s expecting <see cref="T:DotNetty.Codecs.Http.IHttpObject"/>
            
             <para>For simplicity, it converts to chunked encoding unless the entire stream
             is a single header.</para>
             </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2StreamFrameToHttpObjectCodec.Encode(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http.IHttpObject,System.Collections.Generic.List{System.Object})">
            <summary>
            Encode from an <see cref="T:DotNetty.Codecs.Http.IHttpObject"/> to an <see cref="T:DotNetty.Codecs.Http2.IHttp2StreamFrame"/>. This method will
            be called for each written message that can be handled by this encoder.
            <para>NOTE: 100-Continue responses that are NOT <see cref="T:DotNetty.Codecs.Http.IFullHttpResponse"/> will be rejected.</para>
            </summary>
            <param name="ctx">the <see cref="T:DotNetty.Transport.Channels.IChannelHandlerContext"/> which this handler belongs to</param>
            <param name="msg">the <see cref="T:DotNetty.Codecs.Http.IHttpObject"/> message to encode</param>
            <param name="output">the <see cref="T:System.Collections.Generic.List`1"/> into which the encoded msg should be added
            needs to do some kind of aggregation</param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Http2StreamState">
            <summary>
            The allowed states of an HTTP2 stream.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.Http2StreamState.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.Http2StreamState.Idle">
            <summary>
            LocalSideOpen: <c>false</c> RemoteSideOpen: <c>false</c>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.Http2StreamState.ReservedLocal">
            <summary>
            LocalSideOpen: <c>false</c> RemoteSideOpen: <c>false</c>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.Http2StreamState.ReservedRemote">
            <summary>
            LocalSideOpen: <c>false</c> RemoteSideOpen: <c>false</c>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.Http2StreamState.Open">
            <summary>
            LocalSideOpen: <c>true</c> RemoteSideOpen: <c>true</c>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.Http2StreamState.HalfClosedLocal">
            <summary>
            LocalSideOpen: <c>false</c> RemoteSideOpen: <c>true</c>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.Http2StreamState.HalfClosedRemote">
            <summary>
            LocalSideOpen: <c>true</c> RemoteSideOpen: <c>false</c>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.Http2StreamState.Closed">
            <summary>
            LocalSideOpen: <c>false</c> RemoteSideOpen: <c>false</c>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2StreamStateExtensions.LocalSideOpen(DotNetty.Codecs.Http2.Http2StreamState)">
            <summary>
            Indicates whether the local side of this stream is open (i.e. the state is either
            <see cref="F:DotNetty.Codecs.Http2.Http2StreamState.Open"/> or <see cref="F:DotNetty.Codecs.Http2.Http2StreamState.HalfClosedRemote"/>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.Http2StreamStateExtensions.RemoteSideOpen(DotNetty.Codecs.Http2.Http2StreamState)">
            <summary>
            Indicates whether the remote side of this stream is open (i.e. the state is either
            <see cref="F:DotNetty.Codecs.Http2.Http2StreamState.Open"/> or <see cref="F:DotNetty.Codecs.Http2.Http2StreamState.HalfClosedLocal"/>.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.HttpConversionUtil">
            <summary>
            Provides utility methods and constants for the HTTP/2 to HTTP conversion
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.HttpConversionUtil.HttpToHttp2HeaderBlacklist">
            <summary>
            The set of headers that should not be directly copied when converting headers from HTTP to HTTP/2.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.HttpConversionUtil.OutOfMessageSequenceMethod">
            <summary>
            This will be the method used for <see cref="T:DotNetty.Codecs.Http.IHttpRequest"/> objects generated out of the HTTP message flow defined in <a
            href="https://tools.ietf.org/html/rfc7540#section-8.1">[RFC 7540], Section 8.1</a>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.HttpConversionUtil.OutOfMessageSequencePath">
            <summary>
            This will be the path used for <see cref="T:DotNetty.Codecs.Http.IHttpRequest"/> objects generated out of the HTTP message flow defined in <a
            href="https://tools.ietf.org/html/rfc7540#section-8.1">[RFC 7540], Section 8.1</a>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.HttpConversionUtil.OutOfMessageSequenceReturnCode">
            <summary>
            This will be the status code used for <see cref="T:DotNetty.Codecs.Http.IHttpRequest"/> objects generated out of the HTTP message flow defined
            in <a href="https://tools.ietf.org/html/rfc7540#section-8.1">[RFC 7540], Section 8.1</a>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.HttpConversionUtil.EmptyRequestPath">
            <summary>
            <a href="https://tools.ietf.org/html/rfc7540#section-8.1.2.3">[RFC 7540], 8.1.2.3</a> states the path must not
            be empty, and instead should be <c>"/"</c>.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.HttpConversionUtil.ExtensionHeaderNames">
            <summary>
            Provides the HTTP header extensions used to carry HTTP/2 information in HTTP objects
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.HttpConversionUtil.ExtensionHeaderNames.StreamId">
            <summary>
            HTTP extension header which will identify the stream id from the HTTP/2 event(s) responsible for
            generating an <see cref="T:DotNetty.Codecs.Http.IHttpObject"/>
            <para><c>"x-http2-stream-id"</c></para>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.HttpConversionUtil.ExtensionHeaderNames.Scheme">
            <summary>
            HTTP extension header which will identify the scheme pseudo header from the HTTP/2 event(s) responsible for
            generating an <see cref="T:DotNetty.Codecs.Http.IHttpObject"/>
            <para><c>"x-http2-scheme"</c></para>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.HttpConversionUtil.ExtensionHeaderNames.Path">
            <summary>
            HTTP extension header which will identify the path pseudo header from the HTTP/2 event(s) responsible for
            generating an <see cref="T:DotNetty.Codecs.Http.IHttpObject"/>
            <para><c>"x-http2-path"</c></para>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.HttpConversionUtil.ExtensionHeaderNames.StreamPromiseId">
            <summary>
            HTTP extension header which will identify the stream id used to create this stream in an HTTP/2 push promise
            frame
            <para><c>"x-http2-stream-promise-id"</c></para>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.HttpConversionUtil.ExtensionHeaderNames.StreamDependencyId">
            <summary>
            HTTP extension header which will identify the stream id which this stream is dependent on. This stream will
            be a child node of the stream id associated with this header value.
            <para><c>"x-http2-stream-dependency-id"</c></para>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.HttpConversionUtil.ExtensionHeaderNames.StreamWeight">
            <summary>
            HTTP extension header which will identify the weight (if non-default and the priority is not on the default
            stream) of the associated HTTP/2 stream responsible responsible for generating an <see cref="T:DotNetty.Codecs.Http.IHttpObject"/>
            <para><c>"x-http2-stream-weight"</c></para>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HttpConversionUtil.ParseStatus(DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Apply HTTP/2 rules while translating status code to <see cref="T:DotNetty.Codecs.Http.HttpResponseStatus"/>
            </summary>
            <param name="status">The status from an HTTP/2 frame</param>
            <returns>The HTTP/1.x status</returns>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">If there is a problem translating from HTTP/2 to HTTP/1.x</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HttpConversionUtil.ToFullHttpResponse(System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,DotNetty.Buffers.IByteBufferAllocator,System.Boolean)">
            <summary>
            Create a new object to contain the response data
            </summary>
            <param name="streamId">The stream associated with the response</param>
            <param name="http2Headers">The initial set of HTTP/2 headers to create the response with</param>
            <param name="alloc">The <see cref="T:DotNetty.Buffers.IByteBufferAllocator"/> to use to generate the content of the message</param>
            <param name="validateHttpHeaders"><c>true</c> to validate HTTP headers in the http-codec
            <para><c>false</c> not to validate HTTP headers in the http-codec</para></param>
            <returns>A new response object which represents headers/data</returns>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">see <see cref="M:DotNetty.Codecs.Http2.HttpConversionUtil.AddHttp2ToHttpHeaders(System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,DotNetty.Codecs.Http.IFullHttpMessage,System.Boolean)"/></exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HttpConversionUtil.ToFullHttpRequest(System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,DotNetty.Buffers.IByteBufferAllocator,System.Boolean)">
            <summary>
            Create a new object to contain the request data
            </summary>
            <param name="streamId">The stream associated with the request</param>
            <param name="http2Headers">The initial set of HTTP/2 headers to create the request with</param>
            <param name="alloc">The <see cref="T:DotNetty.Buffers.IByteBufferAllocator"/> to use to generate the content of the message</param>
            <param name="validateHttpHeaders"><c>true</c> to validate HTTP headers in the http-codec
            <para><c>false</c> not to validate HTTP headers in the http-codec</para></param>
            <returns>A new request object which represents headers/data</returns>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">see <see cref="M:DotNetty.Codecs.Http2.HttpConversionUtil.AddHttp2ToHttpHeaders(System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,DotNetty.Codecs.Http.IFullHttpMessage,System.Boolean)"/></exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HttpConversionUtil.ToHttpRequest(System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Boolean)">
            <summary>
            Create a new object to contain the request data.
            </summary>
            <param name="streamId">The stream associated with the request</param>
            <param name="http2Headers">The initial set of HTTP/2 headers to create the request with</param>
            <param name="validateHttpHeaders"><c>true</c> to validate HTTP headers in the http-codec
            <para><c>false</c> not to validate HTTP headers in the http-codec</para></param>
            <returns>A new request object which represents headers for a chunked request</returns>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">See <see cref="M:DotNetty.Codecs.Http2.HttpConversionUtil.AddHttp2ToHttpHeaders(System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,DotNetty.Codecs.Http.HttpHeaders,DotNetty.Codecs.Http.HttpVersion,System.Boolean,System.Boolean)"/></exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HttpConversionUtil.ToHttpResponse(System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Boolean)">
            <summary>
            Create a new object to contain the response data.
            </summary>
            <param name="streamId">The stream associated with the response</param>
            <param name="http2Headers">The initial set of HTTP/2 headers to create the response with</param>
            <param name="validateHttpHeaders"><c>true</c> to validate HTTP headers in the http-codec
            <para><c>false</c> not to validate HTTP headers in the http-codec</para></param>
            <returns>A new response object which represents headers for a chunked response</returns>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">See <see cref="M:DotNetty.Codecs.Http2.HttpConversionUtil.AddHttp2ToHttpHeaders(System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,DotNetty.Codecs.Http.HttpHeaders,DotNetty.Codecs.Http.HttpVersion,System.Boolean,System.Boolean)"/></exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HttpConversionUtil.AddHttp2ToHttpHeaders(System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,DotNetty.Codecs.Http.IFullHttpMessage,System.Boolean)">
            <summary>
            Translate and add HTTP/2 headers to HTTP/1.x headers.
            </summary>
            <param name="streamId">The stream associated with <paramref name="sourceHeaders"/>.</param>
            <param name="sourceHeaders">The HTTP/2 headers to convert.</param>
            <param name="destinationMessage">The object which will contain the resulting HTTP/1.x headers.</param>
            <param name="addToTrailer"><c>true</c> to add to trailing headers. <c>false</c> to add to initial headers.</param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">If not all HTTP/2 headers can be translated to HTTP/1.x.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HttpConversionUtil.AddHttp2ToHttpHeaders(System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,DotNetty.Codecs.Http.HttpHeaders,DotNetty.Codecs.Http.HttpVersion,System.Boolean,System.Boolean)">
            <summary>
            Translate and add HTTP/2 headers to HTTP/1.x headers.
            </summary>
            <param name="streamId">The stream associated with <paramref name="outputHeaders"/>.</param>
            <param name="inputHeaders">The HTTP/2 headers to convert.</param>
            <param name="outputHeaders">The object which will contain the resulting HTTP/1.x headers..</param>
            <param name="httpVersion">What HTTP/1.x version <paramref name="outputHeaders"/> should be treated as when doing the conversion.</param>
            <param name="isTrailer"><c>true</c> if <paramref name="outputHeaders"/> should be treated as trailing headers.
            <c>false</c> otherwise.</param>
            <param name="isRequest"><c>true</c> if the <paramref name="outputHeaders"/> will be used in a request message.
            <c>false</c> for response message.</param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">If not all HTTP/2 headers can be translated to HTTP/1.x.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HttpConversionUtil.ToHttp2Headers(DotNetty.Codecs.Http.IHttpMessage,System.Boolean)">
            <summary>
            Converts the given HTTP/1.x headers into HTTP/2 headers.
            The following headers are only used if they can not be found in from the <c>HOST</c> header or the
            <c>Request-Line</c> as defined by <a href="https://tools.ietf.org/html/rfc7230">rfc7230</a>
            <para><see cref="F:DotNetty.Codecs.Http2.HttpConversionUtil.ExtensionHeaderNames.Scheme"/></para>
            <see cref="F:DotNetty.Codecs.Http2.HttpConversionUtil.ExtensionHeaderNames.Path"/> is ignored and instead extracted from the <c>Request-Line</c>.
            </summary>
            <param name="input"></param>
            <param name="validateHeaders"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HttpConversionUtil.ToHttp2HeadersFilterTE(DotNetty.Codecs.HeaderEntry{DotNetty.Common.Utilities.AsciiString,DotNetty.Common.Utilities.ICharSequence},DotNetty.Codecs.Http2.IHttp2Headers)">
            <summary>
            Filter the <see cref="F:DotNetty.Codecs.Http.HttpHeaderNames.Te"/> header according to the
            <a href="https://tools.ietf.org/html/rfc7540#section-8.1.2.2">special rules in the HTTP/2 RFC</a>.
            </summary>
            <param name="entry">An entry whose name is <see cref="F:DotNetty.Codecs.Http.HttpHeaderNames.Te"/>.</param>
            <param name="output">the resulting HTTP/2 headers.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HttpConversionUtil.ToHttp2Path(System.Uri)">
            <summary>
            Generate an HTTP/2 <c> :path</c> from a URI in accordance with
            <a href="https://tools.ietf.org/html/rfc7230#section-5.3">rfc7230, 5.3</a>.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="F:DotNetty.Codecs.Http2.HttpConversionUtil.Http2ToHttpHeaderTranslator.RequestHeaderTranslations">
            <summary>
            Translations from HTTP/2 header name to the HTTP/1.x equivalent.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.HttpToHttp2ConnectionHandler">
            <summary>
            Translates HTTP/1.x object writes into HTTP/2 frames.
            <para>See <see cref="T:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter"/> to get translation from HTTP/2 frames to HTTP/1.x objects.</para>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HttpToHttp2ConnectionHandler.GetStreamId(DotNetty.Codecs.Http.HttpHeaders)">
            <summary>
            Get the next stream id either from the <see cref="T:DotNetty.Codecs.Http.HttpHeaders"/> object or HTTP/2 codec
            </summary>
            <param name="httpHeaders">The HTTP/1.x headers object to look for the stream id</param>
            <returns>The stream id to use with this <see cref="T:DotNetty.Codecs.Http.HttpHeaders"/> object</returns>
            <exception cref="T:System.Exception">If the <paramref name="httpHeaders"/> object specifies an invalid stream id</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.HttpToHttp2ConnectionHandler.Write(DotNetty.Transport.Channels.IChannelHandlerContext,System.Object,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Handles conversion of <see cref="T:DotNetty.Codecs.Http.IHttpMessage"/> and <see cref="T:DotNetty.Codecs.Http.IHttpContent"/> to HTTP/2 frames.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.HttpToHttp2ConnectionHandlerBuilder">
            <summary>
            Builder which builds <see cref="T:DotNetty.Codecs.Http2.HttpToHttp2ConnectionHandler"/> objects.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2Connection">
            <summary>
            Manager for the state of an HTTP/2 connection with the remote end-point.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Connection.CloseAsync(DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Close this connection. No more new streams can be created after this point and
            all streams that exists (active or otherwise) will be closed and removed.
            
            <para>Note if iterating active streams via <see cref="M:DotNetty.Codecs.Http2.IHttp2Connection.ForEachActiveStream(DotNetty.Codecs.Http2.IHttp2StreamVisitor)"/> and an exception is
            thrown it is necessary to call this method again to ensure the close completes.</para>
            </summary>
            <param name="promise">Will be completed when all streams have been removed, and listeners have been notified.</param>
            <returns>A future that will be completed when all streams have been removed, and listeners have been notified.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Connection.NewKey">
            <summary>
            Creates a new key that is unique within this <see cref="T:DotNetty.Codecs.Http2.IHttp2Connection"/>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Connection.AddListener(DotNetty.Codecs.Http2.IHttp2ConnectionListener)">
            <summary>
            Adds a listener of stream life-cycle events.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Connection.RemoveListener(DotNetty.Codecs.Http2.IHttp2ConnectionListener)">
            <summary>
            Removes a listener of stream life-cycle events. If the same listener was added multiple times
            then only the first occurrence gets removed.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Connection.Stream(System.Int32)">
            <summary>
            Gets the stream if it exists. If not, returns <c>null</c>.
            </summary>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Connection.StreamMayHaveExisted(System.Int32)">
            <summary>
            Indicates whether or not the given stream may have existed within this connection. This is a short form
            for calling <see cref="M:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.MayHaveCreatedStream(System.Int32)"/> on both endpoints.
            </summary>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Connection.ConnectionStream">
            <summary>
            Gets the stream object representing the connection, itself (i.e. stream zero). This object
            always exists.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Connection.NumActiveStreams">
            <summary>
            Gets the number of streams that are actively in use (i.e. <c>OPEN</c> or <c>HALF CLOSED</c>).
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Connection.ForEachActiveStream(DotNetty.Codecs.Http2.IHttp2StreamVisitor)">
            <summary>
            Provide a means of iterating over the collection of active streams.
            </summary>
            <param name="visitor">The visitor which will visit each active stream.</param>
            <returns>The stream before iteration stopped or <c>null</c> if iteration went past the end.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Connection.ForEachActiveStream(System.Func{DotNetty.Codecs.Http2.IHttp2Stream,System.Boolean})">
            <summary>
            Provide a means of iterating over the collection of active streams.
            </summary>
            <param name="visitor">The visitor which will visit each active stream.</param>
            <returns>The stream before iteration stopped or <c>null</c> if iteration went past the end.</returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Connection.IsServer">
            <summary>
            Indicates whether or not the local endpoint for this connection is the server.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Connection.Local">
            <summary>
            Gets a view of this connection from the local <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint"/>.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Connection.Remote">
            <summary>
            Gets a view of this connection from the remote <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint"/>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Connection.GoAwayReceived">
            <summary>
            Indicates whether or not a <c>GOAWAY</c> was received from the remote endpoint.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Connection.GoAwayReceived(System.Int32,DotNetty.Codecs.Http2.Http2Error,DotNetty.Buffers.IByteBuffer)">
            <summary>
            Indicates that a <c>GOAWAY</c> was received from the remote endpoint and sets the last known stream.
            </summary>
            <param name="lastKnownStream">The Last-Stream-ID in the
            <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY</a> frame.</param>
            <param name="errorCode">the Error Code in the
            <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY</a> frame.</param>
            <param name="message">The Additional Debug Data in the
            <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY</a> frame. Note that reference count ownership
            belongs to the caller (ownership is not transferred to this method).</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Connection.GoAwaySent">
            <summary>
            Indicates whether or not a <c>GOAWAY</c> was sent to the remote endpoint.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Connection.GoAwaySent(System.Int32,DotNetty.Codecs.Http2.Http2Error,DotNetty.Buffers.IByteBuffer)">
            <summary>
            Updates the local state of this <see cref="T:DotNetty.Codecs.Http2.IHttp2Connection"/> as a result of a <c>GOAWAY</c> to send to the remote
            endpoint.
            </summary>
            <param name="lastKnownStream">The Last-Stream-ID in the
            <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY</a> frame.</param>
            <param name="errorCode">the Error Code in the
            <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY</a> frame.</param>
            <param name="message">The Additional Debug Data in the
            <a href="https://tools.ietf.org/html/rfc7540#section-6.8">GOAWAY</a> frame. Note that reference count ownership
            belongs to the caller (ownership is not transferred to this method).</param>
            <returns><c>true</c> if the corresponding <c>GOAWAY</c> frame should be sent to the remote endpoint.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2ConnectionDecoder">
            <summary>
            Handler for inbound traffic on behalf of <see cref="T:DotNetty.Codecs.Http2.Http2ConnectionHandler"/>. Performs basic protocol
            conformance on inbound frames before calling the delegate <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameListener"/> for
            application-specific processing. Note that frames of an unknown type (i.e. HTTP/2 extensions)
            will skip all protocol checks and be given directly to the listener for processing.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionDecoder.LifecycleManager(DotNetty.Codecs.Http2.IHttp2LifecycleManager)">
            <summary>
            Sets the lifecycle manager. Must be called as part of initialization before the decoder is used.
            </summary>
            <param name="lifecycleManager"></param>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionDecoder.Connection">
            <summary>
            Provides direct access to the underlying connection.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionDecoder.FlowController">
            <summary>
            Provides the local flow controller for managing inbound traffic.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionDecoder.FrameListener">
            <summary>
            Gets or sets the <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameListener"/> which will be notified when frames are decoded.
            This <c>must</c> be set before frames are decoded.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionDecoder.DecodeFrame(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Buffers.IByteBuffer,System.Collections.Generic.List{System.Object})">
            <summary>
            Called by the <see cref="T:DotNetty.Codecs.Http2.Http2ConnectionHandler"/> to decode the next frame from the input buffer.
            </summary>
            <param name="ctx"></param>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionDecoder.LocalSettings">
            <summary>
            Gets the local settings for this endpoint of the HTTP/2 connection.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionDecoder.PrefaceReceived">
            <summary>
            Indicates whether or not the first initial <c>SETTINGS</c> frame was received from the remote endpoint.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder">
            <summary>
            Handler for outbound HTTP/2 traffic.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder.LifecycleManager(DotNetty.Codecs.Http2.IHttp2LifecycleManager)">
            <summary>
            Sets the lifecycle manager. Must be called as part of initialization before the encoder is used.
            </summary>
            <param name="lifecycleManager"></param>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder.Connection">
            <summary>
            Provides direct access to the underlying connection.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder.FlowController">
            <summary>
            Provides the remote flow controller for managing outbound traffic.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder.FrameWriter">
            <summary>
            Provides direct access to the underlying frame writer object.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder.PollSentSettings">
            <summary>
            Gets the local settings on the top of the queue that has been sent but not ACKed. This may
            return <c>null</c>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder.RemoteSettings(DotNetty.Codecs.Http2.Http2Settings)">
            <summary>
            Sets the settings for the remote endpoint of the HTTP/2 connection.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint`1">
            <summary>
            A view of the connection from one endpoint (local or remote).
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint`1.FlowController">
            <summary>
            Gets or sets the flow controller for this endpoint.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint">
            <summary>
            A view of the connection from one endpoint (local or remote).
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.IncrementAndGetNextStreamId">
            <summary>
            Increment and get the next generated stream id this endpoint. If negative, the stream IDs are
            exhausted for this endpoint an no further streams may be created.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.IsValidStreamId(System.Int32)">
            <summary>
            Indicates whether the given streamId is from the set of IDs used by this endpoint to
            create new streams.
            </summary>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.MayHaveCreatedStream(System.Int32)">
            <summary>
            Indicates whether or not this endpoint may have created the given stream. This is <c>true</c> if
            <see cref="M:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.IsValidStreamId(System.Int32)"/> and <paramref name="streamId"/> &lt;= <see cref="P:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.LastStreamCreated"/>
            </summary>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.Created(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Indicates whether or not this endpoint created the given stream.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.CanOpenStream">
            <summary>
            Indicates whether or a stream created by this endpoint can be opened without violating
            <see cref="P:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.MaxActiveStreams"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.CreateStream(System.Int32,System.Boolean)">
            <summary>
            Creates a stream initiated by this endpoint. This could fail for the following reasons:
            <para>The requested stream ID is not the next sequential ID for this endpoint.</para>
            <para>The stream already exists.</para>
            <para><see cref="P:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.CanOpenStream"/> is <c>false</c>.</para>
            <para>The connection is marked as going away.</para>
            
            <para>The initial state of the stream will be immediately set before notifying <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionListener"/>s.
            The state transition is sensitive to <c>halfClosed</c> and is defined by <see cref="M:DotNetty.Codecs.Http2.IHttp2Stream.Open(System.Boolean)"/>.</para>
            </summary>
            <param name="streamId">The ID of the stream</param>
            <param name="halfClosed">see <see cref="M:DotNetty.Codecs.Http2.IHttp2Stream.Open(System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.ReservePushStream(System.Int32,DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Creates a push stream in the reserved state for this endpoint and notifies all listeners.
            This could fail for the following reasons:
            <para>Server push is not allowed to the opposite endpoint.</para>
            <para>The requested stream ID is not the next sequential stream ID for this endpoint.</para>
            <para>The number of concurrent streams is above the allowed threshold for this endpoint.</para>
            <para>The connection is marked as going away.</para>
            <para>The parent stream ID does not exist or is not <c>OPEN</c> from the side sending the push
            promise.</para>
            <para>Could not set a valid priority for the new stream.</para>
            </summary>
            <param name="streamId">the ID of the push stream</param>
            <param name="parent">the parent stream used to initiate the push stream.</param>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.IsServer">
            <summary>
            Indicates whether or not this endpoint is the server-side of the connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.AllowPushTo(System.Boolean)">
            <summary>
            This is the <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_ENABLE_PUSH</a> value sent
            from the opposite endpoint. This method should only be called by Netty (not users) as a result of a
            receiving a <c>SETTINGS</c> frame.
            </summary>
            <param name="allow"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.AllowPushTo">
            <summary>
            This is the <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_ENABLE_PUSH</a> value sent
            from the opposite endpoint. The initial value must be <c>true</c> for the client endpoint and always false
            for a server endpoint.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.NumActiveStreams">
            <summary>
            Gets the number of active streams (i.e. <c>OPEN</c> or <c>HALF CLOSED</c>) that were created by this
            endpoint.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.MaxActiveStreams">
            <summary>
            Gets the maximum number of streams (created by this endpoint) that are allowed to be active at
            the same time. This is the
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_CONCURRENT_STREAMS</a>
            value sent from the opposite endpoint to restrict stream creation by this endpoint.
            <para>The default value returned by this method must be "unlimited".</para>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.SetMaxActiveStreams(System.Int32)">
            <summary>
            Sets the limit for <c>SETTINGS_MAX_CONCURRENT_STREAMS</c>.
            </summary>
            <param name="maxActiveStreams">The maximum number of streams (created by this endpoint) that are allowed to be
            active at once. This is the
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_CONCURRENT_STREAMS</a> value sent
            from the opposite endpoint to restrict stream creation by this endpoint.</param>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.LastStreamCreated">
            <summary>
            Gets the ID of the stream last successfully created by this endpoint.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.LastStreamKnownByPeer">
            <summary>
            If a GOAWAY was received for this endpoint, this will be the last stream ID from the
            GOAWAY frame. Otherwise, this will be <c> -1</c>.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint.Opposite">
            <summary>
            Gets the <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEndpoint"/> opposite this one.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2ConnectionListener">
            <summary>
            Listener for life-cycle events for streams in this connection.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionListener.OnStreamAdded(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Notifies the listener that the given stream was added to the connection. This stream may
            not yet be active (i.e. <c>OPEN</c> or <c>HALF CLOSED</c>).
            </summary>
            <param name="stream"></param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2RuntimeException">thrown it will be logged and <c>not propagated</c>.
            Throwing from this method is not supported and is considered a programming error.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionListener.OnStreamActive(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Notifies the listener that the given stream was made active (i.e. <c>OPEN</c> or <c>HALF CLOSED</c>).
            </summary>
            <param name="stream"></param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2RuntimeException">thrown it will be logged and <c>not propagated</c>.
            Throwing from this method is not supported and is considered a programming error.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionListener.OnStreamHalfClosed(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Notifies the listener that the given stream has transitioned from <c>OPEN</c> to <c>HALF CLOSED</c>.
            This method will <strong>not</strong> be called until a state transition occurs from when
            <see cref="M:DotNetty.Codecs.Http2.IHttp2ConnectionListener.OnStreamActive(DotNetty.Codecs.Http2.IHttp2Stream)"/> was called.
            The stream can be inspected to determine which side is <c>HALF CLOSED</c>.
            </summary>
            <param name="stream"></param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2RuntimeException">thrown it will be logged and <c>not propagated</c>.
            Throwing from this method is not supported and is considered a programming error.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionListener.OnStreamClosed(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Notifies the listener that the given stream is now <c>CLOSED</c> in both directions and will no longer
            be accessible via <see cref="M:DotNetty.Codecs.Http2.IHttp2Connection.ForEachActiveStream(DotNetty.Codecs.Http2.IHttp2StreamVisitor)"/>.
            </summary>
            <param name="stream"></param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2RuntimeException">thrown it will be logged and <c>not propagated</c>.
            Throwing from this method is not supported and is considered a programming error.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionListener.OnStreamRemoved(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Notifies the listener that the given stream has now been removed from the connection and
            will no longer be returned via <see cref="M:DotNetty.Codecs.Http2.IHttp2Connection.Stream(System.Int32)"/>. The connection may
            maintain inactive streams for some time before removing them.
            </summary>
            <param name="stream"></param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2RuntimeException">thrown it will be logged and <c>not propagated</c>.
            Throwing from this method is not supported and is considered a programming error.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionListener.OnGoAwaySent(System.Int32,DotNetty.Codecs.Http2.Http2Error,DotNetty.Buffers.IByteBuffer)">
            <summary>
            Called when a <c>GOAWAY</c> frame was sent for the connection.
            </summary>
            <param name="lastStreamId">the last known stream of the remote endpoint.</param>
            <param name="errorCode">the error code, if abnormal closure.</param>
            <param name="debugData">application-defined debug data.</param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2RuntimeException">thrown it will be logged and <c>not propagated</c>.
            Throwing from this method is not supported and is considered a programming error.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2ConnectionListener.OnGoAwayReceived(System.Int32,DotNetty.Codecs.Http2.Http2Error,DotNetty.Buffers.IByteBuffer)">
            <summary>
            Called when a <c>GOAWAY</c> was received from the remote endpoint. This event handler duplicates
            <see cref="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnGoAwayRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.Http2Error,DotNetty.Buffers.IByteBuffer)"/>
            but is added here in order to simplify application logic for handling <c>GOAWAY</c> in a uniform way. An
            application should generally not handle both events, but if it does this method is called second, after
            notifying the <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameListener"/>.
            </summary>
            <param name="lastStreamId">the last known stream of the remote endpoint.</param>
            <param name="errorCode">the error code, if abnormal closure.</param>
            <param name="debugData">application-defined debug data.</param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2RuntimeException">thrown it will be logged and <c>not propagated</c>.
            Throwing from this method is not supported and is considered a programming error.</exception>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2ConnectionPropertyKey">
            <summary>
            A key to be used for associating application-defined properties with streams within this connection.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2DataFrame">
            <summary>
            HTTP/2 DATA frame.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2DataFrame.Padding">
            <summary>
            Frame padding to use. Will be non-negative and less than 256.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2DataFrame.InitialFlowControlledBytes">
            <summary>
            Returns the number of bytes that are flow-controlled initially, so even if the <see cref="P:DotNetty.Buffers.IByteBufferHolder.Content"/> is consumed
            this will not change.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2DataFrame.IsEndStream">
            <summary>
            Returns <c>true</c> if the END_STREAM flag ist set.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2DataWriter">
            <summary>
            Interface that defines an object capable of producing HTTP/2 data frames.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2DataWriter.WriteDataAsync(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Buffers.IByteBuffer,System.Int32,System.Boolean,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Writes a <c>DATA</c> frame to the remote endpoint. This will result in one or more
            frames being written to the context.
            </summary>
            <param name="ctx">the context to use for writing.</param>
            <param name="streamId">the stream for which to send the frame.</param>
            <param name="data">the payload of the frame. This will be released by this method.</param>
            <param name="padding">additional bytes that should be added to obscure the true content size. Must be between 0 and
            256 (inclusive). A 1 byte padding is encoded as just the pad length field with value 0.
            A 256 byte padding is encoded as the pad length field with value 255 and 255 padding bytes
            appended to the end of the frame.</param>
            <param name="endOfStream">indicates if this is the last frame to be sent for the stream.</param>
            <param name="promise">the promise for the write.</param>
            <returns>the future for the write.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2FlowController">
            <summary>
            Base interface for all HTTP/2 flow controllers.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FlowController.SetChannelHandlerContext(DotNetty.Transport.Channels.IChannelHandlerContext)">
            <summary>
            Set the <see cref="T:DotNetty.Transport.Channels.IChannelHandlerContext"/> for which to apply flow control on.
            <para>This <strong>must</strong> be called to properly initialize the <see cref="T:DotNetty.Codecs.Http2.IHttp2FlowController"/>.
            Not calling this is considered a programming error.</para>
            </summary>
            <param name="ctx">The <see cref="T:DotNetty.Transport.Channels.IChannelHandlerContext"/> for which to apply flow control on.</param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">if any protocol-related error occurred.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FlowController.SetInitialWindowSize(System.Int32)">
            <summary>
            Sets the connection-wide initial flow control window and updates all stream windows (but not the connection
            stream window) by the delta.
            
            <para>Represents the value for
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_INITIAL_WINDOW_SIZE</a>. This method should
            only be called by Netty (not users) as a result of a receiving a <c>SETTINGS</c> frame.</para>
            </summary>
            <param name="newWindowSize">the new initial window size.</param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">if any protocol-related error occurred.</exception>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2FlowController.InitialWindowSize">
            <summary>
            Gets the connection-wide initial flow control window size that is used as the basis for new stream flow
            control windows.
            <para>Represents the value for
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_INITIAL_WINDOW_SIZE</a>. The initial value
            returned by this method must be <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.DefaultWindowSize"/>.</para>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FlowController.GetWindowSize(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Get the portion of the flow control window for the given stream that is currently available for sending/receiving
            frames which are subject to flow control. This quantity is measured in number of bytes.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FlowController.IncrementWindowSize(DotNetty.Codecs.Http2.IHttp2Stream,System.Int32)">
            <summary>
            Increments the size of the stream's flow control window by the given delta.
            
            <para>In the case of a <see cref="T:DotNetty.Codecs.Http2.IHttp2RemoteFlowController"/> this is called upon receipt of a
            <c>WINDOW_UPDATE</c> frame from the remote endpoint to mirror the changes to the window size.</para>
            
            <para>For a <see cref="T:DotNetty.Codecs.Http2.IHttp2LocalFlowController"/> this can be called to request the expansion of the
            window size published by this endpoint. It is up to the implementation, however, as to when a
            <c>WINDOW_UPDATE</c> is actually sent.</para>
            </summary>
            <param name="stream">The subject stream. Use <see cref="P:DotNetty.Codecs.Http2.IHttp2Connection.ConnectionStream"/> for
            requesting the size of the connection window.</param>
            <param name="delta">the change in size of the flow control window.</param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">thrown if a protocol-related error occurred.</exception>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2Frame">
            <summary>
            An HTTP/2 frame.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Frame.Name">
            <summary>
            Returns the name of the HTTP/2 frame e.g. DATA, GOAWAY, etc.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2FrameListener">
            <summary>
            An listener of HTTP/2 frames.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnDataRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Buffers.IByteBuffer,System.Int32,System.Boolean)">
            <summary>
            Handles an inbound <c>DATA</c> frame.
            </summary>
            <param name="ctx">the context from the handler where the frame was read.</param>
            <param name="streamId">the subject stream for the frame.</param>
            <param name="data">payload buffer for the frame. This buffer will be released by the codec.</param>
            <param name="padding">additional bytes that should be added to obscure the true content size. Must be between 0 and
            256 (inclusive).</param>
            <param name="endOfStream">Indicates whether this is the last frame to be sent from the remote endpoint for this stream.</param>
            <returns>the number of bytes that have been processed by the application. The returned bytes are used by the
            inbound flow controller to determine the appropriate time to expand the inbound flow control window (i.e. send
            <c>WINDOW_UPDATE</c>). Returning a value equal to the length of <paramref name="data"/> + <paramref name="padding"/>
            will effectively
            opt-out of application-level flow control for this frame.Returning a value less than the length of <paramref name="data"/>
            + <paramref name="padding"/> will defer the returning of the processed bytes, which the application must later return via
            <see cref="M:DotNetty.Codecs.Http2.IHttp2LocalFlowController.ConsumeBytes(DotNetty.Codecs.Http2.IHttp2Stream,System.Int32)"/>. The returned value must
            be >= <c>0</c> and &lt;= <paramref name="data"/>.<see cref="P:DotNetty.Buffers.IByteBuffer.ReadableBytes"/> + <paramref name="padding"/>.
            </returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnHeadersRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32,System.Boolean)">
            <summary>
            Handles an inbound <c>HEADERS</c> frame.
            <para>Only one of the following methods will be called for each <c>HEADERS</c> frame sequence.
            One will be called when the <c>END_HEADERS</c> flag has been received.</para>
            <para><see cref="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnHeadersRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32,System.Boolean)"/></para>
            <para><see cref="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnHeadersRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32,System.Int16,System.Boolean,System.Int32,System.Boolean)"/></para>
            <para><see cref="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnPushPromiseRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32)"/></para>
            
            To say it another way; the <see cref="T:DotNetty.Codecs.Http2.IHttp2Headers"/> will contain all of the headers
            for the current message exchange step (additional queuing is not necessary).
            </summary>
            <param name="ctx">the context from the handler where the frame was read.</param>
            <param name="streamId">the subject stream for the frame.</param>
            <param name="headers">the received headers.</param>
            <param name="padding">additional bytes that should be added to obscure the true content size. Must be between 0 and
            256 (inclusive).</param>
            <param name="endOfStream">Indicates whether this is the last frame to be sent from the remote endpoint
            for this stream.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnHeadersRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32,System.Int16,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Handles an inbound <c>HEADERS</c> frame with priority information specified.
            Only called if <c>END_HEADERS</c> encountered.
            <para>Only one of the following methods will be called for each <c>HEADERS</c> frame sequence.
            One will be called when the <c>END_HEADERS</c> flag has been received.</para>
            <para><see cref="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnHeadersRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32,System.Boolean)"/></para>
            <para><see cref="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnHeadersRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32,System.Int16,System.Boolean,System.Int32,System.Boolean)"/></para>
            <para><see cref="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnPushPromiseRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32)"/></para>
            
            To say it another way; the <see cref="T:DotNetty.Codecs.Http2.IHttp2Headers"/> will contain all of the headers
            for the current message exchange step (additional queuing is not necessary).
            </summary>
            <param name="ctx">the context from the handler where the frame was read.</param>
            <param name="streamId">the subject stream for the frame.</param>
            <param name="headers">the received headers.</param>
            <param name="streamDependency">the stream on which this stream depends, or 0 if dependent on the connection.</param>
            <param name="weight">the new weight for the stream.</param>
            <param name="exclusive">whether or not the stream should be the exclusive dependent of its parent.</param>
            <param name="padding">additional bytes that should be added to obscure the true content size. Must be between 0 and
            256 (inclusive).</param>
            <param name="endOfStream">Indicates whether this is the last frame to be sent from the remote endpoint
            for this stream.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnPriorityRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,System.Int32,System.Int16,System.Boolean)">
            <summary>
            Handles an inbound <c>PRIORITY</c> frame.
            
            Note that is it possible to have this method called and no stream object exist for either
            <paramref name="streamId"/>, <paramref name="streamDependency"/>, or both. This is because the <c>PRIORITY</c> frame can be
            sent/received when streams are in the <c>CLOSED</c> state.
            </summary>
            <param name="ctx">the context from the handler where the frame was read.</param>
            <param name="streamId">the subject stream for the frame.</param>
            <param name="streamDependency">the stream on which this stream depends, or 0 if dependent on the connection.</param>
            <param name="weight">the new weight for the stream.</param>
            <param name="exclusive">whether or not the stream should be the exclusive dependent of its parent.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnRstStreamRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.Http2Error)">
            <summary>
            Handles an inbound <c>RST_STREAM</c> frame.
            </summary>
            <param name="ctx">the context from the handler where the frame was read.</param>
            <param name="streamId">the stream that is terminating.</param>
            <param name="errorCode">the error code identifying the type of failure.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnSettingsAckRead(DotNetty.Transport.Channels.IChannelHandlerContext)">
            <summary>
            Handles an inbound <c>SETTINGS</c> acknowledgment frame.
            </summary>
            <param name="ctx">the context from the handler where the frame was read.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnSettingsRead(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.Http2Settings)">
            <summary>
            Handles an inbound <c>SETTINGS</c> frame.
            </summary>
            <param name="ctx">the context from the handler where the frame was read.</param>
            <param name="settings">the settings received from the remote endpoint.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnPingRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int64)">
            <summary>
            Handles an inbound <c>PING</c> frame.
            </summary>
            <param name="ctx">the context from the handler where the frame was read.</param>
            <param name="data">the payload of the frame.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnPingAckRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int64)">
            <summary>
            Handles an inbound <c>PING</c> acknowledgment.
            </summary>
            <param name="ctx">the context from the handler where the frame was read.</param>
            <param name="data">the payload of the frame.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnPushPromiseRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32)">
            <summary>
            Handles an inbound <c>PUSH_PROMISE</c> frame. Only called if <c>END_HEADERS</c> encountered.
            <para>Promised requests MUST be authoritative, cacheable, and safe.
            See <a href="https://tools.ietf.org/html/rfc7540#section-8.2">[RFC 7540], Section 8.2</a>.</para>
            Only one of the following methods will be called for each <c>HEADERS</c> frame sequence.
            One will be called when the <c>END_HEADERS</c> flag has been received.
            <para><see cref="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnHeadersRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32,System.Boolean)"/></para>
            <para><see cref="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnHeadersRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32,System.Int16,System.Boolean,System.Int32,System.Boolean)"/></para>
            <para><see cref="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnPushPromiseRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32)"/></para>
            
            To say it another way; the <see cref="T:DotNetty.Codecs.Http2.IHttp2Headers"/> will contain all of the headers
            for the current message exchange step (additional queuing is not necessary).
            </summary>
            <param name="ctx">the context from the handler where the frame was read.</param>
            <param name="streamId">the stream the frame was sent on.</param>
            <param name="promisedStreamId">the ID of the promised stream.</param>
            <param name="headers">the received headers.</param>
            <param name="padding">additional bytes that should be added to obscure the true content size. Must be between 0 and
            256 (inclusive).</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnGoAwayRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.Http2Error,DotNetty.Buffers.IByteBuffer)">
            <summary>
            Handles an inbound <c>GO_AWAY</c> frame.
            </summary>
            <param name="ctx">the context from the handler where the frame was read.</param>
            <param name="lastStreamId">the last known stream of the remote endpoint.</param>
            <param name="errorCode">the error code, if abnormal closure.</param>
            <param name="debugData">application-defined debug data. If this buffer needs to be retained by the
            listener they must make a copy.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnWindowUpdateRead(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,System.Int32)">
            <summary>
            Handles an inbound <c>WINDOW_UPDATE</c> frame.
            </summary>
            <param name="ctx">the context from the handler where the frame was read.</param>
            <param name="streamId">the stream the frame was sent on.</param>
            <param name="windowSizeIncrement">the increased number of bytes of the remote endpoint's flow control window.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameListener.OnUnknownFrame(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.Http2FrameTypes,System.Int32,DotNetty.Codecs.Http2.Http2Flags,DotNetty.Buffers.IByteBuffer)">
            <summary>
            Handler for a frame not defined by the HTTP/2 spec.
            </summary>
            <param name="ctx">the context from the handler where the frame was read.</param>
            <param name="frameType">the frame type from the HTTP/2 header.</param>
            <param name="streamId">the stream the frame was sent on.</param>
            <param name="flags">the flags in the frame header.</param>
            <param name="payload">the payload of the frame.</param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2FrameReader">
            <summary>
            Reads HTTP/2 frames from an input <see cref="T:DotNetty.Buffers.IByteBuffer"/> and notifies the specified
            <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameListener"/> when frames are complete.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameReader.ReadFrame(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Buffers.IByteBuffer,DotNetty.Codecs.Http2.IHttp2FrameListener)">
            <summary>
            Attempts to read the next frame from the input buffer. If enough data is available to fully
            read the frame, notifies the listener of the read frame.
            </summary>
            <param name="ctx"></param>
            <param name="input"></param>
            <param name="listener"></param>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2FrameReader.Configuration">
            <summary>
            Get the configuration related elements for this <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameReader"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameReader.Close">
            <summary>
            Closes this reader and frees any allocated resources.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2FrameReaderConfiguration">
            <summary>
            Configuration specific to <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameReader"/>
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2FrameReaderConfiguration.HeadersConfiguration">
            <summary>
            Get the <see cref="T:DotNetty.Codecs.Http2.IHttp2HeadersDecoderConfiguration"/> for this <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameReader"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2FrameReaderConfiguration.FrameSizePolicy">
            <summary>
            Get the <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameSizePolicy"/> for this <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameReader"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameSizePolicy.SetMaxFrameSize(System.Int32)">
            <summary>
            Sets the maximum allowed frame size. Attempts to write frames longer than this maximum will fail.
            <para>This value is used to represent
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_FRAME_SIZE</a>. This method should
            only be called by Netty (not users) as a result of a receiving a <c>SETTINGS</c> frame.</para>
            </summary>
            <param name="max"></param>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2FrameSizePolicy.MaxFrameSize">
            <summary>
            Gets the maximum allowed frame size.
            <para>This value is used to represent
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_FRAME_SIZE</a>. The initial value
            defined by the RFC is unlimited but enforcing a lower limit is generally permitted.
            <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.DefaultMaxFrameSize"/> can be used as a more conservative default.</para>
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2FrameStream">
            <summary>
            A single stream within an HTTP/2 connection. To be used with the <see cref="T:DotNetty.Codecs.Http2.Http2FrameCodec"/>.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2FrameStream.Id">
            <summary>
            Returns the stream identifier.
            Use <see cref="M:DotNetty.Codecs.Http2.Http2CodecUtil.IsStreamIdValid(System.Int32)"/> to check if the stream has already been assigned an identifier.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2FrameStream.State">
            <summary>
            Returns the state of this stream.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2FrameStreamVisitor">
            <summary>
            A visitor that allows to iterate over a collection of <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameStream"/>s.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameStreamVisitor.Visit(DotNetty.Codecs.Http2.IHttp2FrameStream)">
            <summary>
            This method is called once for each stream of the collection.
            If an <see cref="T:System.Exception"/> is thrown, the loop is stopped.
            </summary>
            <param name="stream"></param>
            <returns><c>true</c> if the visitor wants to continue the loop and handle the stream.
            <c>false</c> if the visitor wants to stop handling the stream and abort the loop.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2FrameWriter">
            <summary>
            A writer responsible for marshaling HTTP/2 frames to the channel. All of the write methods in
            this interface write to the context, but DO NOT FLUSH. To perform a flush, you must separately
            call <see cref="M:DotNetty.Transport.Channels.IChannelHandlerContext.Flush"/>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameWriter.WriteHeadersAsync(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32,System.Boolean,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Writes a HEADERS frame to the remote endpoint.
            </summary>
            <param name="ctx">the context to use for writing.</param>
            <param name="streamId">the stream for which to send the frame.</param>
            <param name="headers">the headers to be sent.</param>
            <param name="padding">additional bytes that should be added to obscure the true content size. Must be between 0 and
            256 (inclusive).</param>
            <param name="endOfStream">indicates if this is the last frame to be sent for the stream.</param>
            <param name="promise">the promise for the write.</param>
            <remarks><a href="https://tools.ietf.org/html/rfc7540#section-10.5.1">Section 10.5.1</a> states the following:
            <para>The header block MUST be processed to ensure a consistent connection state, unless the connection is closed.</para>
            If this call has modified the HPACK header state you <c>MUST</c> throw a connection error.
            If this call has <c>NOT</c> modified the HPACK header state you are free to throw a stream error.
            </remarks>
            <returns>the future for the write.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameWriter.WriteHeadersAsync(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32,System.Int16,System.Boolean,System.Int32,System.Boolean,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Writes a HEADERS frame with priority specified to the remote endpoint.
            </summary>
            <param name="ctx">the context to use for writing.</param>
            <param name="streamId">the stream for which to send the frame.</param>
            <param name="headers">the headers to be sent.</param>
            <param name="streamDependency">the stream on which this stream should depend, or 0 if it should depend on the connection.</param>
            <param name="weight">the weight for this stream.</param>
            <param name="exclusive">whether this stream should be the exclusive dependant of its parent.</param>
            <param name="padding">additional bytes that should be added to obscure the true content size. Must be between 0 and 256 (inclusive).</param>
            <param name="endOfStream">indicates if this is the last frame to be sent for the stream.</param>
            <param name="promise">the promise for the write.</param>
            <remarks><a href="https://tools.ietf.org/html/rfc7540#section-10.5.1">Section 10.5.1</a> states the following:
            <para>The header block MUST be processed to ensure a consistent connection state, unless the connection is closed.</para>
            If this call has modified the HPACK header state you <c>MUST</c> throw a connection error.
            If this call has <c>NOT</c> modified the HPACK header state you are free to throw a stream error.
            </remarks>
            <returns>the future for the write.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameWriter.WritePriorityAsync(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,System.Int32,System.Int16,System.Boolean,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Writes a PRIORITY frame to the remote endpoint.
            </summary>
            <param name="ctx">the context to use for writing.</param>
            <param name="streamId">the stream for which to send the frame.</param>
            <param name="streamDependency">the stream on which this stream should depend, or 0 if it should depend on the connection.</param>
            <param name="weight">the weight for this stream.</param>
            <param name="exclusive">whether this stream should be the exclusive dependant of its parent.</param>
            <param name="promise">the promise for the write.</param>
            <returns>the future for the write.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameWriter.WriteRstStreamAsync(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.Http2Error,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Writes a RST_STREAM frame to the remote endpoint.
            </summary>
            <param name="ctx">the context to use for writing.</param>
            <param name="streamId">the stream for which to send the frame.</param>
            <param name="errorCode">the error code indicating the nature of the failure.</param>
            <param name="promise">the promise for the write.</param>
            <returns>the future for the write.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameWriter.WriteSettingsAsync(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.Http2Settings,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Writes a SETTINGS frame to the remote endpoint.
            </summary>
            <param name="ctx">the context to use for writing.</param>
            <param name="settings">the settings to be sent.</param>
            <param name="promise">the promise for the write.</param>
            <returns>the future for the write.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameWriter.WriteSettingsAckAsync(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Writes a SETTINGS acknowledgment to the remote endpoint.
            </summary>
            <param name="ctx">the context to use for writing.</param>
            <param name="promise">the promise for the write.</param>
            <returns>the future for the write.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameWriter.WritePingAsync(DotNetty.Transport.Channels.IChannelHandlerContext,System.Boolean,System.Int64,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Writes a PING frame to the remote endpoint.
            </summary>
            <param name="ctx">the context to use for writing.</param>
            <param name="ack">indicates whether this is an ack of a PING frame previously received from the remote endpoint.</param>
            <param name="data">the payload of the frame.</param>
            <param name="promise">the promise for the write.</param>
            <returns>the future for the write.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameWriter.WritePushPromiseAsync(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,System.Int32,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Writes a PUSH_PROMISE frame to the remote endpoint.
            </summary>
            <param name="ctx">the context to use for writing.</param>
            <param name="streamId">the stream for which to send the frame.</param>
            <param name="promisedStreamId">the ID of the promised stream.</param>
            <param name="headers">the headers to be sent.</param>
            <param name="padding">additional bytes that should be added to obscure the true content size. Must be between 0 and
            256 (inclusive).</param>
            <param name="promise">the promise for the write.</param>
            <remarks><a href="https://tools.ietf.org/html/rfc7540#section-10.5.1">Section 10.5.1</a> states the following:
            <para>The header block MUST be processed to ensure a consistent connection state, unless the connection is closed.</para>
            If this call has modified the HPACK header state you <c>MUST</c> throw a connection error.
            If this call has <c>NOT</c> modified the HPACK header state you are free to throw a stream error.
            </remarks>
            <returns>the future for the write.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameWriter.WriteGoAwayAsync(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.Http2Error,DotNetty.Buffers.IByteBuffer,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Writes a GO_AWAY frame to the remote endpoint.
            </summary>
            <param name="ctx">the context to use for writing.</param>
            <param name="lastStreamId">the last known stream of this endpoint.</param>
            <param name="errorCode">the error code, if the connection was abnormally terminated.</param>
            <param name="debugData">application-defined debug data. This will be released by this method.</param>
            <param name="promise">the promise for the write.</param>
            <returns>the future for the write.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameWriter.WriteWindowUpdateAsync(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,System.Int32,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Writes a WINDOW_UPDATE frame to the remote endpoint.
            </summary>
            <param name="ctx">the context to use for writing.</param>
            <param name="streamId">the stream for which to send the frame.</param>
            <param name="windowSizeIncrement">the number of bytes by which the local inbound flow control window is increasing.</param>
            <param name="promise">the promise for the write.</param>
            <returns>the future for the write.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameWriter.WriteFrameAsync(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.Http2FrameTypes,System.Int32,DotNetty.Codecs.Http2.Http2Flags,DotNetty.Buffers.IByteBuffer,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Generic write method for any HTTP/2 frame. This allows writing of non-standard frames.
            </summary>
            <param name="ctx">the context to use for writing.</param>
            <param name="frameType">the frame type identifier.</param>
            <param name="streamId">the stream for which to send the frame.</param>
            <param name="flags">the flags to write for this frame.</param>
            <param name="payload">the payload to write for this frame. This will be released by this method.</param>
            <param name="promise">the promise for the write.</param>
            <returns>the future for the write.</returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2FrameWriter.Configuration">
            <summary>
            Get the configuration related elements for this <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameWriter"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2FrameWriter.Close">
            <summary>
            Closes this writer and frees any allocated resources.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2FrameWriterConfiguration">
            <summary>
            Configuration specific to <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameWriter"/>
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2FrameWriterConfiguration.HeadersConfiguration">
            <summary>
            Get the <see cref="T:DotNetty.Codecs.Http2.IHttp2HeadersEncoderConfiguration"/> for this <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameWriter"/>.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2FrameWriterConfiguration.FrameSizePolicy">
            <summary>
            Get the <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameSizePolicy"/> for this <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameWriter"/>.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2GoAwayFrame.ErrorCode">
            <summary>
            The reason for beginning closure of the connection. Represented as an HTTP/2 error code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2GoAwayFrame.ExtraStreamIds">
            <summary>
            Gets or sets the number of IDs to reserve for the receiver to use while GOAWAY is in transit. This allows
            for new streams currently en route to still be created, up to a point, which allows for very
            graceful shutdown of both sides.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2GoAwayFrame.LastStreamId">
            <summary>
            Gets the last stream identifier if set, or <c>-1</c> else.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Headers.Method">
            <summary>
            Gets or sets the <see cref="F:DotNetty.Codecs.Http2.PseudoHeaderName.Method"/> header or <c>null</c> if there is no such header
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Headers.Scheme">
            <summary>
            Gets or sets the <see cref="F:DotNetty.Codecs.Http2.PseudoHeaderName.Scheme"/> header or <c>null</c> if there is no such header
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Headers.Authority">
            <summary>
            Gets or sets the <see cref="F:DotNetty.Codecs.Http2.PseudoHeaderName.Authority"/> header or <c>null</c> if there is no such header
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Headers.Path">
            <summary>
            Gets or sets the <see cref="F:DotNetty.Codecs.Http2.PseudoHeaderName.Path"/> header or <c>null</c> if there is no such header
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Headers.Status">
            <summary>
            Gets or sets the <see cref="F:DotNetty.Codecs.Http2.PseudoHeaderName.Status"/> header or <c>null</c> if there is no such header
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Headers.Contains(DotNetty.Common.Utilities.ICharSequence,DotNetty.Common.Utilities.ICharSequence,System.Boolean)">
            <summary>
            Returns <c>true</c> if a header with the <paramref name="name"/> and <paramref name="value"/> exists, <c>false</c> otherwise.
            If <paramref name="caseInsensitive"/> is <c>true</c> then a case insensitive compare is done on the value.
            </summary>
            <param name="name">the name of the header to find</param>
            <param name="value">the value of the header to find</param>
            <param name="caseInsensitive"><c>true</c> then a case insensitive compare is run to compare values.
            otherwise a case sensitive compare is run to compare values.</param>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2HeadersDecoder">
            <summary>
            Decodes HPACK-encoded headers blocks into <see cref="T:DotNetty.Codecs.Http2.IHttp2Headers"/>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2HeadersDecoder.DecodeHeaders(System.Int32,DotNetty.Buffers.IByteBuffer)">
            <summary>
            Decodes the given headers block and returns the headers.
            </summary>
            <param name="streamId"></param>
            <param name="headerBlock"></param>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2HeadersDecoder.Configuration">
            <summary>
            Get the <see cref="T:DotNetty.Codecs.Http2.IHttp2HeadersDecoderConfiguration"/> for this <see cref="T:DotNetty.Codecs.Http2.IHttp2HeadersDecoder"/>.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2HeadersDecoderConfiguration">
            <summary>
            Configuration related elements for the <see cref="T:DotNetty.Codecs.Http2.IHttp2HeadersDecoder"/> interface
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2HeadersDecoderConfiguration.SetMaxHeaderTableSize(System.Int64)">
            <summary>
            Represents the value for
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_HEADER_TABLE_SIZE</a>.
            <para>This method should only be called by Netty (not users) as a result of a receiving a <c>SETTINGS</c> frame.</para>
            </summary>
            <param name="max"></param>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2HeadersDecoderConfiguration.MaxHeaderTableSize">
            <summary>
            Represents the value for
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_HEADER_TABLE_SIZE</a>. The initial value
            returned by this method must be <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.DefaultHeaderTableSize"/>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2HeadersDecoderConfiguration.SetMaxHeaderListSize(System.Int64,System.Int64)">
            <summary>
            Configure the maximum allowed size in bytes of each set of headers.
            <para>This method should only be called by Netty (not users) as a result of a receiving a <c>SETTINGS</c> frame.</para>
            </summary>
            <param name="max"><a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>.
            If this limit is exceeded the implementation should attempt to keep the HPACK header tables up to date
            by processing data from the peer, but a <c>RST_STREAM</c> frame will be sent for the offending stream.</param>
            <param name="goAwayMax">Must be <paramref name="goAwayMax"/> >= <paramref name="max"/>. A <c>GO_AWAY</c> frame will be generated if this limit is exceeded
            for any particular stream.</param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">if limits exceed the RFC's boundaries or <paramref name="max"/> > <paramref name="goAwayMax"/>.</exception>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2HeadersDecoderConfiguration.MaxHeaderListSize">
            <summary>
            Represents the value for
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2HeadersDecoderConfiguration.MaxHeaderListSizeGoAway">
            <summary>
            Represents the upper bound in bytes for a set of headers before a <c>GO_AWAY</c> should be sent.
            This will be
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2HeadersEncoder">
            <summary>
            Encodes <see cref="T:DotNetty.Codecs.Http2.IHttp2Headers"/> into HPACK-encoded headers blocks.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2HeadersEncoder.EncodeHeaders(System.Int32,DotNetty.Codecs.Http2.IHttp2Headers,DotNetty.Buffers.IByteBuffer)">
            <summary>
            Encodes the given headers and writes the output headers block to the given output buffer.
            </summary>
            <param name="streamId">the identifier of the stream for which the headers are encoded.</param>
            <param name="headers">the headers to be encoded.</param>
            <param name="buffer">the buffer to receive the encoded headers.</param>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2HeadersEncoder.Configuration">
            <summary>
            Get the <see cref="T:DotNetty.Codecs.Http2.IHttp2HeadersEncoderConfiguration"/> for this <see cref="T:DotNetty.Codecs.Http2.IHttp2HeadersEncoder"/>.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2HeadersEncoderConfiguration">
            <summary>
            Configuration related elements for the <see cref="T:DotNetty.Codecs.Http2.IHttp2HeadersEncoder"/> interface
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2HeadersEncoderConfiguration.SetMaxHeaderTableSize(System.Int64)">
            <summary>
            Represents the value for
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_HEADER_TABLE_SIZE</a>.
            <para>This method should only be called by Netty (not users) as a result of a receiving a <c>SETTINGS</c> frame.</para>
            </summary>
            <param name="max"></param>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2HeadersEncoderConfiguration.MaxHeaderTableSize">
            <summary>
            Represents the value for
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_HEADER_TABLE_SIZE</a>.
            The initial value returned by this method must be <see cref="F:DotNetty.Codecs.Http2.Http2CodecUtil.DefaultHeaderTableSize"/>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2HeadersEncoderConfiguration.SetMaxHeaderListSize(System.Int64)">
            <summary>
            Represents the value for
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>.
            <para>This method should only be called by Netty (not users) as a result of a receiving a <c>SETTINGS</c> frame.</para>
            </summary>
            <param name="max"></param>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2HeadersEncoderConfiguration.MaxHeaderListSize">
            <summary>
            Represents the value for
            <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2HeadersFrame">
            <summary>
            HTTP/2 HEADERS frame.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2HeadersFrame.Headers">
            <summary>
            A complete header list. CONTINUATION frames are automatically handled.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2HeadersFrame.Padding">
            <summary>
            Frame padding to use. Must be non-negative and less than 256.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2HeadersFrame.IsEndStream">
            <summary>
            Returns <c>true</c> if the END_STREAM flag ist set.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2LifecycleManager">
            <summary>
            Manager for the life cycle of the HTTP/2 connection. Handles graceful shutdown of the channel,
            closing only after all of the streams have closed.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2LifecycleManager.CloseStreamLocal(DotNetty.Codecs.Http2.IHttp2Stream,System.Threading.Tasks.Task)">
            <summary>
            Closes the local side of the <paramref name="stream"/>. Depending on the <paramref name="stream"/> state this may result in
            <paramref name="stream"/> being closed. See <see cref="M:DotNetty.Codecs.Http2.IHttp2LifecycleManager.CloseStream(DotNetty.Codecs.Http2.IHttp2Stream,System.Threading.Tasks.Task)"/>.
            </summary>
            <param name="stream">the stream to be half closed.</param>
            <param name="future">See <see cref="M:DotNetty.Codecs.Http2.IHttp2LifecycleManager.CloseStream(DotNetty.Codecs.Http2.IHttp2Stream,System.Threading.Tasks.Task)"/>.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2LifecycleManager.CloseStreamRemote(DotNetty.Codecs.Http2.IHttp2Stream,System.Threading.Tasks.Task)">
            <summary>
            Closes the remote side of the <paramref name="stream"/>. Depending on the <paramref name="stream"/> state this may result in
            <paramref name="stream"/> being closed. See <see cref="M:DotNetty.Codecs.Http2.IHttp2LifecycleManager.CloseStream(DotNetty.Codecs.Http2.IHttp2Stream,System.Threading.Tasks.Task)"/>.
            </summary>
            <param name="stream">the stream to be half closed.</param>
            <param name="future">See <see cref="M:DotNetty.Codecs.Http2.IHttp2LifecycleManager.CloseStream(DotNetty.Codecs.Http2.IHttp2Stream,System.Threading.Tasks.Task)"/>.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2LifecycleManager.CloseStream(DotNetty.Codecs.Http2.IHttp2Stream,System.Threading.Tasks.Task)">
            <summary>
            Closes and deactivates the given <paramref name="stream"/>. A listener is also attached to <paramref name="future"/> and upon
            completion the underlying channel will be closed if <see cref="P:DotNetty.Codecs.Http2.IHttp2Connection.NumActiveStreams"/> is 0.
            </summary>
            <param name="stream">the stream to be closed and deactivated.</param>
            <param name="future">when completed if <see cref="P:DotNetty.Codecs.Http2.IHttp2Connection.NumActiveStreams"/> is 0 then the underlying channel
            will be closed.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2LifecycleManager.ResetStreamAsync(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.Http2Error,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Ensure the stream identified by <paramref name="streamId"/> is reset. If our local state does not indicate the stream has
            been reset yet then a <c>RST_STREAM</c> will be sent to the peer. If our local state indicates the stream
            has already been reset then the return status will indicate success without sending anything to the peer.
            </summary>
            <param name="ctx">The context used for communication and buffer allocation if necessary.</param>
            <param name="streamId">The identifier of the stream to reset.</param>
            <param name="errorCode">Justification as to why this stream is being reset. See <see cref="T:DotNetty.Codecs.Http2.Http2Error"/>.</param>
            <param name="promise">Used to indicate the return status of this operation.</param>
            <returns>Will be considered successful when the connection and stream state has been updated, and a
            <c>RST_STREAM</c> frame has been sent to the peer. If the stream state has already been updated and a
            <c>RST_STREAM</c> frame has been sent then the return status may indicate success immediately.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2LifecycleManager.GoAwayAsync(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32,DotNetty.Codecs.Http2.Http2Error,DotNetty.Buffers.IByteBuffer,DotNetty.Common.Concurrency.IPromise)">
            <summary>
            Prevents the peer from creating streams and close the connection if <paramref name="errorCode"/> is not
            <see cref="F:DotNetty.Codecs.Http2.Http2Error.NoError"/>. After this call the peer is not allowed to create any new streams and the local
            endpoint will be limited to creating streams with <![CDATA[stream identifier <= lastStreamId]]>. This may result in
            sending a <c>GO_AWAY</c> frame (assuming we have not already sent one with
            <![CDATA[Last-Stream-ID <= lastStreamId]]>, or may just return success if a <c>GO_AWAY</c> has previously been sent.
            </summary>
            <param name="ctx">The context used for communication and buffer allocation if necessary.</param>
            <param name="lastStreamId">The last stream that the local endpoint is claiming it will accept.</param>
            <param name="errorCode">The rational as to why the connection is being closed. See <see cref="T:DotNetty.Codecs.Http2.Http2Error"/>.</param>
            <param name="debugData">For diagnostic purposes (carries no semantic value).</param>
            <param name="promise">Used to indicate the return status of this operation.</param>
            <returns>Will be considered successful when the connection and stream state has been updated, and a
            <c>GO_AWAY</c> frame has been sent to the peer. If the stream state has already been updated and a
            <c>GO_AWAY</c> frame has been sent then the return status may indicate success immediately.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2LifecycleManager.OnError(DotNetty.Transport.Channels.IChannelHandlerContext,System.Boolean,System.Exception)">
            <summary>
            Processes the given error.
            </summary>
            <param name="ctx">The context used for communication and buffer allocation if necessary.</param>
            <param name="outbound"><c>true</c> if the error was caused by an outbound operation and so the corresponding
            <see cref="T:DotNetty.Common.Concurrency.IPromise"/> was failed as well.</param>
            <param name="cause">the error.</param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2LocalFlowController">
            <summary>
            A <see cref="T:DotNetty.Codecs.Http2.IHttp2FlowController"/> for controlling the inbound flow of <c>DATA</c> frames from the remote endpoint.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2LocalFlowController.FrameWriter(DotNetty.Codecs.Http2.IHttp2FrameWriter)">
            <summary>
            Sets the writer to be use for sending <c>WINDOW_UPDATE</c> frames. This must be called before any flow
            controlled data is received.
            </summary>
            <param name="frameWriter">the HTTP/2 frame writer.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2LocalFlowController.ReceiveFlowControlledFrame(DotNetty.Codecs.Http2.IHttp2Stream,DotNetty.Buffers.IByteBuffer,System.Int32,System.Boolean)">
            <summary>
            Receives an inbound <c>DATA</c> frame from the remote endpoint and applies flow control policies to it for both
            the <paramref name="stream"/> as well as the connection. If any flow control policies have been violated, an exception is
            raised immediately, otherwise the frame is considered to have "passed" flow control.
            <para>If <paramref name="stream"/> is <c>null</c> or closed, flow control should only be applied to the connection window and the
            bytes are immediately consumed.</para>
            </summary>
            <param name="stream">the subject stream for the received frame. The connection stream object must not be used. If
            <paramref name="stream"/> is <c>null</c> or closed, flow control should only be applied to the connection window
            and the bytes are immediately consumed.</param>
            <param name="data">payload buffer for the frame.</param>
            <param name="padding">additional bytes that should be added to obscure the true content size. Must be between 0 and
            256 (inclusive).</param>
            <param name="endOfStream">Indicates whether this is the last frame to be sent from the remote endpoint for this stream.</param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">if any flow control errors are encountered.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2LocalFlowController.ConsumeBytes(DotNetty.Codecs.Http2.IHttp2Stream,System.Int32)">
            <summary>
            Indicates that the application has consumed a number of bytes for the given stream and is therefore ready to
            receive more data from the remote endpoint. The application must consume any bytes that it receives or the flow
            control window will collapse. Consuming bytes enables the flow controller to send <c>WINDOW_UPDATE</c> to
            restore a portion of the flow control window for the stream.
            </summary>
            <param name="stream">the stream for which window space should be freed. The connection stream object must not be used.
            If <paramref name="stream"/> is <c>null</c> or closed (i.e. <see cref="P:DotNetty.Codecs.Http2.IHttp2Stream.State"/> method returns 
            <see cref="F:DotNetty.Codecs.Http2.Http2StreamState.Closed"/>), calling this method has no effect.</param>
            <param name="numBytes">the number of bytes to be returned to the flow control window.</param>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">if the number of bytes returned exceeds the <see cref="M:DotNetty.Codecs.Http2.IHttp2LocalFlowController.UnconsumedBytes(DotNetty.Codecs.Http2.IHttp2Stream)"/> for the stream.</exception>
            <returns><c>true</c> if a <see cref="F:DotNetty.Codecs.Http2.Http2FrameTypes.WindowUpdate"/> was sent, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2LocalFlowController.UnconsumedBytes(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            The number of bytes for the given stream that have been received but not yet consumed by the application.
            </summary>
            <param name="stream">the stream for which window space should be freed.</param>
            <returns>the number of unconsumed bytes for the stream.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2LocalFlowController.GetInitialWindowSize(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Get the initial flow control window size for the given stream. This quantity is measured in number of bytes. Note
            the unavailable window portion can be calculated by <see cref="P:DotNetty.Codecs.Http2.IHttp2FlowController.InitialWindowSize"/> - 
            <see cref="M:DotNetty.Codecs.Http2.IHttp2FlowController.GetWindowSize(DotNetty.Codecs.Http2.IHttp2Stream)"/>.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2PingFrame">
            <summary>
            HTTP/2 PING Frame.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2PingFrame.Ack">
            <summary>
            When <c>true</c>, indicates that this ping is a ping response.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2PingFrame.Content">
            <summary>
            Returns the eight byte opaque data.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2PromisedRequestVerifier">
            <summary>
            Provides an extensibility point for users to define the validity of push requests.
            See <a href="https://tools.ietf.org/html/rfc7540#section-8.2">[RFC 7540], Section 8.2</a>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2PromisedRequestVerifier.IsAuthoritative(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.IHttp2Headers)">
            <summary>
            Determine if a <see cref="T:DotNetty.Codecs.Http2.IHttp2Headers"/> are authoritative for a particular {@link ChannelHandlerContext}.
            </summary>
            <remarks>See <a href="https://tools.ietf.org/html/rfc7540#section-10.1">[RFC 7540], Section 10.1</a>.</remarks>
            <param name="ctx">The context on which the <paramref name="headers"/> where received on.</param>
            <param name="headers">The headers to be verified.</param>
            <returns>Return <c>true</c> if the <paramref name="ctx"/> is authoritative for the <paramref name="headers"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2PromisedRequestVerifier.IsCacheable(DotNetty.Codecs.Http2.IHttp2Headers)">
            <summary>
            Determine if a request is cacheable.
            </summary>
            <remarks>See <a href="https://tools.ietf.org/html/rfc7231#section-4.2.3">[RFC 7231], Section 4.2.3</a>.</remarks>
            <param name="headers">The headers for a push request.</param>
            <returns>Return <c>true</c> if the request associated with <paramref name="headers"/> is known to be cacheable,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2PromisedRequestVerifier.IsSafe(DotNetty.Codecs.Http2.IHttp2Headers)">
            <summary>
            Determine if a request is safe.
            </summary>
            <remarks>See <a href="https://tools.ietf.org/html/rfc7231#section-4.2.1">[RFC 7231], Section 4.2.1</a>.</remarks>
            <param name="headers">The headers for a push request.</param>
            <returns>Return <c>true</c> if the request associated with <paramref name="headers"/> is known to be safe,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled">
            <summary>
            Implementations of this interface are used to progressively write chunks of the underlying
            payload to the stream. A payload is considered to be fully written if <see cref="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled.Write(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32)"/> has
            been called at least once and it's <see cref="P:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled.Size"/> is now zero.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled.Size">
            <summary>
            The size of the payload in terms of bytes applied to the flow-control window.
            Some payloads like <c>HEADER</c> frames have no cost against flow control and would
            return 0 for this value even though they produce a non-zero number of bytes on
            the wire. Other frames like <c>DATA</c> frames have both their payload and padding count
            against flow-control.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled.Error(DotNetty.Transport.Channels.IChannelHandlerContext,System.Exception)">
            <summary>
            Called to indicate that an error occurred before this object could be completely written.
            <para>The <see cref="T:DotNetty.Codecs.Http2.IHttp2RemoteFlowController"/> will make exactly one call to either
            this method or <see cref="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled.WriteComplete"/>.</para>
            </summary>
            <param name="ctx">The context to use if any communication needs to occur as a result of the error.
            This may be <c>null</c> if an exception occurs when the connection has not been established yet.</param>
            <param name="cause">cause of the error.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled.WriteComplete">
            <summary>
            Called after this object has been successfully written.
            <para>The <see cref="T:DotNetty.Codecs.Http2.IHttp2RemoteFlowController"/> will make exactly one call to either
            this method or <see cref="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled.Error(DotNetty.Transport.Channels.IChannelHandlerContext,System.Exception)"/>.</para>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled.Write(DotNetty.Transport.Channels.IChannelHandlerContext,System.Int32)">
            <summary>
            Writes up to <paramref name="allowedBytes"/> of the encapsulated payload to the stream. Note that
            a value of 0 may be passed which will allow payloads with flow-control size == 0 to be
            written. The flow-controller may call this method multiple times with different values until
            the payload is fully written, i.e it's size after the write is 0.
            <para>When an exception is thrown the <see cref="T:DotNetty.Codecs.Http2.IHttp2RemoteFlowController"/> will make a call to
            <see cref="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled.Error(DotNetty.Transport.Channels.IChannelHandlerContext,System.Exception)"/>.</para>
            </summary>
            <param name="ctx">The context to use for writing.</param>
            <param name="allowedBytes">an upper bound on the number of bytes the payload can write at this time.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled.Merge(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled)">
            <summary>
            Merge the contents of the <paramref name="next"/> message into this message so they can be written out as one unit.
            This allows many small messages to be written as a single DATA frame.
            </summary>
            <param name="ctx"></param>
            <param name="next"></param>
            <returns><c>true</c> if <paramref name="next"/> was successfully merged and does not need to be enqueued, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2RemoteFlowController">
            <summary>
            A <see cref="T:DotNetty.Codecs.Http2.IHttp2FlowController"/> for controlling the flow of outbound <c>DATA</c> frames to the remote
            endpoint.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2RemoteFlowController.ChannelHandlerContext">
            <summary>
            Get the <see cref="T:DotNetty.Transport.Channels.IChannelHandlerContext"/> for which to apply flow control on.
            <para>This is intended for us by <see cref="T:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled"/> implementations only. Use with caution.</para>
            </summary>
            <returns>The <see cref="T:DotNetty.Transport.Channels.IChannelHandlerContext"/> for which to apply flow control on.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowController.AddFlowControlled(DotNetty.Codecs.Http2.IHttp2Stream,DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled)">
            <summary>
            Queues a payload for transmission to the remote endpoint. There is no guarantee as to when the data
            will be written or how it will be assigned to frames.
            before sending.
            <para>Writes do not actually occur until <see cref="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowController.WritePendingBytes"/> is called.</para>
            </summary>
            <param name="stream">the subject stream. Must not be the connection stream object.</param>
            <param name="payload">payload to write subject to flow-control accounting and ordering rules.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowController.HasFlowControlled(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Determine if <paramref name="stream"/> has any <see cref="T:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled"/> frames currently queued.
            </summary>
            <param name="stream">the stream to check if it has flow controlled frames.</param>
            <returns><c>true</c> if <paramref name="stream"/> has any <see cref="T:DotNetty.Codecs.Http2.IHttp2RemoteFlowControlled"/> frames currently queued.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowController.WritePendingBytes">
            <summary>
            Write all data pending in the flow controller up to the flow-control limits.
            </summary>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">throws if a protocol-related error occurred.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowController.Listener(DotNetty.Codecs.Http2.IHttp2RemoteFlowControllerListener)">
            <summary>
            Set the active listener on the flow-controller.
            </summary>
            <param name="listener">listener to notify when the a write occurs, can be <c>null</c>.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowController.IsWritable(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Determine if the <paramref name="stream"/> has bytes remaining for use in the flow control window.
            <para>Note that this method respects channel writability. The channel must be writable for this method to
            return <c>true</c>.</para>
            </summary>
            <param name="stream">The stream to test.</param>
            <returns><c>true</c> if the <paramref name="stream"/> has bytes remaining for use in the flow control window and the
            channel is writable, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowController.ChannelWritabilityChanged">
            <summary>
            Notification that the writability of <see cref="P:DotNetty.Codecs.Http2.IHttp2RemoteFlowController.ChannelHandlerContext"/> has changed.
            </summary>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">If any writes occur as a result of this call and encounter errors.</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowController.UpdateDependencyTree(System.Int32,System.Int32,System.Int16,System.Boolean)">
            <summary>
            Explicitly update the dependency tree. This method is called independently of stream state changes.
            </summary>
            <param name="childStreamId">The stream identifier associated with the child stream.</param>
            <param name="parentStreamId">The stream identifier associated with the parent stream. May be <c>0</c>,
            to make <paramref name="childStreamId"/> and immediate child of the connection.</param>
            <param name="weight">The weight which is used relative to other child streams for <paramref name="parentStreamId"/>. This value
            must be between 1 and 256 (inclusive).</param>
            <param name="exclusive">If <paramref name="childStreamId"/> should be the exclusive dependency of <paramref name="parentStreamId"/>.</param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2RemoteFlowControllerListener">
            <summary>
            Listener to the number of flow-controlled bytes written per stream.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowControllerListener.WritabilityChanged(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Notification that <see cref="M:DotNetty.Codecs.Http2.IHttp2RemoteFlowController.IsWritable(DotNetty.Codecs.Http2.IHttp2Stream)"/> has changed for <paramref name="stream"/>.
            This method should not throw. Any thrown exceptions are considered a programming error and are ignored.
            </summary>
            <param name="stream">The stream which writability has changed for.</param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2ResetFrame">
            <summary>
            HTTP/2 RST_STREAM frame.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2ResetFrame.ErrorCode">
            <summary>
            The reason for resetting the stream. Represented as an HTTP/2 error code.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2SettingsAckFrame">
            <summary>
            An ack for a previously received <see cref="T:DotNetty.Codecs.Http2.IHttp2SettingsFrame"/>.
            <para>
            The <a href="https://tools.ietf.org/html/rfc7540#section-6.5">HTTP/2 protocol</a> enforces that ACKs are applied in
            order, so this ACK will apply to the earliest received and not yet ACKed <see cref="T:DotNetty.Codecs.Http2.IHttp2SettingsFrame"/> frame.
            </para>
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2SettingsReceivedConsumer">
            <summary>
            Provides a Consumer like interface to consume remote settings received but not yet ACKed.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2SettingsReceivedConsumer.ConsumeReceivedSettings(DotNetty.Codecs.Http2.Http2Settings)">
            <summary>
            Consume the most recently received but not yet ACKed settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2Stream">
            <summary>
            A single stream within an HTTP2 connection. Streams are compared to each other by priority.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Stream.Id">
            <summary>
            Gets the unique identifier for this stream within the connection.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Stream.State">
            <summary>
            Gets the state of this stream.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Stream.Open(System.Boolean)">
            <summary>
            Opens this stream, making it available via <see cref="M:DotNetty.Codecs.Http2.IHttp2Connection.ForEachActiveStream(DotNetty.Codecs.Http2.IHttp2StreamVisitor)"/> and
            transition state to:
            <para><see cref="F:DotNetty.Codecs.Http2.Http2StreamState.Open"/> if <see cref="P:DotNetty.Codecs.Http2.IHttp2Stream.State"/> is <see cref="F:DotNetty.Codecs.Http2.Http2StreamState.Idle"/> and <paramref name="halfClosed"/> is <c>false</c>.</para>
            <para><see cref="F:DotNetty.Codecs.Http2.Http2StreamState.HalfClosedLocal"/> if <see cref="P:DotNetty.Codecs.Http2.IHttp2Stream.State"/> is <see cref="F:DotNetty.Codecs.Http2.Http2StreamState.Idle"/> and <paramref name="halfClosed"/>
            is <c>true</c> and the stream is local. In this state, <see cref="P:DotNetty.Codecs.Http2.IHttp2Stream.IsHeadersSent"/> is <c>true</c></para>
            <para><see cref="F:DotNetty.Codecs.Http2.Http2StreamState.HalfClosedRemote"/> if <see cref="P:DotNetty.Codecs.Http2.IHttp2Stream.State"/> is <see cref="F:DotNetty.Codecs.Http2.Http2StreamState.Idle"/> and <paramref name="halfClosed"/>
            is <c>true</c> and the stream is remote. In this state, <see cref="P:DotNetty.Codecs.Http2.IHttp2Stream.IsHeadersReceived"/> is <c>true</c></para>
            <para><see cref="F:DotNetty.Codecs.Http2.Http2StreamState.ReservedLocal"/> if <see cref="P:DotNetty.Codecs.Http2.IHttp2Stream.State"/> is <see cref="F:DotNetty.Codecs.Http2.Http2StreamState.HalfClosedRemote"/>.</para>
            <para><see cref="F:DotNetty.Codecs.Http2.Http2StreamState.ReservedRemote"/> if <see cref="P:DotNetty.Codecs.Http2.IHttp2Stream.State"/> is <see cref="F:DotNetty.Codecs.Http2.Http2StreamState.HalfClosedLocal"/>.</para>
            </summary>
            <param name="halfClosed"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Stream.Close">
            <summary>
            Closes the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Stream.CloseLocalSide">
            <summary>
            Closes the local side of this stream. If this makes the stream closed, the child is closed as well.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Stream.CloseRemoteSide">
            <summary>
            Closes the remote side of this stream. If this makes the stream closed, the child is closed as well.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Stream.IsResetSent">
            <summary>
            Indicates whether a <c>RST_STREAM</c> frame has been sent from the local endpoint for this stream.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Stream.ResetSent">
            <summary>
            Sets the flag indicating that a <c>RST_STREAM</c> frame has been sent from the local endpoint
            for this stream. This does not affect the stream state.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Stream.SetProperty``1(DotNetty.Codecs.Http2.IHttp2ConnectionPropertyKey,System.Object)">
            <summary>
            Associates the application-defined data with this stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns>The value that was previously associated with <paramref name="key"/>, or <c>null</c> if there was none.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Stream.GetProperty``1(DotNetty.Codecs.Http2.IHttp2ConnectionPropertyKey)">
            <summary>
            Returns application-defined data if any was associated with this stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Stream.RemoveProperty``1(DotNetty.Codecs.Http2.IHttp2ConnectionPropertyKey)">
            <summary>
            Returns and removes application-defined data if any was associated with this stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Stream.RemoveProperty(DotNetty.Codecs.Http2.IHttp2ConnectionPropertyKey)">
            <summary>
            Returns and removes application-defined data if any was associated with this stream.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Stream.HeadersSent(System.Boolean)">
            <summary>
            Indicates that headers have been sent to the remote endpoint on this stream. The first call to this method would
            be for the initial headers (see <see cref="P:DotNetty.Codecs.Http2.IHttp2Stream.IsHeadersSent"/> and the second call would indicate the trailers
            (see <see cref="P:DotNetty.Codecs.Http2.IHttp2Stream.IsTrailersSent"/>.
            </summary>
            <param name="isInformational"><c>true</c> if the headers contain an informational status code (for responses only).</param>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Stream.IsHeadersSent">
            <summary>
            Indicates whether or not headers were sent to the remote endpoint.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Stream.IsTrailersSent">
            <summary>
            Indicates whether or not trailers were sent to the remote endpoint.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Stream.HeadersReceived(System.Boolean)">
            <summary>
            Indicates that headers have been received. The first call to this method would be for the initial headers
            (see <see cref="P:DotNetty.Codecs.Http2.IHttp2Stream.IsHeadersReceived"/> and the second call would indicate the trailers
            (see <see cref="P:DotNetty.Codecs.Http2.IHttp2Stream.IsTrailersReceived"/>.
            </summary>
            <param name="isInformational"><c>true</c> if the headers contain an informational status code (for responses only).</param>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Stream.IsHeadersReceived">
            <summary>
            Indicates whether or not the initial headers have been received.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Stream.IsTrailersReceived">
            <summary>
            Indicates whether or not the trailers have been received.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2Stream.PushPromiseSent">
            <summary>
            Indicates that a push promise was sent to the remote endpoint.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2Stream.IsPushPromiseSent">
            <summary>
            Indicates whether or not a push promise was sent to the remote endpoint.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2StreamChannel.Stream">
            <summary>
            Returns the <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameStream"/> that belongs to this channel.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2StreamFrame.Stream">
            <summary>
            Gets or sets the <see cref="T:DotNetty.Codecs.Http2.IHttp2FrameStream"/> object for this frame.
            </summary>
            <returns><c>null</c> if the frame has yet to be associated with a stream.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2StreamVisitor">
            <summary>
            A visitor that allows iteration over a collection of streams.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IHttp2StreamVisitor.Visit(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            allows iteration over a collection of streams.
            </summary>
            <param name="stream"></param>
            <returns><c>true</c> if the visitor wants to continue the loop and handle the entry.
            <c>false</c> if the visitor wants to stop handling headers and abort the loop.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IHttp2WindowUpdateFrame">
            <summary>
            HTTP/2 WINDOW_UPDATE frame.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IHttp2WindowUpdateFrame.WindowSizeIncrement">
            <summary>
            Number of bytes to increment the HTTP/2 stream's or connection's flow control window.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter">
            <summary>
            This adapter provides just header/data events from the HTTP message flow defined
            in <a href="https://tools.ietf.org/html/rfc7540#section-8.1">[RFC 7540], Section 8.1</a>.
            <para>See <see cref="T:DotNetty.Codecs.Http2.HttpToHttp2ConnectionHandler"/> to get translation from HTTP/1.x objects to HTTP/2 frames for writes.</para>
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter.RemoveMessage(DotNetty.Codecs.Http2.IHttp2Stream,System.Boolean)">
            <summary>
            The stream is out of scope for the HTTP message flow and will no longer be tracked
            </summary>
            <param name="stream">The stream to remove associated state with</param>
            <param name="release"><c>true</c> to call release on the value if it is present. <c>false</c> to not call release.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter.GetMessage(DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Get the <see cref="T:DotNetty.Codecs.Http.IFullHttpMessage"/> associated with <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream to get the associated state from</param>
            <returns>The <see cref="T:DotNetty.Codecs.Http.IFullHttpMessage"/> associated with <paramref name="stream"/>.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter.PutMessage(DotNetty.Codecs.Http2.IHttp2Stream,DotNetty.Codecs.Http.IFullHttpMessage)">
            <summary>
            Make <paramref name="message"/> be the state associated with <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream which <paramref name="message"/> is associated with.</param>
            <param name="message">The message which contains the HTTP semantics.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter.FireChannelRead(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http.IFullHttpMessage,System.Boolean,DotNetty.Codecs.Http2.IHttp2Stream)">
            <summary>
            Set final headers and fire a channel read event
            </summary>
            <param name="ctx">The context to fire the event on</param>
            <param name="msg">The message to send</param>
            <param name="release"><c>true</c> to call release on the value if it is present. <c>false</c> to not call release.</param>
            <param name="stream">the stream of the message which is being fired</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter.NewMessage(DotNetty.Codecs.Http2.IHttp2Stream,DotNetty.Codecs.Http2.IHttp2Headers,System.Boolean,DotNetty.Buffers.IByteBufferAllocator)">
            <summary>
            Create a new <see cref="T:DotNetty.Codecs.Http.IFullHttpMessage"/> based upon the current connection parameters
            </summary>
            <param name="stream">The stream to create a message for</param>
            <param name="headers">The headers associated with <paramref name="stream"/>.</param>
            <param name="validateHttpHeaders"><c>true</c> to validate HTTP headers in the http-codec
            <para><c>false</c> not to validate HTTP headers in the http-codec</para></param>
            <param name="alloc">The <see cref="T:DotNetty.Buffers.IByteBufferAllocator"/> to use to generate the content of the message</param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter.ProcessHeadersBegin(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.IHttp2Stream,DotNetty.Codecs.Http2.IHttp2Headers,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Provides translation between HTTP/2 and HTTP header objects while ensuring the stream
            is in a valid state for additional headers.
            </summary>
            <param name="ctx">The context for which this message has been received.
            Used to send informational header if detected.</param>
            <param name="stream">The stream the <paramref name="headers"/> apply to</param>
            <param name="headers">The headers to process</param>
            <param name="endOfStream"><c>true</c> if the <paramref name="stream"/> has received the end of stream flag</param>
            <param name="allowAppend"><c>true</c> if headers will be appended if the stream already exists.
            <para>if <c>false</c> and the stream already exists this method returns <c>null</c>.</para></param>
            <param name="appendToTrailer"><c>true</c> if a message <paramref name="stream"/> already exists then the headers
            should be added to the trailing headers.
            <para><c>false</c> then appends will be done to the initial headers.</para></param>
            <returns>The object used to track the stream corresponding to <paramref name="stream"/>. <c>null</c> if
            <paramref name="allowAppend"/> is <c>false</c> and the stream already exists.</returns>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">If the stream id is not in the correct state to process the headers request</exception>
        </member>
        <member name="M:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter.ProcessHeadersEnd(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.IHttp2Stream,DotNetty.Codecs.Http.IFullHttpMessage,System.Boolean)">
            <summary>
            After HTTP/2 headers have been processed by <see cref="M:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter.ProcessHeadersBegin(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http2.IHttp2Stream,DotNetty.Codecs.Http2.IHttp2Headers,System.Boolean,System.Boolean,System.Boolean)"/> this method either
            sends the result up the pipeline or retains the message for future processing.
            </summary>
            <param name="ctx">The context for which this message has been received</param>
            <param name="stream">The stream the <paramref name="msg"/> corresponds to</param>
            <param name="msg">The object which represents all headers/data for corresponding to <paramref name="stream"/>.</param>
            <param name="endOfStream"><c>true</c> if this is the last event for the stream</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter.OnRstStreamRead(DotNetty.Codecs.Http2.IHttp2Stream,DotNetty.Codecs.Http.IFullHttpMessage)">
            <summary>
            Called if a <c>RST_STREAM</c> is received but we have some data for that stream.
            </summary>
            <param name="stream"></param>
            <param name="msg"></param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter.IImmediateSendDetector">
            <summary>
            Allows messages to be sent up the pipeline before the next phase in the
            HTTP message flow is detected.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter.IImmediateSendDetector.MustSendImmediately(DotNetty.Codecs.Http.IFullHttpMessage)">
            <summary>
            Determine if the response should be sent immediately, or wait for the end of the stream
            </summary>
            <param name="msg">The response to test</param>
            <returns><c>true</c> if the message should be sent immediately
            <para><c>false</c> if we should wait for the end of the stream</para></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter.IImmediateSendDetector.CopyIfNeeded(DotNetty.Buffers.IByteBufferAllocator,DotNetty.Codecs.Http.IFullHttpMessage)">
            <summary>
            Determine if a copy must be made after an immediate send happens.
            <para>An example of this use case is if a request is received
            with a 'Expect: 100-continue' header. The message will be sent immediately,
            and the data will be queued and sent at the end of the stream.</para>
            </summary>
            <param name="allocator">The <see cref="T:DotNetty.Buffers.IByteBufferAllocator"/> that can be used to allocate</param>
            <param name="msg">The message which has just been sent due to <see cref="M:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter.IImmediateSendDetector.MustSendImmediately(DotNetty.Codecs.Http.IFullHttpMessage)"/>.</param>
            <returns>A modified copy of the <paramref name="msg"/> or <c>null</c> if a copy is not needed.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapterBuilder">
            <summary>
            Builds an <see cref="T:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter"/>.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapterBuilder.#ctor(DotNetty.Codecs.Http2.IHttp2Connection)">
            <summary>
            Creates a new <see cref="T:DotNetty.Codecs.Http2.InboundHttp2ToHttpAdapter"/> builder for the specified <see cref="T:DotNetty.Codecs.Http2.IHttp2Connection"/>.
            </summary>
            <param name="connection">the object which will provide connection notification events
            for the current connection.</param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.InboundHttpToHttp2Adapter">
            <summary>
            Translates HTTP/1.x object reads into HTTP/2 frames.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.Internal.Strings">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.Internal.Strings.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.Internal.Strings.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.ExceptionArgument">
            <summary>The convention for this enum is using the argument name as the enum name</summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.ExceptionResource">
            <summary>The convention for this enum is using the resource name as the enum name</summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.ISensitivityDetector">
            <summary>
            Determine if a header name/value pair is treated as
            <a href="https://tools.ietf.org/html/rfc7541#section-7.1.3">sensitive</a>.
            If the object can be dynamically modified and shared across multiple connections it may need to be thread safe.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.ISensitivityDetector.IsSensitive(DotNetty.Common.Utilities.ICharSequence,DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Determine if a header <paramref name="name"/>/<paramref name="value"/> pair should be treated as
            <a href="https://tools.ietf.org/html/rfc7541#section-7.1.3">sensitive</a>.
            </summary>
            <param name="name">The name for the header.</param>
            <param name="value">The value of the header.</param>
            <returns><c>true</c> if a header <paramref name="name"/>/<paramref name="value"/> pair should be treated as
            <a href="https://tools.ietf.org/html/rfc7541#section-7.1.3">sensitive</a>.
            <c>false</c> otherwise.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IStreamByteDistributor">
            <summary>
            An object (used by remote flow control) that is responsible for distributing the bytes to be
            written across the streams in the connection.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IStreamByteDistributor.UpdateStreamableBytes(DotNetty.Codecs.Http2.IStreamByteDistributorStreamState)">
            <summary>
            Called when the streamable bytes for a stream has changed. Until this
            method is called for the first time for a give stream, the stream is assumed to have no
            streamable bytes.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IStreamByteDistributor.UpdateDependencyTree(System.Int32,System.Int32,System.Int16,System.Boolean)">
            <summary>
            Explicitly update the dependency tree. This method is called independently of stream state changes.
            </summary>
            <param name="childStreamId">The stream identifier associated with the child stream.</param>
            <param name="parentStreamId">The stream identifier associated with the parent stream. May be <c>0</c>,
            to make <paramref name="childStreamId"/> and immediate child of the connection.</param>
            <param name="weight">The weight which is used relative to other child streams for <paramref name="parentStreamId"/>. This value
            must be between 1 and 256 (inclusive).</param>
            <param name="exclusive">If <paramref name="childStreamId"/> should be the exclusive dependency of <paramref name="parentStreamId"/>.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IStreamByteDistributor.Distribute(System.Int32,DotNetty.Codecs.Http2.IStreamByteDistributorWriter)">
            <summary>
            Distributes up to <paramref name="maxBytes"/> to those streams containing streamable bytes and
            iterates across those streams to write the appropriate bytes. Criteria for
            traversing streams is undefined and it is up to the implementation to determine when to stop
            at a given stream.
            <para>The streamable bytes are not automatically updated by calling this method. It is up to the
            caller to indicate the number of bytes streamable after the write by calling
            <see cref="M:DotNetty.Codecs.Http2.IStreamByteDistributor.UpdateStreamableBytes(DotNetty.Codecs.Http2.IStreamByteDistributorStreamState)"/>.</para>
            </summary>
            <param name="maxBytes">the maximum number of bytes to write.</param>
            <param name="writer"></param>
            <returns><c>true</c> if there are still streamable bytes that have not yet been written,
            otherwise <c>false</c>.</returns>
            <exception cref="T:DotNetty.Codecs.Http2.Http2Exception">If an internal exception occurs and internal connection state would otherwise be
            corrupted.</exception>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IStreamByteDistributorStreamState">
            <summary>
            State information for the stream, indicating the number of bytes that are currently
            streamable. This is provided to the <see cref="M:DotNetty.Codecs.Http2.IStreamByteDistributor.UpdateStreamableBytes(DotNetty.Codecs.Http2.IStreamByteDistributorStreamState)"/> method.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IStreamByteDistributorStreamState.Stream">
            <summary>
            Gets the stream this state is associated with.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IStreamByteDistributorStreamState.PendingBytes">
            <summary>
            Get the amount of bytes this stream has pending to send. The actual amount written must not exceed
            <see cref="P:DotNetty.Codecs.Http2.IStreamByteDistributorStreamState.WindowSize"/>!
            </summary>
            <returns>The amount of bytes this stream has pending to send.
            see <see cref="M:DotNetty.Codecs.Http2.Http2CodecUtil.StreamableBytes(DotNetty.Codecs.Http2.IStreamByteDistributorStreamState)"/>.</returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IStreamByteDistributorStreamState.HasFrame">
            <summary>
            Indicates whether or not there are frames pending for this stream.
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.IStreamByteDistributorStreamState.WindowSize">
            <summary>
            The size (in bytes) of the stream's flow control window. The amount written must not exceed this amount!
            <para>A <see cref="T:DotNetty.Codecs.Http2.IStreamByteDistributor"/> needs to know the stream's window size in order to avoid allocating bytes
            if the window size is negative. The window size being <c>0</c> may also be significant to determine when if
            an stream has been given a chance to write an empty frame, and also enables optimizations like not writing
            empty frames in some situations (don't write headers until data can also be written).</para>
            </summary>
            <returns>the size of the stream's flow control window.
            see <see cref="M:DotNetty.Codecs.Http2.Http2CodecUtil.StreamableBytes(DotNetty.Codecs.Http2.IStreamByteDistributorStreamState)"/>.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.IStreamByteDistributorWriter">
            <summary>
            Object that performs the writing of the bytes that have been allocated for a stream.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.IStreamByteDistributorWriter.Write(DotNetty.Codecs.Http2.IHttp2Stream,System.Int32)">
            <summary>
            Writes the allocated bytes for this stream.
            <para>Any <see cref="T:System.Exception"/> thrown from this method is considered a programming error.
            A <c>GOAWAY</c> frame will be sent and the will be connection closed.</para>
            </summary>
            <param name="stream">the stream for which to perform the write.</param>
            <param name="numBytes">the number of bytes to write.</param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.NeverSensitiveDetector">
            <summary>
            Always return <c>false</c> for <see cref="M:DotNetty.Codecs.Http2.ISensitivityDetector.IsSensitive(DotNetty.Common.Utilities.ICharSequence,DotNetty.Common.Utilities.ICharSequence)"/>.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.PriorKnowledgeUpgradeEvent">
            <summary>
            User event that is fired to notify about HTTP/2 protocol is started.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.PseudoHeaderName">
            <summary>
            HTTP/2 pseudo-headers names.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.PseudoHeaderName.Method">
            <summary>
            <c>:method</c>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.PseudoHeaderName.Scheme">
            <summary>
            <c>:scheme</c>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.PseudoHeaderName.Authority">
            <summary>
            <c>:authority</c>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.PseudoHeaderName.Path">
            <summary>
            <c>:path</c>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.PseudoHeaderName.Status">
            <summary>
            <c>:status</c>
            </summary>
        </member>
        <member name="P:DotNetty.Codecs.Http2.PseudoHeaderName.Value">
            <summary>
            Return a slice so that the buffer gets its own reader index.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetty.Codecs.Http2.PseudoHeaderName.IsRequestOnly">
            <summary>
            Indicates whether the pseudo-header is to be used in a request context.
            @return <c>true</c> if the pseudo-header is to be used in a request context
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.PseudoHeaderName.IsPseudoHeader(DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Indicates whether the given header name is a valid HTTP/2 pseudo header.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.PseudoHeaderName.GetPseudoHeader(DotNetty.Common.Utilities.ICharSequence)">
            <summary>
            Returns the <see cref="T:DotNetty.Codecs.Http2.PseudoHeaderName"/> corresponding to the specified header name.
            return corresponding <see cref="T:DotNetty.Codecs.Http2.PseudoHeaderName"/> if any, <c>null</c> otherwise.
            </summary>
            <param name="header"></param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.ReadOnlyHttp2Headers">
            <summary>
            A variant of <see cref="T:DotNetty.Codecs.Http2.IHttp2Headers"/> which only supports read-only methods.
            <para>
            Any array passed to this class may be used directly in the underlying data structures of this class. If these
            arrays may be modified it is the caller's responsibility to supply this class with a copy of the array.
            </para>
            This may be a good alternative to <see cref="T:DotNetty.Codecs.Http2.DefaultHttp2Headers"/> if your have a fixed set of headers which will not
            change.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.ReadOnlyHttp2Headers.Trailers(System.Boolean,DotNetty.Common.Utilities.AsciiString[])">
            <summary>
            Used to create read only object designed to represent trailers.
            <para>If this is used for a purpose other than trailers you may violate the header serialization ordering defined by
            <a href="https://tools.ietf.org/html/rfc7540#section-8.1.2.1">RFC 7540, 8.1.2.1</a>.</para>
            </summary>
            <param name="validateHeaders"><c>true</c> will run validation on each header name/value pair to ensure protocol
            compliance.</param>
            <param name="otherHeaders">A an array of key:value pairs. Must not contain any
            <a href="https://tools.ietf.org/html/rfc7540#section-8.1.2.1">pseudo headers</a>
            or <c>null</c> names/values.
            A copy will <strong>NOT</strong> be made of this array. If the contents of this array
            may be modified externally you are responsible for passing in a copy.</param>
            <returns>A read only representation of the headers.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.ReadOnlyHttp2Headers.ClientHeaders(System.Boolean,DotNetty.Common.Utilities.AsciiString,DotNetty.Common.Utilities.AsciiString,DotNetty.Common.Utilities.AsciiString,DotNetty.Common.Utilities.AsciiString,DotNetty.Common.Utilities.AsciiString[])">
            <summary>
            Create a new read only representation of headers used by clients.
            </summary>
            <param name="validateHeaders"><c>true</c> will run validation on each header name/value pair to ensure protocol
            compliance.</param>
            <param name="method">The value for <see cref="F:DotNetty.Codecs.Http2.PseudoHeaderName.Method"/>.</param>
            <param name="path">The value for <see cref="F:DotNetty.Codecs.Http2.PseudoHeaderName.Path"/>.</param>
            <param name="scheme">The value for <see cref="F:DotNetty.Codecs.Http2.PseudoHeaderName.Scheme"/>.</param>
            <param name="authority">The value for <see cref="F:DotNetty.Codecs.Http2.PseudoHeaderName.Authority"/>.</param>
            <param name="otherHeaders">A an array of key:value pairs. Must not contain any
            <a href="https://tools.ietf.org/html/rfc7540#section-8.1.2.1">pseudo headers</a>
            or <c>null</c> names/values.
            A copy will <strong>NOT</strong> be made of this array. If the contents of this array
            may be modified externally you are responsible for passing in a copy.</param>
            <returns>a new read only representation of headers used by clients.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.ReadOnlyHttp2Headers.ServerHeaders(System.Boolean,DotNetty.Common.Utilities.AsciiString,DotNetty.Common.Utilities.AsciiString[])">
            <summary>
            Create a new read only representation of headers used by servers.
            </summary>
            <param name="validateHeaders"><c>true</c> will run validation on each header name/value pair to ensure protocol
            compliance.</param>
            <param name="status">The value for <see cref="F:DotNetty.Codecs.Http2.PseudoHeaderName.Status"/>.</param>
            <param name="otherHeaders">A an array of key:value pairs. Must not contain any
            <a href="https://tools.ietf.org/html/rfc7540#section-8.1.2.1">pseudo headers</a>
            or <c>null</c> names/values.
            A copy will <strong>NOT</strong> be made of this array. If the contents of this array
            may be modified externally you are responsible for passing in a copy.</param>
            <returns>a new read only representation of headers used by servers.</returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.ShutdownHint">
            <summary>
            Provides a hint as to if shutdown is justified, what type of shutdown should be executed.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.ShutdownHint.NoShutdown">
            <summary>
            Do not shutdown the underlying channel.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.ShutdownHint.GracefulShutdown">
            <summary>
            Attempt to execute a "graceful" shutdown. The definition of "graceful" is left to the implementation.
            An example of "graceful" would be wait for some amount of time until all active streams are closed.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.ShutdownHint.HardShutdown">
            <summary>
            Close the channel immediately after a <c>GOAWAY</c> is sent.
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.StreamBufferingEncoder">
            <summary>
            Implementation of a <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder"/> that dispatches all method call to another
            <see cref="T:DotNetty.Codecs.Http2.IHttp2ConnectionEncoder"/>, until <c>SETTINGS_MAX_CONCURRENT_STREAMS</c> is reached.
            <para>When this limit is hit, instead of rejecting any new streams this implementation buffers newly
            created streams and their corresponding frames. Once an active stream gets closed or the maximum
            number of concurrent streams is increased, this encoder will automatically try to empty its
            buffer and create as many new streams as possible.</para>
            <para>If a <c>GOAWAY</c> frame is received from the remote endpoint, all buffered writes for streams
            with an ID less than the specified {@code lastStreamId} will immediately fail with a
            <see cref="T:DotNetty.Codecs.Http2.Http2GoAwayException"/>.</para>
            <para>If the channel/encoder gets closed, all new and buffered writes will immediately fail with a
            <see cref="T:DotNetty.Codecs.Http2.Http2ChannelClosedException"/>.</para>
            <para>This implementation makes the buffering mostly transparent and is expected to be used as a
            drop-in decorator of <see cref="T:DotNetty.Codecs.Http2.DefaultHttp2ConnectionEncoder"/>.</para>
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.StreamBufferingEncoder._pendingStreams">
            <summary>
            Buffer for any streams and corresponding frames that could not be created due to the maximum
            concurrent stream limit being hit.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.StreamBufferingEncoder.NumBufferedStreams">
            <summary>
            Indicates the number of streams that are currently buffered, awaiting creation.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.StreamBufferingEncoder.CanCreateStream">
            <summary>
            Determines whether or not we're allowed to create a new stream right now.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.StreamBufferingEncoder.Frame.Release(System.Exception)">
            <summary>
            Release any resources (features, buffers, ...) associated with the frame.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.UniformStreamByteDistributor">
            <summary>
            A <see cref="T:DotNetty.Codecs.Http2.IStreamByteDistributor"/> that ignores stream priority and uniformly allocates bytes to all
            streams. This class uses a minimum chunk size that will be allocated to each stream. While
            fewer streams may be written to in each call to <see cref="M:DotNetty.Codecs.Http2.UniformStreamByteDistributor.Distribute(System.Int32,DotNetty.Codecs.Http2.IStreamByteDistributorWriter)"/>, doing this
            should improve the goodput on each written stream.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.UniformStreamByteDistributor._minAllocationChunk">
            <summary>
            The minimum number of bytes that we will attempt to allocate to a stream. This is to
            help improve goodput on a per-stream basis.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.UniformStreamByteDistributor.MinAllocationChunk(System.Int32)">
            <summary>
            Sets the minimum allocation chunk that will be allocated to each stream. Defaults to 1KiB.
            </summary>
            <param name="minAllocationChunk">the minimum number of bytes that will be allocated to each stream.
            Must be > 0.</param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.UniformStreamByteDistributor.State">
            <summary>
            The remote flow control state for a single stream.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.UniformStreamByteDistributor.State.Write(System.Int32,DotNetty.Codecs.Http2.IStreamByteDistributorWriter)">
            <summary>
            Write any allocated bytes for the given stream and updates the streamable bytes,
            assuming all of the bytes will be written.
            </summary>
            <param name="numBytes"></param>
            <param name="writer"></param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor">
            <summary>
            A <see cref="T:DotNetty.Codecs.Http2.IStreamByteDistributor"/> that is sensitive to stream priority and uses
            <a href="https://en.wikipedia.org/wiki/Weighted_fair_queueing">Weighted Fair Queueing</a> approach for distributing
            bytes.
            <para>Inspiration for this distributor was taken from Linux's
            <a href="https://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt">Completely Fair Scheduler</a>
            to model the distribution of bytes to simulate an "ideal multi-tasking CPU", but in this case we are simulating
            an "ideal multi-tasking NIC".</para>
            Each write operation will use the <see cref="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.AllocationQuantum(System.Int32)"/> to know how many more bytes should be allocated
            relative to the next stream which wants to write. This is to balance fairness while also considering goodput.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.InitialChildrenMapSize">
             <summary>
             The initial size of the children map is chosen to be conservative on initial memory allocations under
             the assumption that most streams will have a small number of children.This choice may be
             sub-optimal if when children are present there are many children(i.e.a web page which has many
             dependencies to load).
            
             Visible only for testing!
             </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.DefaultMaxStateOnlySize">
            <summary>
            FireFox currently uses 5 streams to establish QoS classes.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor._stateOnlyMap">
            <summary>
            If there is no <see cref="T:DotNetty.Codecs.Http2.IHttp2Stream"/> object, but we still persist priority information then this is where the state will
            reside.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor._stateOnlyRemovalQueue">
            <summary>
            This queue will hold streams that are not active and provides the capability to retain priority for streams which
            have no <see cref="T:DotNetty.Codecs.Http2.IHttp2Stream"/> object. See <see cref="T:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.StateOnlyComparator"/> for the priority comparator.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor._allocationQuantum">
            <summary>
            The minimum number of bytes that we will attempt to allocate to a stream. This is to
            help improve goodput on a per-stream basis.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.AllocationQuantum(System.Int32)">
            <summary>
            Sets the amount of bytes that will be allocated to each stream. Defaults to 1KiB.
            </summary>
            <param name="allocationQuantum">the amount of bytes that will be allocated to each stream. Must be &gt; 0.</param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.DistributeToChildren(System.Int32,DotNetty.Codecs.Http2.IStreamByteDistributorWriter,DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State)">
            <summary>
            It is a pre-condition that <see cref="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State.PollPseudoTimeQueue"/> returns a non-<c>null</c> value. This is a result of the way
            the allocation algorithm is structured and can be explained in the following cases:
            <h3>For the recursive case</h3>
            If a stream has no children (in the allocation tree) than that node must be active or it will not be in the
            allocation tree. If a node is active then it will not delegate to children and recursion ends.
            <h3>For the initial case</h3>
            We check connectionState.activeCountForTree == 0 before any allocation is done. So if the connection stream
            has no active children we don't get into this method.
            </summary>
            <param name="maxBytes"></param>
            <param name="writer"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.IsChild(System.Int32,System.Int32,System.Int16)">
            <summary>
            For testing only!
            </summary>
            <param name="childId"></param>
            <param name="parentId"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.NumChildren(System.Int32)">
            <summary>
            For testing only!
            </summary>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.NotifyParentChanged(System.Collections.Generic.List{DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.ParentChangedEvent})">
            <summary>
            Notify all listeners of the priority tree change events (in ascending order)
            </summary>
            <param name="events">The events (top down order) which have changed</param>
        </member>
        <member name="T:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.StateOnlyComparator">
            <summary>
            A comparator for <see cref="T:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State"/> which has no associated <see cref="T:DotNetty.Codecs.Http2.IHttp2Stream"/> object. The general precedence is:
            <ul>
                <li>Was a stream activated or reserved (streams only used for priority are higher priority)</li>
                <li>Depth in the priority tree (closer to root is higher priority></li>
                <li>Stream ID (higher stream ID is higher priority - used for tie breaker)</li>
            </ul>
            </summary>
        </member>
        <member name="T:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State">
            <summary>
            The remote flow control state for a single stream.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State._stream">
            <summary>
            Maybe <c>null</c> if the stream if the stream is not active.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State._activeCountForTree">
            <summary>
            Count of nodes rooted at this sub tree with <see cref="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State.IsActive"/> equal to <c>true</c>.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State._pseudoTimeToWrite">
            <summary>
            An estimate of when this node should be given the opportunity to write data.
            </summary>
        </member>
        <member name="F:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State._pseudoTime">
            <summary>
            A pseudo time maintained for immediate children to base their <see cref="F:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State._pseudoTimeToWrite"/> off of.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State.TakeChild(System.Collections.Generic.IDictionary{System.Int32,DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State},DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State,System.Boolean,System.Collections.Generic.List{DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.ParentChangedEvent})">
            <summary>
            Adds a child to this priority. If exclusive is set, any children of this node are moved to being dependent on
            the child.
            </summary>
            <param name="childItr"></param>
            <param name="child"></param>
            <param name="exclusive"></param>
            <param name="events"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State.RemoveChild(DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State)">
            <summary>
            Removes the child priority and moves any of its dependencies to being direct dependencies on this node.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State.RemoveAllChildrenExcept(DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State)">
            <summary>
            Remove all children with the exception of <paramref name="stateToRetain"/>.
            This method is intended to be used to support an exclusive priority dependency operation.
            </summary>
            <param name="stateToRetain"></param>
            <returns>The map of children prior to this operation, excluding <paramref name="stateToRetain"/> if present.</returns>
        </member>
        <member name="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State.UpdatePseudoTime(DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State,System.Int32,System.Int64)">
            <summary>
            Assumes the parents <paramref name="totalQueuedWeights"/> includes this node's weight.
            </summary>
            <param name="parentState"></param>
            <param name="nsent"></param>
            <param name="totalQueuedWeights"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State.OfferAndInitializePseudoTime(DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State)">
            <summary>
            The concept of pseudoTime can be influenced by priority tree manipulations or if a stream goes from "active"
            to "non-active". This method accounts for that by initializing the <see cref="F:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State._pseudoTimeToWrite"/>  for
            <paramref name="state"/> to <see cref="F:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State._pseudoTime"/> of this node and then calls <see cref="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State.OfferPseudoTimeQueue(DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State)"/>.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State.PollPseudoTimeQueue">
            <summary>
            Must only be called if the pseudoTimeQueue is non-empty!
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.ParentChangedEvent">
            <summary>
            Allows a correlation to be made between a stream and its old parent before a parent change occurs.
            </summary>
        </member>
        <member name="M:DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.ParentChangedEvent.#ctor(DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State,DotNetty.Codecs.Http2.WeightedFairQueueByteDistributor.State)">
            <summary>
            Create a new instance.
            </summary>
            <param name="state">The state who has had a parent change.</param>
            <param name="oldParent">The previous parent.</param>
        </member>
    </members>
</doc>
